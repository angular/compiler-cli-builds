import { EmitScope } from './emit_scope';
/**
 * This class is a specialization of the `EmitScope` class that is designed for the situation where
 * there is no clear shared scope for constant statements. In this case they are bundled with the
 * translated definition inside an IIFE.
 */
export class IifeEmitScope extends EmitScope {
    constructor(ngImport, translator, factory) {
        super(ngImport, translator);
        this.factory = factory;
    }
    /**
     * Translate the given Output AST definition expression into a generic `TExpression`.
     *
     * Wraps the output from `EmitScope.translateDefinition()` and `EmitScope.getConstantStatements()`
     * in an IIFE.
     */
    translateDefinition(definition) {
        const constantStatements = super.getConstantStatements();
        const returnStatement = this.factory.createReturnStatement(super.translateDefinition(definition));
        const body = this.factory.createBlock([...constantStatements, returnStatement]);
        const fn = this.factory.createFunctionExpression(/* name */ null, /* args */ [], body);
        return this.factory.createCallExpression(fn, /* args */ [], /* pure */ false);
    }
    /**
     * It is not valid to call this method, since there will be no shared constant statements - they
     * are already emitted in the IIFE alongside the translated definition.
     */
    getConstantStatements() {
        throw new Error('BUG - IifeEmitScope should not expose any constant statements');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWlmZV9lbWl0X3Njb3BlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tcGlsZXItY2xpL2xpbmtlci9zcmMvZmlsZV9saW5rZXIvZW1pdF9zY29wZXMvaWlmZV9lbWl0X3Njb3BlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVlBLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFFdkM7Ozs7R0FJRztBQUNILE1BQU0sT0FBTyxhQUF1QyxTQUFRLFNBQWtDO0lBQzVGLFlBQ0ksUUFBcUIsRUFBRSxVQUErQyxFQUNyRCxPQUE0QztRQUMvRCxLQUFLLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRFQsWUFBTyxHQUFQLE9BQU8sQ0FBcUM7SUFFakUsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsbUJBQW1CLENBQUMsVUFBd0I7UUFDMUMsTUFBTSxrQkFBa0IsR0FBRyxLQUFLLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUV6RCxNQUFNLGVBQWUsR0FDakIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUM5RSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsa0JBQWtCLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztRQUNoRixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFBLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN0RixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsRUFBRSxFQUFFLFVBQVUsQ0FBQSxFQUFFLEVBQUUsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFRDs7O09BR0c7SUFDSCxxQkFBcUI7UUFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQywrREFBK0QsQ0FBQyxDQUFDO0lBQ25GLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0ICogYXMgbyBmcm9tICdAYW5ndWxhci9jb21waWxlci9zcmMvb3V0cHV0L291dHB1dF9hc3QnO1xuXG5pbXBvcnQge0FzdEZhY3Rvcnl9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9uZ3RzYy90cmFuc2xhdG9yJztcbmltcG9ydCB7VHJhbnNsYXRvcn0gZnJvbSAnLi4vdHJhbnNsYXRvcic7XG5cbmltcG9ydCB7RW1pdFNjb3BlfSBmcm9tICcuL2VtaXRfc2NvcGUnO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgaXMgYSBzcGVjaWFsaXphdGlvbiBvZiB0aGUgYEVtaXRTY29wZWAgY2xhc3MgdGhhdCBpcyBkZXNpZ25lZCBmb3IgdGhlIHNpdHVhdGlvbiB3aGVyZVxuICogdGhlcmUgaXMgbm8gY2xlYXIgc2hhcmVkIHNjb3BlIGZvciBjb25zdGFudCBzdGF0ZW1lbnRzLiBJbiB0aGlzIGNhc2UgdGhleSBhcmUgYnVuZGxlZCB3aXRoIHRoZVxuICogdHJhbnNsYXRlZCBkZWZpbml0aW9uIGluc2lkZSBhbiBJSUZFLlxuICovXG5leHBvcnQgY2xhc3MgSWlmZUVtaXRTY29wZTxUU3RhdGVtZW50LCBURXhwcmVzc2lvbj4gZXh0ZW5kcyBFbWl0U2NvcGU8VFN0YXRlbWVudCwgVEV4cHJlc3Npb24+IHtcbiAgY29uc3RydWN0b3IoXG4gICAgICBuZ0ltcG9ydDogVEV4cHJlc3Npb24sIHRyYW5zbGF0b3I6IFRyYW5zbGF0b3I8VFN0YXRlbWVudCwgVEV4cHJlc3Npb24+LFxuICAgICAgcHJpdmF0ZSByZWFkb25seSBmYWN0b3J5OiBBc3RGYWN0b3J5PFRTdGF0ZW1lbnQsIFRFeHByZXNzaW9uPikge1xuICAgIHN1cGVyKG5nSW1wb3J0LCB0cmFuc2xhdG9yKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2xhdGUgdGhlIGdpdmVuIE91dHB1dCBBU1QgZGVmaW5pdGlvbiBleHByZXNzaW9uIGludG8gYSBnZW5lcmljIGBURXhwcmVzc2lvbmAuXG4gICAqXG4gICAqIFdyYXBzIHRoZSBvdXRwdXQgZnJvbSBgRW1pdFNjb3BlLnRyYW5zbGF0ZURlZmluaXRpb24oKWAgYW5kIGBFbWl0U2NvcGUuZ2V0Q29uc3RhbnRTdGF0ZW1lbnRzKClgXG4gICAqIGluIGFuIElJRkUuXG4gICAqL1xuICB0cmFuc2xhdGVEZWZpbml0aW9uKGRlZmluaXRpb246IG8uRXhwcmVzc2lvbik6IFRFeHByZXNzaW9uIHtcbiAgICBjb25zdCBjb25zdGFudFN0YXRlbWVudHMgPSBzdXBlci5nZXRDb25zdGFudFN0YXRlbWVudHMoKTtcblxuICAgIGNvbnN0IHJldHVyblN0YXRlbWVudCA9XG4gICAgICAgIHRoaXMuZmFjdG9yeS5jcmVhdGVSZXR1cm5TdGF0ZW1lbnQoc3VwZXIudHJhbnNsYXRlRGVmaW5pdGlvbihkZWZpbml0aW9uKSk7XG4gICAgY29uc3QgYm9keSA9IHRoaXMuZmFjdG9yeS5jcmVhdGVCbG9jayhbLi4uY29uc3RhbnRTdGF0ZW1lbnRzLCByZXR1cm5TdGF0ZW1lbnRdKTtcbiAgICBjb25zdCBmbiA9IHRoaXMuZmFjdG9yeS5jcmVhdGVGdW5jdGlvbkV4cHJlc3Npb24oLyogbmFtZSAqLyBudWxsLCAvKiBhcmdzICovW10sIGJvZHkpO1xuICAgIHJldHVybiB0aGlzLmZhY3RvcnkuY3JlYXRlQ2FsbEV4cHJlc3Npb24oZm4sIC8qIGFyZ3MgKi9bXSwgLyogcHVyZSAqLyBmYWxzZSk7XG4gIH1cblxuICAvKipcbiAgICogSXQgaXMgbm90IHZhbGlkIHRvIGNhbGwgdGhpcyBtZXRob2QsIHNpbmNlIHRoZXJlIHdpbGwgYmUgbm8gc2hhcmVkIGNvbnN0YW50IHN0YXRlbWVudHMgLSB0aGV5XG4gICAqIGFyZSBhbHJlYWR5IGVtaXR0ZWQgaW4gdGhlIElJRkUgYWxvbmdzaWRlIHRoZSB0cmFuc2xhdGVkIGRlZmluaXRpb24uXG4gICAqL1xuICBnZXRDb25zdGFudFN0YXRlbWVudHMoKTogVFN0YXRlbWVudFtdIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0JVRyAtIElpZmVFbWl0U2NvcGUgc2hvdWxkIG5vdCBleHBvc2UgYW55IGNvbnN0YW50IHN0YXRlbWVudHMnKTtcbiAgfVxufVxuIl19