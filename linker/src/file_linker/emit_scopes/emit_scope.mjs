/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ConstantPool } from '@angular/compiler';
import { LinkerImportGenerator } from '../../linker_import_generator';
/**
 * This class represents (from the point of view of the `FileLinker`) the scope in which
 * statements and expressions related to a linked partial declaration will be emitted.
 *
 * It holds a copy of a `ConstantPool` that is used to capture any constant statements that need to
 * be emitted in this context.
 *
 * This implementation will emit the definition and the constant statements separately.
 */
export class EmitScope {
    constructor(ngImport, translator) {
        this.ngImport = ngImport;
        this.translator = translator;
        this.constantPool = new ConstantPool();
    }
    /**
     * Translate the given Output AST definition expression into a generic `TExpression`.
     *
     * Use a `LinkerImportGenerator` to handle any imports in the definition.
     */
    translateDefinition(definition) {
        return this.translator.translateExpression(definition, new LinkerImportGenerator(this.ngImport));
    }
    /**
     * Return any constant statements that are shared between all uses of this `EmitScope`.
     */
    getConstantStatements() {
        const importGenerator = new LinkerImportGenerator(this.ngImport);
        return this.constantPool.statements.map(statement => this.translator.translateStatement(statement, importGenerator));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1pdF9zY29wZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvbXBpbGVyLWNsaS9saW5rZXIvc3JjL2ZpbGVfbGlua2VyL2VtaXRfc2NvcGVzL2VtaXRfc2NvcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBQ0gsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBRS9DLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBR3BFOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxPQUFPLFNBQVM7SUFHcEIsWUFDdUIsUUFBcUIsRUFDckIsVUFBK0M7UUFEL0MsYUFBUSxHQUFSLFFBQVEsQ0FBYTtRQUNyQixlQUFVLEdBQVYsVUFBVSxDQUFxQztRQUo3RCxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFJOEIsQ0FBQztJQUUxRTs7OztPQUlHO0lBQ0gsbUJBQW1CLENBQUMsVUFBd0I7UUFDMUMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUN0QyxVQUFVLEVBQUUsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxxQkFBcUI7UUFDbkIsTUFBTSxlQUFlLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakUsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQ25DLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztJQUNuRixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7Q29uc3RhbnRQb29sfSBmcm9tICdAYW5ndWxhci9jb21waWxlcic7XG5pbXBvcnQgKiBhcyBvIGZyb20gJ0Bhbmd1bGFyL2NvbXBpbGVyL3NyYy9vdXRwdXQvb3V0cHV0X2FzdCc7XG5pbXBvcnQge0xpbmtlckltcG9ydEdlbmVyYXRvcn0gZnJvbSAnLi4vLi4vbGlua2VyX2ltcG9ydF9nZW5lcmF0b3InO1xuaW1wb3J0IHtUcmFuc2xhdG9yfSBmcm9tICcuLi90cmFuc2xhdG9yJztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgKGZyb20gdGhlIHBvaW50IG9mIHZpZXcgb2YgdGhlIGBGaWxlTGlua2VyYCkgdGhlIHNjb3BlIGluIHdoaWNoXG4gKiBzdGF0ZW1lbnRzIGFuZCBleHByZXNzaW9ucyByZWxhdGVkIHRvIGEgbGlua2VkIHBhcnRpYWwgZGVjbGFyYXRpb24gd2lsbCBiZSBlbWl0dGVkLlxuICpcbiAqIEl0IGhvbGRzIGEgY29weSBvZiBhIGBDb25zdGFudFBvb2xgIHRoYXQgaXMgdXNlZCB0byBjYXB0dXJlIGFueSBjb25zdGFudCBzdGF0ZW1lbnRzIHRoYXQgbmVlZCB0b1xuICogYmUgZW1pdHRlZCBpbiB0aGlzIGNvbnRleHQuXG4gKlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiB3aWxsIGVtaXQgdGhlIGRlZmluaXRpb24gYW5kIHRoZSBjb25zdGFudCBzdGF0ZW1lbnRzIHNlcGFyYXRlbHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBFbWl0U2NvcGU8VFN0YXRlbWVudCwgVEV4cHJlc3Npb24+IHtcbiAgcmVhZG9ubHkgY29uc3RhbnRQb29sID0gbmV3IENvbnN0YW50UG9vbCgpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgcHJvdGVjdGVkIHJlYWRvbmx5IG5nSW1wb3J0OiBURXhwcmVzc2lvbixcbiAgICAgIHByb3RlY3RlZCByZWFkb25seSB0cmFuc2xhdG9yOiBUcmFuc2xhdG9yPFRTdGF0ZW1lbnQsIFRFeHByZXNzaW9uPikge31cblxuICAvKipcbiAgICogVHJhbnNsYXRlIHRoZSBnaXZlbiBPdXRwdXQgQVNUIGRlZmluaXRpb24gZXhwcmVzc2lvbiBpbnRvIGEgZ2VuZXJpYyBgVEV4cHJlc3Npb25gLlxuICAgKlxuICAgKiBVc2UgYSBgTGlua2VySW1wb3J0R2VuZXJhdG9yYCB0byBoYW5kbGUgYW55IGltcG9ydHMgaW4gdGhlIGRlZmluaXRpb24uXG4gICAqL1xuICB0cmFuc2xhdGVEZWZpbml0aW9uKGRlZmluaXRpb246IG8uRXhwcmVzc2lvbik6IFRFeHByZXNzaW9uIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2xhdG9yLnRyYW5zbGF0ZUV4cHJlc3Npb24oXG4gICAgICAgIGRlZmluaXRpb24sIG5ldyBMaW5rZXJJbXBvcnRHZW5lcmF0b3IodGhpcy5uZ0ltcG9ydCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhbnkgY29uc3RhbnQgc3RhdGVtZW50cyB0aGF0IGFyZSBzaGFyZWQgYmV0d2VlbiBhbGwgdXNlcyBvZiB0aGlzIGBFbWl0U2NvcGVgLlxuICAgKi9cbiAgZ2V0Q29uc3RhbnRTdGF0ZW1lbnRzKCk6IFRTdGF0ZW1lbnRbXSB7XG4gICAgY29uc3QgaW1wb3J0R2VuZXJhdG9yID0gbmV3IExpbmtlckltcG9ydEdlbmVyYXRvcih0aGlzLm5nSW1wb3J0KTtcbiAgICByZXR1cm4gdGhpcy5jb25zdGFudFBvb2wuc3RhdGVtZW50cy5tYXAoXG4gICAgICAgIHN0YXRlbWVudCA9PiB0aGlzLnRyYW5zbGF0b3IudHJhbnNsYXRlU3RhdGVtZW50KHN0YXRlbWVudCwgaW1wb3J0R2VuZXJhdG9yKSk7XG4gIH1cbn1cbiJdfQ==