import { Context, ExpressionTranslatorVisitor } from '@angular/compiler-cli/src/ngtsc/translator';
/**
 * Generic translator helper class, which exposes methods for translating expressions and
 * statements.
 */
export class Translator {
    constructor(factory) {
        this.factory = factory;
    }
    /**
     * Translate the given output AST in the context of an expression.
     */
    translateExpression(expression, imports, options = {}) {
        return expression.visitExpression(new ExpressionTranslatorVisitor(this.factory, imports, options), new Context(false));
    }
    /**
     * Translate the given output AST in the context of a statement.
     */
    translateStatement(statement, imports, options = {}) {
        return statement.visitStatement(new ExpressionTranslatorVisitor(this.factory, imports, options), new Context(true));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvbXBpbGVyLWNsaS9saW5rZXIvc3JjL2ZpbGVfbGlua2VyL3RyYW5zbGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsT0FBTyxFQUFhLE9BQU8sRUFBRSwyQkFBMkIsRUFBcUMsTUFBTSw0Q0FBNEMsQ0FBQztBQUVoSjs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sVUFBVTtJQUNyQixZQUFvQixPQUE0QztRQUE1QyxZQUFPLEdBQVAsT0FBTyxDQUFxQztJQUFHLENBQUM7SUFFcEU7O09BRUc7SUFDSCxtQkFBbUIsQ0FDZixVQUF3QixFQUFFLE9BQXFDLEVBQy9ELFVBQTBDLEVBQUU7UUFDOUMsT0FBTyxVQUFVLENBQUMsZUFBZSxDQUM3QixJQUFJLDJCQUEyQixDQUEwQixJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFDeEYsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxrQkFBa0IsQ0FDZCxTQUFzQixFQUFFLE9BQXFDLEVBQzdELFVBQTBDLEVBQUU7UUFDOUMsT0FBTyxTQUFTLENBQUMsY0FBYyxDQUMzQixJQUFJLDJCQUEyQixDQUEwQixJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFDeEYsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN6QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCAqIGFzIG8gZnJvbSAnQGFuZ3VsYXIvY29tcGlsZXInO1xuaW1wb3J0IHtBc3RGYWN0b3J5LCBDb250ZXh0LCBFeHByZXNzaW9uVHJhbnNsYXRvclZpc2l0b3IsIEltcG9ydEdlbmVyYXRvciwgVHJhbnNsYXRvck9wdGlvbnN9IGZyb20gJ0Bhbmd1bGFyL2NvbXBpbGVyLWNsaS9zcmMvbmd0c2MvdHJhbnNsYXRvcic7XG5cbi8qKlxuICogR2VuZXJpYyB0cmFuc2xhdG9yIGhlbHBlciBjbGFzcywgd2hpY2ggZXhwb3NlcyBtZXRob2RzIGZvciB0cmFuc2xhdGluZyBleHByZXNzaW9ucyBhbmRcbiAqIHN0YXRlbWVudHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUcmFuc2xhdG9yPFRTdGF0ZW1lbnQsIFRFeHByZXNzaW9uPiB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZmFjdG9yeTogQXN0RmFjdG9yeTxUU3RhdGVtZW50LCBURXhwcmVzc2lvbj4pIHt9XG5cbiAgLyoqXG4gICAqIFRyYW5zbGF0ZSB0aGUgZ2l2ZW4gb3V0cHV0IEFTVCBpbiB0aGUgY29udGV4dCBvZiBhbiBleHByZXNzaW9uLlxuICAgKi9cbiAgdHJhbnNsYXRlRXhwcmVzc2lvbihcbiAgICAgIGV4cHJlc3Npb246IG8uRXhwcmVzc2lvbiwgaW1wb3J0czogSW1wb3J0R2VuZXJhdG9yPFRFeHByZXNzaW9uPixcbiAgICAgIG9wdGlvbnM6IFRyYW5zbGF0b3JPcHRpb25zPFRFeHByZXNzaW9uPiA9IHt9KTogVEV4cHJlc3Npb24ge1xuICAgIHJldHVybiBleHByZXNzaW9uLnZpc2l0RXhwcmVzc2lvbihcbiAgICAgICAgbmV3IEV4cHJlc3Npb25UcmFuc2xhdG9yVmlzaXRvcjxUU3RhdGVtZW50LCBURXhwcmVzc2lvbj4odGhpcy5mYWN0b3J5LCBpbXBvcnRzLCBvcHRpb25zKSxcbiAgICAgICAgbmV3IENvbnRleHQoZmFsc2UpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2xhdGUgdGhlIGdpdmVuIG91dHB1dCBBU1QgaW4gdGhlIGNvbnRleHQgb2YgYSBzdGF0ZW1lbnQuXG4gICAqL1xuICB0cmFuc2xhdGVTdGF0ZW1lbnQoXG4gICAgICBzdGF0ZW1lbnQ6IG8uU3RhdGVtZW50LCBpbXBvcnRzOiBJbXBvcnRHZW5lcmF0b3I8VEV4cHJlc3Npb24+LFxuICAgICAgb3B0aW9uczogVHJhbnNsYXRvck9wdGlvbnM8VEV4cHJlc3Npb24+ID0ge30pOiBUU3RhdGVtZW50IHtcbiAgICByZXR1cm4gc3RhdGVtZW50LnZpc2l0U3RhdGVtZW50KFxuICAgICAgICBuZXcgRXhwcmVzc2lvblRyYW5zbGF0b3JWaXNpdG9yPFRTdGF0ZW1lbnQsIFRFeHByZXNzaW9uPih0aGlzLmZhY3RvcnksIGltcG9ydHMsIG9wdGlvbnMpLFxuICAgICAgICBuZXcgQ29udGV4dCh0cnVlKSk7XG4gIH1cbn1cbiJdfQ==