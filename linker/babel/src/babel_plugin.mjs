import { NodeJSFileSystem } from '../../../src/ngtsc/file_system';
import { ConsoleLogger, LogLevel } from '../../../src/ngtsc/logging';
import { createEs2015LinkerPlugin } from './es2015_linker_plugin';
/**
 * This is the Babel plugin definition that is provided as a default export from the package, such
 * that the plugin can be used using the module specifier of the package. This is the recommended
 * way of integrating the Angular Linker into a build pipeline other than the Angular CLI.
 *
 * When the module specifier `@angular/compiler-cli/linker/babel` is used as a plugin in a Babel
 * configuration, Babel invokes this function (by means of the default export) to create the plugin
 * instance according to the provided options.
 *
 * The linker plugin that is created uses the native NodeJS filesystem APIs to interact with the
 * filesystem. Any logging output is printed to the console.
 *
 * @param api Provides access to the Babel environment that is configuring this plugin.
 * @param options The plugin options that have been configured.
 */
export function defaultLinkerPlugin(api, options) {
    api.assertVersion(7);
    return createEs2015LinkerPlugin(Object.assign(Object.assign({}, options), { fileSystem: new NodeJSFileSystem(), logger: new ConsoleLogger(LogLevel.info) }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFiZWxfcGx1Z2luLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tcGlsZXItY2xpL2xpbmtlci9iYWJlbC9zcmMvYmFiZWxfcGx1Z2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVNBLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGdDQUFnQyxDQUFDO0FBQ2hFLE9BQU8sRUFBQyxhQUFhLEVBQUUsUUFBUSxFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFHbkUsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFFaEU7Ozs7Ozs7Ozs7Ozs7O0dBY0c7QUFDSCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsR0FBYyxFQUFFLE9BQStCO0lBQ2pGLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFckIsT0FBTyx3QkFBd0IsaUNBQzFCLE9BQU8sS0FDVixVQUFVLEVBQUUsSUFBSSxnQkFBZ0IsRUFBRSxFQUNsQyxNQUFNLEVBQUUsSUFBSSxhQUFhLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUN4QyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHtDb25maWdBUEksIFBsdWdpbk9ian0gZnJvbSAnQGJhYmVsL2NvcmUnO1xuXG5pbXBvcnQge05vZGVKU0ZpbGVTeXN0ZW19IGZyb20gJy4uLy4uLy4uL3NyYy9uZ3RzYy9maWxlX3N5c3RlbSc7XG5pbXBvcnQge0NvbnNvbGVMb2dnZXIsIExvZ0xldmVsfSBmcm9tICcuLi8uLi8uLi9zcmMvbmd0c2MvbG9nZ2luZyc7XG5pbXBvcnQge0xpbmtlck9wdGlvbnN9IGZyb20gJy4uLy4uL3NyYy9maWxlX2xpbmtlci9saW5rZXJfb3B0aW9ucyc7XG5cbmltcG9ydCB7Y3JlYXRlRXMyMDE1TGlua2VyUGx1Z2lufSBmcm9tICcuL2VzMjAxNV9saW5rZXJfcGx1Z2luJztcblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBCYWJlbCBwbHVnaW4gZGVmaW5pdGlvbiB0aGF0IGlzIHByb3ZpZGVkIGFzIGEgZGVmYXVsdCBleHBvcnQgZnJvbSB0aGUgcGFja2FnZSwgc3VjaFxuICogdGhhdCB0aGUgcGx1Z2luIGNhbiBiZSB1c2VkIHVzaW5nIHRoZSBtb2R1bGUgc3BlY2lmaWVyIG9mIHRoZSBwYWNrYWdlLiBUaGlzIGlzIHRoZSByZWNvbW1lbmRlZFxuICogd2F5IG9mIGludGVncmF0aW5nIHRoZSBBbmd1bGFyIExpbmtlciBpbnRvIGEgYnVpbGQgcGlwZWxpbmUgb3RoZXIgdGhhbiB0aGUgQW5ndWxhciBDTEkuXG4gKlxuICogV2hlbiB0aGUgbW9kdWxlIHNwZWNpZmllciBgQGFuZ3VsYXIvY29tcGlsZXItY2xpL2xpbmtlci9iYWJlbGAgaXMgdXNlZCBhcyBhIHBsdWdpbiBpbiBhIEJhYmVsXG4gKiBjb25maWd1cmF0aW9uLCBCYWJlbCBpbnZva2VzIHRoaXMgZnVuY3Rpb24gKGJ5IG1lYW5zIG9mIHRoZSBkZWZhdWx0IGV4cG9ydCkgdG8gY3JlYXRlIHRoZSBwbHVnaW5cbiAqIGluc3RhbmNlIGFjY29yZGluZyB0byB0aGUgcHJvdmlkZWQgb3B0aW9ucy5cbiAqXG4gKiBUaGUgbGlua2VyIHBsdWdpbiB0aGF0IGlzIGNyZWF0ZWQgdXNlcyB0aGUgbmF0aXZlIE5vZGVKUyBmaWxlc3lzdGVtIEFQSXMgdG8gaW50ZXJhY3Qgd2l0aCB0aGVcbiAqIGZpbGVzeXN0ZW0uIEFueSBsb2dnaW5nIG91dHB1dCBpcyBwcmludGVkIHRvIHRoZSBjb25zb2xlLlxuICpcbiAqIEBwYXJhbSBhcGkgUHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBCYWJlbCBlbnZpcm9ubWVudCB0aGF0IGlzIGNvbmZpZ3VyaW5nIHRoaXMgcGx1Z2luLlxuICogQHBhcmFtIG9wdGlvbnMgVGhlIHBsdWdpbiBvcHRpb25zIHRoYXQgaGF2ZSBiZWVuIGNvbmZpZ3VyZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TGlua2VyUGx1Z2luKGFwaTogQ29uZmlnQVBJLCBvcHRpb25zOiBQYXJ0aWFsPExpbmtlck9wdGlvbnM+KTogUGx1Z2luT2JqIHtcbiAgYXBpLmFzc2VydFZlcnNpb24oNyk7XG5cbiAgcmV0dXJuIGNyZWF0ZUVzMjAxNUxpbmtlclBsdWdpbih7XG4gICAgLi4ub3B0aW9ucyxcbiAgICBmaWxlU3lzdGVtOiBuZXcgTm9kZUpTRmlsZVN5c3RlbSgpLFxuICAgIGxvZ2dlcjogbmV3IENvbnNvbGVMb2dnZXIoTG9nTGV2ZWwuaW5mbyksXG4gIH0pO1xufVxuIl19