{"version":3,"file":"r3_transform.js","sourceRoot":"","sources":["../../../../../packages/compiler-cli/src/transformers/r3_transform.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAKH,+CAAgD;AAKhD;;GAEG;AACH,2CAAkD,OAAwB;IACxE,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;QACzB,kEAAkE;QAClE,MAAM,CAAC,cAAM,OAAA,UAAA,EAAE,IAAI,OAAA,EAAE,EAAF,CAAE,EAAR,CAAQ,CAAC;IACxB,CAAC;IACD,IAAM,SAAS,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAA0B,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAf,CAAe,CAAC,CAAC,CAAC;IACtF,MAAM,CAAC,UAAS,OAAiC;QAC/C,MAAM,CAAC,UAAS,UAAyB;YACvC,IAAM,MAAM,GAAG,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAClD,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACpC,IAAA,+EAAa,CAAkD;gBACtE,MAAM,CAAC,aAAa,CAAC;YACvB,CAAC;YACD,MAAM,CAAC,UAAU,CAAC;QACpB,CAAC,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAhBD,8EAgBC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PartialModule, Statement, StaticSymbol} from '@angular/compiler';\nimport * as ts from 'typescript';\n\nimport {updateSourceFile} from './node_emitter';\n\nexport type Transformer = (sourceFile: ts.SourceFile) => ts.SourceFile;\nexport type TransformerFactory = (context: ts.TransformationContext) => Transformer;\n\n/**\n * Returns a transformer that adds the requested static methods specified by modules.\n */\nexport function getAngularClassTransformerFactory(modules: PartialModule[]): TransformerFactory {\n  if (modules.length === 0) {\n    // If no modules are specified, just return an identity transform.\n    return () => sf => sf;\n  }\n  const moduleMap = new Map(modules.map<[string, PartialModule]>(m => [m.fileName, m]));\n  return function(context: ts.TransformationContext) {\n    return function(sourceFile: ts.SourceFile): ts.SourceFile {\n      const module = moduleMap.get(sourceFile.fileName);\n      if (module && module.statements.length > 0) {\n        const [newSourceFile] = updateSourceFile(sourceFile, module, context);\n        return newSourceFile;\n      }\n      return sourceFile;\n    };\n  };\n}\n"]}