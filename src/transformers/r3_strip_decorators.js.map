{"version":3,"file":"r3_strip_decorators.js","sourceRoot":"","sources":["../../../../../packages/compiler-cli/src/transformers/r3_strip_decorators.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {StaticReflector, StaticSymbol} from '@angular/compiler';\nimport * as ts from 'typescript';\n\nimport {MetadataValue, isClassMetadata, isMetadataImportedSymbolReferenceExpression, isMetadataSymbolicCallExpression} from '../metadata';\n\nimport {MetadataTransformer, ValueTransform} from './metadata_cache';\n\nexport type Transformer = (sourceFile: ts.SourceFile) => ts.SourceFile;\nexport type TransformerFactory = (context: ts.TransformationContext) => Transformer;\n\nexport function getDecoratorStripTransformerFactory(\n    coreDecorators: Set<StaticSymbol>, reflector: StaticReflector,\n    checker: ts.TypeChecker): TransformerFactory {\n  return function(context: ts.TransformationContext) {\n    return function(sourceFile: ts.SourceFile): ts.SourceFile {\n      const stripDecoratorsFromClassDeclaration =\n          (node: ts.ClassDeclaration): ts.ClassDeclaration => {\n            if (node.decorators === undefined) {\n              return node;\n            }\n            const decorators = node.decorators.filter(decorator => {\n              const callExpr = decorator.expression;\n              if (ts.isCallExpression(callExpr)) {\n                const id = callExpr.expression;\n                if (ts.isIdentifier(id)) {\n                  const symbol = resolveToStaticSymbol(id, sourceFile.fileName, reflector, checker);\n                  return symbol && coreDecorators.has(symbol);\n                }\n              }\n              return true;\n            });\n            if (decorators.length !== node.decorators.length) {\n              return ts.updateClassDeclaration(\n                  node, decorators, node.modifiers, node.name, node.typeParameters,\n                  node.heritageClauses || [], node.members, );\n            }\n            return node;\n          };\n\n      const stripDecoratorPropertyAssignment = (node: ts.ClassDeclaration): ts.ClassDeclaration => {\n        return ts.visitEachChild(node, member => {\n          if (!ts.isPropertyDeclaration(member) || !isDecoratorAssignment(member) ||\n              !member.initializer || !ts.isArrayLiteralExpression(member.initializer)) {\n            return member;\n          }\n\n          const newInitializer = ts.visitEachChild(member.initializer, decorator => {\n            if (!ts.isObjectLiteralExpression(decorator)) {\n              return decorator;\n            }\n            const type = lookupProperty(decorator, 'type');\n            if (!type || !ts.isIdentifier(type)) {\n              return decorator;\n            }\n            const symbol = resolveToStaticSymbol(type, sourceFile.fileName, reflector, checker);\n            if (!symbol || !coreDecorators.has(symbol)) {\n              return decorator;\n            }\n            return undefined;\n          }, context);\n\n          if (newInitializer === member.initializer) {\n            return member;\n          } else if (newInitializer.elements.length === 0) {\n            return undefined;\n          } else {\n            return ts.updateProperty(\n                member, member.decorators, member.modifiers, member.name, member.questionToken,\n                member.type, newInitializer);\n          }\n        }, context);\n      };\n\n      return ts.visitEachChild(sourceFile, stmt => {\n        if (ts.isClassDeclaration(stmt)) {\n          let decl = stmt;\n          if (stmt.decorators) {\n            decl = stripDecoratorsFromClassDeclaration(stmt);\n          }\n          return stripDecoratorPropertyAssignment(decl);\n        }\n        return stmt;\n      }, context);\n    };\n  };\n}\n\nfunction isDecoratorAssignment(member: ts.ClassElement): boolean {\n  if (!ts.isPropertyDeclaration(member)) {\n    return false;\n  }\n  if (!member.modifiers ||\n      !member.modifiers.some(mod => mod.kind === ts.SyntaxKind.StaticKeyword)) {\n    return false;\n  }\n  if (!ts.isIdentifier(member.name) || member.name.text !== 'decorators') {\n    return false;\n  }\n  if (!member.initializer || !ts.isArrayLiteralExpression(member.initializer)) {\n    return false;\n  }\n  return true;\n}\n\nfunction lookupProperty(expr: ts.ObjectLiteralExpression, prop: string): ts.Expression|undefined {\n  const decl = expr.properties.find(\n      elem => !!elem.name && ts.isIdentifier(elem.name) && elem.name.text === prop);\n  if (decl === undefined || !ts.isPropertyAssignment(decl)) {\n    return undefined;\n  }\n  return decl.initializer;\n}\n\nfunction resolveToStaticSymbol(\n    id: ts.Identifier, containingFile: string, reflector: StaticReflector,\n    checker: ts.TypeChecker): StaticSymbol|null {\n  const res = checker.getSymbolAtLocation(id);\n  if (!res || !res.declarations || res.declarations.length === 0) {\n    return null;\n  }\n  const decl = res.declarations[0];\n  if (!ts.isImportSpecifier(decl)) {\n    return null;\n  }\n  const moduleSpecifier = decl.parent !.parent !.parent !.moduleSpecifier;\n  if (!ts.isStringLiteral(moduleSpecifier)) {\n    return null;\n  }\n  return reflector.tryFindDeclaration(moduleSpecifier.text, id.text, containingFile);\n}\n\nexport class StripDecoratorsMetadataTransformer implements MetadataTransformer {\n  constructor(private coreDecorators: Set<StaticSymbol>, private reflector: StaticReflector) {}\n\n  start(sourceFile: ts.SourceFile): ValueTransform|undefined {\n    return (value: MetadataValue, node: ts.Node): MetadataValue => {\n      if (isClassMetadata(value) && ts.isClassDeclaration(node) && value.decorators) {\n        value.decorators = value.decorators.filter(d => {\n          if (isMetadataSymbolicCallExpression(d) &&\n              isMetadataImportedSymbolReferenceExpression(d.expression)) {\n            const declaration = this.reflector.tryFindDeclaration(\n                d.expression.module, d.expression.name, sourceFile.fileName);\n            if (declaration && this.coreDecorators.has(declaration)) {\n              return false;\n            }\n          }\n          return true;\n        });\n      }\n      return value;\n    };\n  }\n}\n"]}