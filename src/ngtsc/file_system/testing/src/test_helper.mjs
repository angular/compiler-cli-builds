/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/// <reference types="jasmine"/>
import * as ts from 'typescript';
import { absoluteFrom, setFileSystem } from '../../src/helpers';
import { InvalidFileSystem } from '../../src/invalid_file_system';
import { MockFileSystemNative } from './mock_file_system_native';
import { MockFileSystemPosix } from './mock_file_system_posix';
import { MockFileSystemWindows } from './mock_file_system_windows';
const FS_NATIVE = 'Native';
const FS_OS_X = 'OS/X';
const FS_UNIX = 'Unix';
const FS_WINDOWS = 'Windows';
const FS_ALL = [FS_OS_X, FS_WINDOWS, FS_UNIX, FS_NATIVE];
function runInEachFileSystemFn(callback) {
    FS_ALL.forEach(os => runInFileSystem(os, callback, false));
}
function runInFileSystem(os, callback, error) {
    describe(`<<FileSystem: ${os}>>`, () => {
        beforeEach(() => initMockFileSystem(os));
        afterEach(() => setFileSystem(new InvalidFileSystem()));
        callback(os);
        if (error) {
            afterAll(() => {
                throw new Error(`runInFileSystem limited to ${os}, cannot pass`);
            });
        }
    });
}
export const runInEachFileSystem = runInEachFileSystemFn;
runInEachFileSystem.native = (callback) => runInFileSystem(FS_NATIVE, callback, true);
runInEachFileSystem.osX = (callback) => runInFileSystem(FS_OS_X, callback, true);
runInEachFileSystem.unix = (callback) => runInFileSystem(FS_UNIX, callback, true);
runInEachFileSystem.windows = (callback) => runInFileSystem(FS_WINDOWS, callback, true);
export function initMockFileSystem(os, cwd) {
    const fs = createMockFileSystem(os, cwd);
    setFileSystem(fs);
    monkeyPatchTypeScript(os, fs);
    return fs;
}
function createMockFileSystem(os, cwd) {
    switch (os) {
        case 'OS/X':
            return new MockFileSystemPosix(/* isCaseSensitive */ false, cwd);
        case 'Unix':
            return new MockFileSystemPosix(/* isCaseSensitive */ true, cwd);
        case 'Windows':
            return new MockFileSystemWindows(/* isCaseSensitive*/ false, cwd);
        case 'Native':
            return new MockFileSystemNative(cwd);
        default:
            throw new Error('FileSystem not supported');
    }
}
function monkeyPatchTypeScript(os, fs) {
    ts.sys.directoryExists = path => {
        const absPath = fs.resolve(path);
        return fs.exists(absPath) && fs.stat(absPath).isDirectory();
    };
    ts.sys.fileExists = path => {
        const absPath = fs.resolve(path);
        return fs.exists(absPath) && fs.stat(absPath).isFile();
    };
    ts.sys.getCurrentDirectory = () => fs.pwd();
    ts.sys.getDirectories = getDirectories;
    ts.sys.readFile = fs.readFile.bind(fs);
    ts.sys.resolvePath = fs.resolve.bind(fs);
    ts.sys.writeFile = fs.writeFile.bind(fs);
    ts.sys.readDirectory = readDirectory;
    function getDirectories(path) {
        return fs.readdir(absoluteFrom(path)).filter(p => fs.stat(fs.resolve(path, p)).isDirectory());
    }
    function getFileSystemEntries(path) {
        const files = [];
        const directories = [];
        const absPath = fs.resolve(path);
        const entries = fs.readdir(absPath);
        for (const entry of entries) {
            if (entry == '.' || entry === '..') {
                continue;
            }
            const absPath = fs.resolve(path, entry);
            const stat = fs.stat(absPath);
            if (stat.isDirectory()) {
                directories.push(absPath);
            }
            else if (stat.isFile()) {
                files.push(absPath);
            }
        }
        return { files, directories };
    }
    function realPath(path) {
        return fs.realpath(fs.resolve(path));
    }
    // Rather than completely re-implementing we are using the `ts.matchFiles` function,
    // which is internal to the `ts` namespace.
    const tsMatchFiles = ts.matchFiles;
    function readDirectory(path, extensions, excludes, includes, depth) {
        return tsMatchFiles(path, extensions, excludes, includes, fs.isCaseSensitive(), fs.pwd(), depth, getFileSystemEntries, realPath);
    }
}
//# sourceMappingURL=data:application/json;base64,