/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/// <reference types="node" />
import * as fs from 'fs';
import * as p from 'path';
/**
 * A wrapper around the Node.js file-system that supports path manipulation.
 */
export class NodeJSPathManipulation {
    pwd() {
        return this.normalize(process.cwd());
    }
    chdir(dir) {
        process.chdir(dir);
    }
    resolve(...paths) {
        return this.normalize(p.resolve(...paths));
    }
    dirname(file) {
        return this.normalize(p.dirname(file));
    }
    join(basePath, ...paths) {
        return this.normalize(p.join(basePath, ...paths));
    }
    isRoot(path) {
        return this.dirname(path) === this.normalize(path);
    }
    isRooted(path) {
        return p.isAbsolute(path);
    }
    relative(from, to) {
        return this.normalize(p.relative(from, to));
    }
    basename(filePath, extension) {
        return p.basename(filePath, extension);
    }
    extname(path) {
        return p.extname(path);
    }
    normalize(path) {
        // Convert backslashes to forward slashes
        return path.replace(/\\/g, '/');
    }
}
/**
 * A wrapper around the Node.js file-system that supports readonly operations and path manipulation.
 */
export class NodeJSReadonlyFileSystem extends NodeJSPathManipulation {
    constructor() {
        super(...arguments);
        this._caseSensitive = undefined;
    }
    isCaseSensitive() {
        if (this._caseSensitive === undefined) {
            // Note the use of the real file-system is intentional:
            // `this.exists()` relies upon `isCaseSensitive()` so that would cause an infinite recursion.
            this._caseSensitive = !fs.existsSync(this.normalize(toggleCase(__filename)));
        }
        return this._caseSensitive;
    }
    exists(path) {
        return fs.existsSync(path);
    }
    readFile(path) {
        return fs.readFileSync(path, 'utf8');
    }
    readFileBuffer(path) {
        return fs.readFileSync(path);
    }
    readdir(path) {
        return fs.readdirSync(path);
    }
    lstat(path) {
        return fs.lstatSync(path);
    }
    stat(path) {
        return fs.statSync(path);
    }
    realpath(path) {
        return this.resolve(fs.realpathSync(path));
    }
    getDefaultLibLocation() {
        return this.resolve(require.resolve('typescript'), '..');
    }
}
/**
 * A wrapper around the Node.js file-system (i.e. the `fs` package).
 */
export class NodeJSFileSystem extends NodeJSReadonlyFileSystem {
    writeFile(path, data, exclusive = false) {
        fs.writeFileSync(path, data, exclusive ? { flag: 'wx' } : undefined);
    }
    removeFile(path) {
        fs.unlinkSync(path);
    }
    symlink(target, path) {
        fs.symlinkSync(target, path);
    }
    copyFile(from, to) {
        fs.copyFileSync(from, to);
    }
    moveFile(from, to) {
        fs.renameSync(from, to);
    }
    ensureDir(path) {
        const parents = [];
        while (!this.isRoot(path) && !this.exists(path)) {
            parents.push(path);
            path = this.dirname(path);
        }
        while (parents.length) {
            this.safeMkdir(parents.pop());
        }
    }
    removeDeep(path) {
        fs.rmdirSync(path, { recursive: true });
    }
    safeMkdir(path) {
        try {
            fs.mkdirSync(path);
        }
        catch (err) {
            // Ignore the error, if the path already exists and points to a directory.
            // Re-throw otherwise.
            if (!this.exists(path) || !this.stat(path).isDirectory()) {
                throw err;
            }
        }
    }
}
/**
 * Toggle the case of each character in a string.
 */
function toggleCase(str) {
    return str.replace(/\w/g, ch => ch.toUpperCase() === ch ? ch.toLowerCase() : ch.toUpperCase());
}
//# sourceMappingURL=data:application/json;base64,