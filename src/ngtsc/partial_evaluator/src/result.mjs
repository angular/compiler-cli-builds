/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A collection of publicly exported declarations from a module. Each declaration is evaluated
 * lazily upon request.
 */
export class ResolvedModule {
    constructor(exports, evaluate) {
        this.exports = exports;
        this.evaluate = evaluate;
    }
    getExport(name) {
        if (!this.exports.has(name)) {
            return undefined;
        }
        return this.evaluate(this.exports.get(name));
    }
    getExports() {
        const map = new Map();
        this.exports.forEach((decl, name) => {
            map.set(name, this.evaluate(decl));
        });
        return map;
    }
}
/**
 * A value member of an enumeration.
 *
 * Contains a `Reference` to the enumeration itself, and the name of the referenced member.
 */
export class EnumValue {
    constructor(enumRef, name, resolved) {
        this.enumRef = enumRef;
        this.name = name;
        this.resolved = resolved;
    }
}
/**
 * An implementation of a known function that can be statically evaluated.
 * It could be a built-in function or method (such as `Array.prototype.slice`) or a TypeScript
 * helper (such as `__spread`).
 */
export class KnownFn {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdWx0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tcGlsZXItY2xpL3NyYy9uZ3RzYy9wYXJ0aWFsX2V2YWx1YXRvci9zcmMvcmVzdWx0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQW9DSDs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sY0FBYztJQUN6QixZQUNZLE9BQWlDLEVBQ2pDLFFBQThDO1FBRDlDLFlBQU8sR0FBUCxPQUFPLENBQTBCO1FBQ2pDLGFBQVEsR0FBUixRQUFRLENBQXNDO0lBQUcsQ0FBQztJQUU5RCxTQUFTLENBQUMsSUFBWTtRQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDM0IsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFFRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFFLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsVUFBVTtRQUNSLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxFQUF5QixDQUFDO1FBQzdDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO1lBQ2xDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztDQUNGO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sT0FBTyxTQUFTO0lBQ3BCLFlBQ2EsT0FBa0MsRUFBVyxJQUFZLEVBQ3pELFFBQXVCO1FBRHZCLFlBQU8sR0FBUCxPQUFPLENBQTJCO1FBQVcsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUN6RCxhQUFRLEdBQVIsUUFBUSxDQUFlO0lBQUcsQ0FBQztDQUN6QztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLE9BQWdCLE9BQU87Q0FFNUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0ICogYXMgdHMgZnJvbSAndHlwZXNjcmlwdCc7XG5cbmltcG9ydCB7UmVmZXJlbmNlfSBmcm9tICcuLi8uLi9pbXBvcnRzJztcbmltcG9ydCB7RGVjbGFyYXRpb259IGZyb20gJy4uLy4uL3JlZmxlY3Rpb24nO1xuXG5pbXBvcnQge0R5bmFtaWNWYWx1ZX0gZnJvbSAnLi9keW5hbWljJztcblxuXG4vKipcbiAqIEEgdmFsdWUgcmVzdWx0aW5nIGZyb20gc3RhdGljIHJlc29sdXRpb24uXG4gKlxuICogVGhpcyBjb3VsZCBiZSBhIHByaW1pdGl2ZSwgY29sbGVjdGlvbiB0eXBlLCByZWZlcmVuY2UgdG8gYSBgdHMuTm9kZWAgdGhhdCBkZWNsYXJlcyBhXG4gKiBub24tcHJpbWl0aXZlIHZhbHVlLCBvciBhIHNwZWNpYWwgYER5bmFtaWNWYWx1ZWAgdHlwZSB3aGljaCBpbmRpY2F0ZXMgdGhlIHZhbHVlIHdhcyBub3RcbiAqIGF2YWlsYWJsZSBzdGF0aWNhbGx5LlxuICovXG5leHBvcnQgdHlwZSBSZXNvbHZlZFZhbHVlID0gbnVtYmVyfGJvb2xlYW58c3RyaW5nfG51bGx8dW5kZWZpbmVkfFJlZmVyZW5jZXxFbnVtVmFsdWV8XG4gICAgUmVzb2x2ZWRWYWx1ZUFycmF5fFJlc29sdmVkVmFsdWVNYXB8UmVzb2x2ZWRNb2R1bGV8S25vd25GbnxEeW5hbWljVmFsdWU8dW5rbm93bj47XG5cbi8qKlxuICogQW4gYXJyYXkgb2YgYFJlc29sdmVkVmFsdWVgcy5cbiAqXG4gKiBUaGlzIGlzIGEgcmVpZmllZCB0eXBlIHRvIGFsbG93IHRoZSBjaXJjdWxhciByZWZlcmVuY2Ugb2YgYFJlc29sdmVkVmFsdWVgIC0+IGBSZXNvbHZlZFZhbHVlQXJyYXlgXG4gKiAtPiBgUmVzb2x2ZWRWYWx1ZWAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzb2x2ZWRWYWx1ZUFycmF5IGV4dGVuZHMgQXJyYXk8UmVzb2x2ZWRWYWx1ZT4ge31cblxuLyoqXG4gKiBBIG1hcCBvZiBzdHJpbmdzIHRvIGBSZXNvbHZlZFZhbHVlYHMuXG4gKlxuICogVGhpcyBpcyBhIHJlaWZpZWQgdHlwZSB0byBhbGxvdyB0aGUgY2lyY3VsYXIgcmVmZXJlbmNlIG9mIGBSZXNvbHZlZFZhbHVlYCAtPiBgUmVzb2x2ZWRWYWx1ZU1hcGBcbiAqIC0+IGBSZXNvbHZlZFZhbHVlYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNvbHZlZFZhbHVlTWFwIGV4dGVuZHMgTWFwPHN0cmluZywgUmVzb2x2ZWRWYWx1ZT4ge31cblxuLyoqXG4gKiBBIGNvbGxlY3Rpb24gb2YgcHVibGljbHkgZXhwb3J0ZWQgZGVjbGFyYXRpb25zIGZyb20gYSBtb2R1bGUuIEVhY2ggZGVjbGFyYXRpb24gaXMgZXZhbHVhdGVkXG4gKiBsYXppbHkgdXBvbiByZXF1ZXN0LlxuICovXG5leHBvcnQgY2xhc3MgUmVzb2x2ZWRNb2R1bGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICAgIHByaXZhdGUgZXhwb3J0czogTWFwPHN0cmluZywgRGVjbGFyYXRpb24+LFxuICAgICAgcHJpdmF0ZSBldmFsdWF0ZTogKGRlY2w6IERlY2xhcmF0aW9uKSA9PiBSZXNvbHZlZFZhbHVlKSB7fVxuXG4gIGdldEV4cG9ydChuYW1lOiBzdHJpbmcpOiBSZXNvbHZlZFZhbHVlIHtcbiAgICBpZiAoIXRoaXMuZXhwb3J0cy5oYXMobmFtZSkpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZXZhbHVhdGUodGhpcy5leHBvcnRzLmdldChuYW1lKSEpO1xuICB9XG5cbiAgZ2V0RXhwb3J0cygpOiBSZXNvbHZlZFZhbHVlTWFwIHtcbiAgICBjb25zdCBtYXAgPSBuZXcgTWFwPHN0cmluZywgUmVzb2x2ZWRWYWx1ZT4oKTtcbiAgICB0aGlzLmV4cG9ydHMuZm9yRWFjaCgoZGVjbCwgbmFtZSkgPT4ge1xuICAgICAgbWFwLnNldChuYW1lLCB0aGlzLmV2YWx1YXRlKGRlY2wpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbWFwO1xuICB9XG59XG5cbi8qKlxuICogQSB2YWx1ZSBtZW1iZXIgb2YgYW4gZW51bWVyYXRpb24uXG4gKlxuICogQ29udGFpbnMgYSBgUmVmZXJlbmNlYCB0byB0aGUgZW51bWVyYXRpb24gaXRzZWxmLCBhbmQgdGhlIG5hbWUgb2YgdGhlIHJlZmVyZW5jZWQgbWVtYmVyLlxuICovXG5leHBvcnQgY2xhc3MgRW51bVZhbHVlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgICByZWFkb25seSBlbnVtUmVmOiBSZWZlcmVuY2U8dHMuRGVjbGFyYXRpb24+LCByZWFkb25seSBuYW1lOiBzdHJpbmcsXG4gICAgICByZWFkb25seSByZXNvbHZlZDogUmVzb2x2ZWRWYWx1ZSkge31cbn1cblxuLyoqXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiBhIGtub3duIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHN0YXRpY2FsbHkgZXZhbHVhdGVkLlxuICogSXQgY291bGQgYmUgYSBidWlsdC1pbiBmdW5jdGlvbiBvciBtZXRob2QgKHN1Y2ggYXMgYEFycmF5LnByb3RvdHlwZS5zbGljZWApIG9yIGEgVHlwZVNjcmlwdFxuICogaGVscGVyIChzdWNoIGFzIGBfX3NwcmVhZGApLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgS25vd25GbiB7XG4gIGFic3RyYWN0IGV2YWx1YXRlKG5vZGU6IHRzLkNhbGxFeHByZXNzaW9uLCBhcmdzOiBSZXNvbHZlZFZhbHVlQXJyYXkpOiBSZXNvbHZlZFZhbHVlO1xufVxuIl19