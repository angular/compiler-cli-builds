/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Represents a value which cannot be determined statically.
 */
export class DynamicValue {
    constructor(node, reason, code) {
        this.node = node;
        this.reason = reason;
        this.code = code;
    }
    static fromDynamicInput(node, input) {
        return new DynamicValue(node, input, 0 /* DYNAMIC_INPUT */);
    }
    static fromDynamicString(node) {
        return new DynamicValue(node, undefined, 1 /* DYNAMIC_STRING */);
    }
    static fromExternalReference(node, ref) {
        return new DynamicValue(node, ref, 2 /* EXTERNAL_REFERENCE */);
    }
    static fromUnsupportedSyntax(node) {
        return new DynamicValue(node, undefined, 3 /* UNSUPPORTED_SYNTAX */);
    }
    static fromUnknownIdentifier(node) {
        return new DynamicValue(node, undefined, 4 /* UNKNOWN_IDENTIFIER */);
    }
    static fromInvalidExpressionType(node, value) {
        return new DynamicValue(node, value, 5 /* INVALID_EXPRESSION_TYPE */);
    }
    static fromComplexFunctionCall(node, fn) {
        return new DynamicValue(node, fn, 6 /* COMPLEX_FUNCTION_CALL */);
    }
    static fromDynamicType(node) {
        return new DynamicValue(node, undefined, 7 /* DYNAMIC_TYPE */);
    }
    static fromUnknown(node) {
        return new DynamicValue(node, undefined, 8 /* UNKNOWN */);
    }
    isFromDynamicInput() {
        return this.code === 0 /* DYNAMIC_INPUT */;
    }
    isFromDynamicString() {
        return this.code === 1 /* DYNAMIC_STRING */;
    }
    isFromExternalReference() {
        return this.code === 2 /* EXTERNAL_REFERENCE */;
    }
    isFromUnsupportedSyntax() {
        return this.code === 3 /* UNSUPPORTED_SYNTAX */;
    }
    isFromUnknownIdentifier() {
        return this.code === 4 /* UNKNOWN_IDENTIFIER */;
    }
    isFromInvalidExpressionType() {
        return this.code === 5 /* INVALID_EXPRESSION_TYPE */;
    }
    isFromComplexFunctionCall() {
        return this.code === 6 /* COMPLEX_FUNCTION_CALL */;
    }
    isFromDynamicType() {
        return this.code === 7 /* DYNAMIC_TYPE */;
    }
    isFromUnknown() {
        return this.code === 8 /* UNKNOWN */;
    }
    accept(visitor) {
        switch (this.code) {
            case 0 /* DYNAMIC_INPUT */:
                return visitor.visitDynamicInput(this);
            case 1 /* DYNAMIC_STRING */:
                return visitor.visitDynamicString(this);
            case 2 /* EXTERNAL_REFERENCE */:
                return visitor.visitExternalReference(this);
            case 3 /* UNSUPPORTED_SYNTAX */:
                return visitor.visitUnsupportedSyntax(this);
            case 4 /* UNKNOWN_IDENTIFIER */:
                return visitor.visitUnknownIdentifier(this);
            case 5 /* INVALID_EXPRESSION_TYPE */:
                return visitor.visitInvalidExpressionType(this);
            case 6 /* COMPLEX_FUNCTION_CALL */:
                return visitor.visitComplexFunctionCall(this);
            case 7 /* DYNAMIC_TYPE */:
                return visitor.visitDynamicType(this);
            case 8 /* UNKNOWN */:
                return visitor.visitUnknown(this);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,