/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { KnownDeclaration } from '../../reflection/src/host';
import { ObjectAssignBuiltinFn } from './builtin';
import { AssignHelperFn, ReadHelperFn, SpreadArrayHelperFn, SpreadHelperFn } from './ts_helpers';
/** Resolved value for the JavaScript global `Object` declaration. */
export const jsGlobalObjectValue = new Map([['assign', new ObjectAssignBuiltinFn()]]);
/** Resolved value for the `__assign()` TypeScript helper declaration. */
const assignTsHelperFn = new AssignHelperFn();
/** Resolved value for the `__spread()` and `__spreadArrays()` TypeScript helper declarations. */
const spreadTsHelperFn = new SpreadHelperFn();
/** Resolved value for the `__spreadArray()` TypeScript helper declarations. */
const spreadArrayTsHelperFn = new SpreadArrayHelperFn();
/** Resolved value for the `__read()` TypeScript helper declarations. */
const readTsHelperFn = new ReadHelperFn();
/**
 * Resolves the specified known declaration to a resolved value. For example,
 * the known JavaScript global `Object` will resolve to a `Map` that provides the
 * `assign` method with a built-in function. This enables evaluation of `Object.assign`.
 */
export function resolveKnownDeclaration(decl) {
    switch (decl) {
        case KnownDeclaration.JsGlobalObject:
            return jsGlobalObjectValue;
        case KnownDeclaration.TsHelperAssign:
            return assignTsHelperFn;
        case KnownDeclaration.TsHelperSpread:
        case KnownDeclaration.TsHelperSpreadArrays:
            return spreadTsHelperFn;
        case KnownDeclaration.TsHelperSpreadArray:
            return spreadArrayTsHelperFn;
        case KnownDeclaration.TsHelperRead:
            return readTsHelperFn;
        default:
            throw new Error(`Cannot resolve known declaration. Received: ${KnownDeclaration[decl]}.`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia25vd25fZGVjbGFyYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb21waWxlci1jbGkvc3JjL25ndHNjL3BhcnRpYWxfZXZhbHVhdG9yL3NyYy9rbm93bl9kZWNsYXJhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUUzRCxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFFaEQsT0FBTyxFQUFDLGNBQWMsRUFBRSxZQUFZLEVBQUUsbUJBQW1CLEVBQUUsY0FBYyxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBRS9GLHFFQUFxRTtBQUNyRSxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLElBQUkscUJBQXFCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUV0Rix5RUFBeUU7QUFDekUsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO0FBRTlDLGlHQUFpRztBQUNqRyxNQUFNLGdCQUFnQixHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7QUFFOUMsK0VBQStFO0FBQy9FLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxtQkFBbUIsRUFBRSxDQUFDO0FBRXhELHdFQUF3RTtBQUN4RSxNQUFNLGNBQWMsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0FBRTFDOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsdUJBQXVCLENBQUMsSUFBc0I7SUFDNUQsUUFBUSxJQUFJLEVBQUU7UUFDWixLQUFLLGdCQUFnQixDQUFDLGNBQWM7WUFDbEMsT0FBTyxtQkFBbUIsQ0FBQztRQUM3QixLQUFLLGdCQUFnQixDQUFDLGNBQWM7WUFDbEMsT0FBTyxnQkFBZ0IsQ0FBQztRQUMxQixLQUFLLGdCQUFnQixDQUFDLGNBQWMsQ0FBQztRQUNyQyxLQUFLLGdCQUFnQixDQUFDLG9CQUFvQjtZQUN4QyxPQUFPLGdCQUFnQixDQUFDO1FBQzFCLEtBQUssZ0JBQWdCLENBQUMsbUJBQW1CO1lBQ3ZDLE9BQU8scUJBQXFCLENBQUM7UUFDL0IsS0FBSyxnQkFBZ0IsQ0FBQyxZQUFZO1lBQ2hDLE9BQU8sY0FBYyxDQUFDO1FBQ3hCO1lBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzdGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0tub3duRGVjbGFyYXRpb259IGZyb20gJy4uLy4uL3JlZmxlY3Rpb24vc3JjL2hvc3QnO1xuXG5pbXBvcnQge09iamVjdEFzc2lnbkJ1aWx0aW5Gbn0gZnJvbSAnLi9idWlsdGluJztcbmltcG9ydCB7UmVzb2x2ZWRWYWx1ZX0gZnJvbSAnLi9yZXN1bHQnO1xuaW1wb3J0IHtBc3NpZ25IZWxwZXJGbiwgUmVhZEhlbHBlckZuLCBTcHJlYWRBcnJheUhlbHBlckZuLCBTcHJlYWRIZWxwZXJGbn0gZnJvbSAnLi90c19oZWxwZXJzJztcblxuLyoqIFJlc29sdmVkIHZhbHVlIGZvciB0aGUgSmF2YVNjcmlwdCBnbG9iYWwgYE9iamVjdGAgZGVjbGFyYXRpb24uICovXG5leHBvcnQgY29uc3QganNHbG9iYWxPYmplY3RWYWx1ZSA9IG5ldyBNYXAoW1snYXNzaWduJywgbmV3IE9iamVjdEFzc2lnbkJ1aWx0aW5GbigpXV0pO1xuXG4vKiogUmVzb2x2ZWQgdmFsdWUgZm9yIHRoZSBgX19hc3NpZ24oKWAgVHlwZVNjcmlwdCBoZWxwZXIgZGVjbGFyYXRpb24uICovXG5jb25zdCBhc3NpZ25Uc0hlbHBlckZuID0gbmV3IEFzc2lnbkhlbHBlckZuKCk7XG5cbi8qKiBSZXNvbHZlZCB2YWx1ZSBmb3IgdGhlIGBfX3NwcmVhZCgpYCBhbmQgYF9fc3ByZWFkQXJyYXlzKClgIFR5cGVTY3JpcHQgaGVscGVyIGRlY2xhcmF0aW9ucy4gKi9cbmNvbnN0IHNwcmVhZFRzSGVscGVyRm4gPSBuZXcgU3ByZWFkSGVscGVyRm4oKTtcblxuLyoqIFJlc29sdmVkIHZhbHVlIGZvciB0aGUgYF9fc3ByZWFkQXJyYXkoKWAgVHlwZVNjcmlwdCBoZWxwZXIgZGVjbGFyYXRpb25zLiAqL1xuY29uc3Qgc3ByZWFkQXJyYXlUc0hlbHBlckZuID0gbmV3IFNwcmVhZEFycmF5SGVscGVyRm4oKTtcblxuLyoqIFJlc29sdmVkIHZhbHVlIGZvciB0aGUgYF9fcmVhZCgpYCBUeXBlU2NyaXB0IGhlbHBlciBkZWNsYXJhdGlvbnMuICovXG5jb25zdCByZWFkVHNIZWxwZXJGbiA9IG5ldyBSZWFkSGVscGVyRm4oKTtcblxuLyoqXG4gKiBSZXNvbHZlcyB0aGUgc3BlY2lmaWVkIGtub3duIGRlY2xhcmF0aW9uIHRvIGEgcmVzb2x2ZWQgdmFsdWUuIEZvciBleGFtcGxlLFxuICogdGhlIGtub3duIEphdmFTY3JpcHQgZ2xvYmFsIGBPYmplY3RgIHdpbGwgcmVzb2x2ZSB0byBhIGBNYXBgIHRoYXQgcHJvdmlkZXMgdGhlXG4gKiBgYXNzaWduYCBtZXRob2Qgd2l0aCBhIGJ1aWx0LWluIGZ1bmN0aW9uLiBUaGlzIGVuYWJsZXMgZXZhbHVhdGlvbiBvZiBgT2JqZWN0LmFzc2lnbmAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlS25vd25EZWNsYXJhdGlvbihkZWNsOiBLbm93bkRlY2xhcmF0aW9uKTogUmVzb2x2ZWRWYWx1ZSB7XG4gIHN3aXRjaCAoZGVjbCkge1xuICAgIGNhc2UgS25vd25EZWNsYXJhdGlvbi5Kc0dsb2JhbE9iamVjdDpcbiAgICAgIHJldHVybiBqc0dsb2JhbE9iamVjdFZhbHVlO1xuICAgIGNhc2UgS25vd25EZWNsYXJhdGlvbi5Uc0hlbHBlckFzc2lnbjpcbiAgICAgIHJldHVybiBhc3NpZ25Uc0hlbHBlckZuO1xuICAgIGNhc2UgS25vd25EZWNsYXJhdGlvbi5Uc0hlbHBlclNwcmVhZDpcbiAgICBjYXNlIEtub3duRGVjbGFyYXRpb24uVHNIZWxwZXJTcHJlYWRBcnJheXM6XG4gICAgICByZXR1cm4gc3ByZWFkVHNIZWxwZXJGbjtcbiAgICBjYXNlIEtub3duRGVjbGFyYXRpb24uVHNIZWxwZXJTcHJlYWRBcnJheTpcbiAgICAgIHJldHVybiBzcHJlYWRBcnJheVRzSGVscGVyRm47XG4gICAgY2FzZSBLbm93bkRlY2xhcmF0aW9uLlRzSGVscGVyUmVhZDpcbiAgICAgIHJldHVybiByZWFkVHNIZWxwZXJGbjtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgcmVzb2x2ZSBrbm93biBkZWNsYXJhdGlvbi4gUmVjZWl2ZWQ6ICR7S25vd25EZWNsYXJhdGlvbltkZWNsXX0uYCk7XG4gIH1cbn1cbiJdfQ==