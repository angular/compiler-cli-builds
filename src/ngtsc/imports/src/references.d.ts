/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/// <amd-module name="@angular/compiler-cli/src/ngtsc/imports/src/references" />
import { Expression } from '@angular/compiler';
import * as ts from 'typescript';
export declare enum ImportMode {
    UseExistingImport = 0,
    ForceNewImport = 1
}
/**
 * A reference to a `ts.Node`.
 *
 * For example, if an expression evaluates to a function or class definition, it will be returned
 * as a `Reference` (assuming references are allowed in evaluation).
 */
export declare abstract class Reference<T extends ts.Node = ts.Node> {
    readonly node: T;
    constructor(node: T);
    /**
     * Whether an `Expression` can be generated which references the node.
     */
    readonly expressable: boolean;
    /**
     * Generate an `Expression` representing this type, in the context of the given SourceFile.
     *
     * This could be a local variable reference, if the symbol is imported, or it could be a new
     * import if needed.
     */
    abstract toExpression(context: ts.SourceFile, importMode?: ImportMode): Expression | null;
    abstract addIdentifier(identifier: ts.Identifier): void;
}
/**
 * A reference to a node only, without any ability to get an `Expression` representing that node.
 *
 * This is used for returning references to things like method declarations, which are not directly
 * referenceable.
 */
export declare class NodeReference<T extends ts.Node = ts.Node> extends Reference<T> {
    readonly moduleName: string | null;
    constructor(node: T, moduleName: string | null);
    toExpression(context: ts.SourceFile): null;
    addIdentifier(identifier: ts.Identifier): void;
}
/**
 * A reference to a node which has a `ts.Identifier` and can be resolved to an `Expression`.
 *
 * Imports generated by `ResolvedReference`s are always relative.
 */
export declare class ResolvedReference<T extends ts.Node = ts.Node> extends Reference<T> {
    protected primaryIdentifier: ts.Identifier;
    protected identifiers: ts.Identifier[];
    constructor(node: T, primaryIdentifier: ts.Identifier);
    readonly expressable = true;
    toExpression(context: ts.SourceFile, importMode?: ImportMode): Expression;
    addIdentifier(identifier: ts.Identifier): void;
}
/**
 * A reference to a node which has a `ts.Identifer` and an expected absolute module name.
 *
 * An `AbsoluteReference` can be resolved to an `Expression`, and if that expression is an import
 * the module specifier will be an absolute module name, not a relative path.
 */
export declare class AbsoluteReference<T extends ts.Node> extends Reference<T> {
    private primaryIdentifier;
    readonly moduleName: string;
    readonly symbolName: string;
    private identifiers;
    constructor(node: T, primaryIdentifier: ts.Identifier, moduleName: string, symbolName: string);
    readonly expressable = true;
    toExpression(context: ts.SourceFile, importMode?: ImportMode): Expression;
    addIdentifier(identifier: ts.Identifier): void;
}
