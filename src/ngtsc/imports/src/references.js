/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@angular/compiler-cli/src/ngtsc/imports/src/references", ["require", "exports", "tslib", "@angular/compiler", "path", "typescript"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    /// <reference types="node" />
    var compiler_1 = require("@angular/compiler");
    var path = require("path");
    var ts = require("typescript");
    var TS_DTS_JS_EXTENSION = /(?:\.d)?\.ts$|\.js$/;
    var ImportMode;
    (function (ImportMode) {
        ImportMode[ImportMode["UseExistingImport"] = 0] = "UseExistingImport";
        ImportMode[ImportMode["ForceNewImport"] = 1] = "ForceNewImport";
    })(ImportMode = exports.ImportMode || (exports.ImportMode = {}));
    /**
     * A reference to a `ts.Node`.
     *
     * For example, if an expression evaluates to a function or class definition, it will be returned
     * as a `Reference` (assuming references are allowed in evaluation).
     */
    var Reference = /** @class */ (function () {
        function Reference(node) {
            this.node = node;
        }
        return Reference;
    }());
    exports.Reference = Reference;
    /**
     * A reference to a node only, without any ability to get an `Expression` representing that node.
     *
     * This is used for returning references to things like method declarations, which are not directly
     * referenceable.
     */
    var NodeReference = /** @class */ (function (_super) {
        tslib_1.__extends(NodeReference, _super);
        function NodeReference(node, moduleName) {
            var _this = _super.call(this, node) || this;
            _this.moduleName = moduleName;
            return _this;
        }
        NodeReference.prototype.toExpression = function (context) { return null; };
        NodeReference.prototype.addIdentifier = function (identifier) { };
        return NodeReference;
    }(Reference));
    exports.NodeReference = NodeReference;
    /**
     * A reference to a node which has a `ts.Identifier` and can be resolved to an `Expression`.
     *
     * Imports generated by `ResolvedReference`s are always relative.
     */
    var ResolvedReference = /** @class */ (function (_super) {
        tslib_1.__extends(ResolvedReference, _super);
        function ResolvedReference(node, primaryIdentifier) {
            var _this = _super.call(this, node) || this;
            _this.primaryIdentifier = primaryIdentifier;
            _this.identifiers = [];
            _this.expressable = true;
            return _this;
        }
        ResolvedReference.prototype.toExpression = function (context, importMode) {
            if (importMode === void 0) { importMode = ImportMode.UseExistingImport; }
            var localIdentifier = pickIdentifier(context, this.primaryIdentifier, this.identifiers, importMode);
            if (localIdentifier !== null) {
                return new compiler_1.WrappedNodeExpr(localIdentifier);
            }
            else {
                // Relative import from context -> this.node.getSourceFile().
                // TODO(alxhub): investigate the impact of multiple source roots here.
                // TODO(alxhub): investigate the need to map such paths via the Host for proper g3 support.
                var relative = path.posix.relative(path.dirname(context.fileName), this.node.getSourceFile().fileName)
                    .replace(TS_DTS_JS_EXTENSION, '');
                // path.relative() does not include the leading './'.
                if (!relative.startsWith('.')) {
                    relative = "./" + relative;
                }
                // path.relative() returns the empty string (converted to './' above) if the two paths are the
                // same.
                if (relative === './') {
                    // Same file after all.
                    return new compiler_1.WrappedNodeExpr(this.primaryIdentifier);
                }
                else {
                    return new compiler_1.ExternalExpr(new compiler_1.ExternalReference(relative, this.primaryIdentifier.text));
                }
            }
        };
        ResolvedReference.prototype.addIdentifier = function (identifier) { this.identifiers.push(identifier); };
        return ResolvedReference;
    }(Reference));
    exports.ResolvedReference = ResolvedReference;
    /**
     * A reference to a node which has a `ts.Identifer` and an expected absolute module name.
     *
     * An `AbsoluteReference` can be resolved to an `Expression`, and if that expression is an import
     * the module specifier will be an absolute module name, not a relative path.
     */
    var AbsoluteReference = /** @class */ (function (_super) {
        tslib_1.__extends(AbsoluteReference, _super);
        function AbsoluteReference(node, primaryIdentifier, moduleName, symbolName) {
            var _this = _super.call(this, node) || this;
            _this.primaryIdentifier = primaryIdentifier;
            _this.moduleName = moduleName;
            _this.symbolName = symbolName;
            _this.identifiers = [];
            _this.expressable = true;
            return _this;
        }
        AbsoluteReference.prototype.toExpression = function (context, importMode) {
            if (importMode === void 0) { importMode = ImportMode.UseExistingImport; }
            var localIdentifier = pickIdentifier(context, this.primaryIdentifier, this.identifiers, importMode);
            if (localIdentifier !== null) {
                return new compiler_1.WrappedNodeExpr(localIdentifier);
            }
            else {
                return new compiler_1.ExternalExpr(new compiler_1.ExternalReference(this.moduleName, this.symbolName));
            }
        };
        AbsoluteReference.prototype.addIdentifier = function (identifier) { this.identifiers.push(identifier); };
        return AbsoluteReference;
    }(Reference));
    exports.AbsoluteReference = AbsoluteReference;
    function pickIdentifier(context, primary, secondaries, mode) {
        context = ts.getOriginalNode(context);
        if (ts.getOriginalNode(primary).getSourceFile() === context) {
            return primary;
        }
        else if (mode === ImportMode.UseExistingImport) {
            return secondaries.find(function (id) { return ts.getOriginalNode(id).getSourceFile() === context; }) || null;
        }
        else {
            return null;
        }
    }
});
//# sourceMappingURL=data:application/json;base64,