/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@angular/compiler-cli/src/ngtsc/typecheck/api/checker", ["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OptimizeFor = void 0;
    /**
     * Describes the scope of the caller's interest in template type-checking results.
     */
    var OptimizeFor;
    (function (OptimizeFor) {
        /**
         * Indicates that a consumer of a `TemplateTypeChecker` is only interested in results for a given
         * file, and wants them as fast as possible.
         *
         * Calling `TemplateTypeChecker` methods successively for multiple files while specifying
         * `OptimizeFor.SingleFile` can result in significant unnecessary overhead overall.
         */
        OptimizeFor[OptimizeFor["SingleFile"] = 0] = "SingleFile";
        /**
         * Indicates that a consumer of a `TemplateTypeChecker` intends to query for results pertaining to
         * the entire user program, and so the type-checker should internally optimize for this case.
         *
         * Initial calls to retrieve type-checking information may take longer, but repeated calls to
         * gather information for the whole user program will be significantly faster with this mode of
         * optimization.
         */
        OptimizeFor[OptimizeFor["WholeProgram"] = 1] = "WholeProgram";
    })(OptimizeFor = exports.OptimizeFor || (exports.OptimizeFor = {}));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvbXBpbGVyLWNsaS9zcmMvbmd0c2MvdHlwZWNoZWNrL2FwaS9jaGVja2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRzs7Ozs7Ozs7Ozs7OztJQW1HSDs7T0FFRztJQUNILElBQVksV0FtQlg7SUFuQkQsV0FBWSxXQUFXO1FBQ3JCOzs7Ozs7V0FNRztRQUNILHlEQUFVLENBQUE7UUFFVjs7Ozs7OztXQU9HO1FBQ0gsNkRBQVksQ0FBQTtJQUNkLENBQUMsRUFuQlcsV0FBVyxHQUFYLG1CQUFXLEtBQVgsbUJBQVcsUUFtQnRCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7QVNULCBQYXJzZUVycm9yLCBUbXBsQXN0Tm9kZSwgVG1wbEFzdFRlbXBsYXRlfSBmcm9tICdAYW5ndWxhci9jb21waWxlcic7XG5pbXBvcnQgKiBhcyB0cyBmcm9tICd0eXBlc2NyaXB0JztcblxuaW1wb3J0IHtHbG9iYWxDb21wbGV0aW9ufSBmcm9tICcuL2NvbXBsZXRpb24nO1xuaW1wb3J0IHtTeW1ib2x9IGZyb20gJy4vc3ltYm9scyc7XG5cbi8qKlxuICogSW50ZXJmYWNlIHRvIHRoZSBBbmd1bGFyIFRlbXBsYXRlIFR5cGUgQ2hlY2tlciB0byBleHRyYWN0IGRpYWdub3N0aWNzIGFuZCBpbnRlbGxpZ2VuY2UgZnJvbSB0aGVcbiAqIGNvbXBpbGVyJ3MgdW5kZXJzdGFuZGluZyBvZiBjb21wb25lbnQgdGVtcGxhdGVzLlxuICpcbiAqIFRoaXMgaW50ZXJmYWNlIGlzIGFuYWxvZ291cyB0byBUeXBlU2NyaXB0J3Mgb3duIGB0cy5UeXBlQ2hlY2tlcmAgQVBJLlxuICpcbiAqIEluIGdlbmVyYWwsIHRoaXMgaW50ZXJmYWNlIHN1cHBvcnRzIHR3byBraW5kcyBvZiBvcGVyYXRpb25zOlxuICogIC0gdXBkYXRpbmcgVHlwZSBDaGVjayBCbG9ja3MgKFRDQilzIHRoYXQgY2FwdHVyZSB0aGUgdGVtcGxhdGUgaW4gdGhlIGZvcm0gb2YgVHlwZVNjcmlwdCBjb2RlXG4gKiAgLSBxdWVyeWluZyBpbmZvcm1hdGlvbiBhYm91dCBhdmFpbGFibGUgVENCcywgaW5jbHVkaW5nIGRpYWdub3N0aWNzXG4gKlxuICogT25jZSBhIFRDQiBpcyBhdmFpbGFibGUsIGluZm9ybWF0aW9uIGFib3V0IGl0IGNhbiBiZSBxdWVyaWVkLiBJZiBubyBUQ0IgaXMgYXZhaWxhYmxlIHRvIGFuc3dlciBhXG4gKiBxdWVyeSwgZGVwZW5kaW5nIG9uIHRoZSBtZXRob2QgZWl0aGVyIGBudWxsYCB3aWxsIGJlIHJldHVybmVkIG9yIGFuIGVycm9yIHdpbGwgYmUgdGhyb3duLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRlbXBsYXRlVHlwZUNoZWNrZXIge1xuICAvKipcbiAgICogQ2xlYXIgYWxsIG92ZXJyaWRlcyBhbmQgcmV0dXJuIHRoZSB0ZW1wbGF0ZSB0eXBlLWNoZWNrZXIgdG8gdGhlIG9yaWdpbmFsIGlucHV0IHByb2dyYW0gc3RhdGUuXG4gICAqL1xuICByZXNldE92ZXJyaWRlcygpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSB0aGUgdGVtcGxhdGUgaW4gdXNlIGZvciB0aGUgZ2l2ZW4gY29tcG9uZW50LlxuICAgKlxuICAgKiBJZiB0aGUgdGVtcGxhdGUgaGFzIGJlZW4gb3ZlcnJpZGRlbiB2aWEgYG92ZXJyaWRlQ29tcG9uZW50VGVtcGxhdGVgLCB0aGlzIHdpbGwgcmV0cmlldmUgdGhlXG4gICAqIG92ZXJyaWRkZW4gdGVtcGxhdGUgbm9kZXMuXG4gICAqL1xuICBnZXRUZW1wbGF0ZShjb21wb25lbnQ6IHRzLkNsYXNzRGVjbGFyYXRpb24pOiBUbXBsQXN0Tm9kZVtdfG51bGw7XG5cbiAgLyoqXG4gICAqIFByb3ZpZGUgYSBuZXcgdGVtcGxhdGUgc3RyaW5nIHRoYXQgd2lsbCBiZSB1c2VkIGluIHBsYWNlIG9mIHRoZSB1c2VyLWRlZmluZWQgdGVtcGxhdGUgd2hlblxuICAgKiBjaGVja2luZyBvciBvcGVyYXRpbmcgb24gdGhlIGdpdmVuIGNvbXBvbmVudC5cbiAgICpcbiAgICogVGhlIGNvbXBpbGVyIHdpbGwgcGFyc2UgdGhpcyB0ZW1wbGF0ZSBmb3IgZGlhZ25vc3RpY3MsIGFuZCB3aWxsIHJldHVybiBhbnkgcGFyc2luZyBlcnJvcnMgaWYgaXRcbiAgICogaXMgbm90IHZhbGlkLiBJZiB0aGUgdGVtcGxhdGUgY2Fubm90IGJlIHBhcnNlZCBjb3JyZWN0bHksIG5vIG92ZXJyaWRlIHdpbGwgb2NjdXIuXG4gICAqL1xuICBvdmVycmlkZUNvbXBvbmVudFRlbXBsYXRlKGNvbXBvbmVudDogdHMuQ2xhc3NEZWNsYXJhdGlvbiwgdGVtcGxhdGU6IHN0cmluZyk6XG4gICAgICB7bm9kZXM6IFRtcGxBc3ROb2RlW10sIGVycm9ycz86IFBhcnNlRXJyb3JbXX07XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgYHRzLkRpYWdub3N0aWNgcyBjdXJyZW50bHkgYXZhaWxhYmxlIGZvciB0aGUgZ2l2ZW4gYHRzLlNvdXJjZUZpbGVgLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCB3aWxsIGZhaWwgKHRocm93KSBpZiB0aGVyZSBhcmUgY29tcG9uZW50cyB3aXRoaW4gdGhlIGB0cy5Tb3VyY2VGaWxlYCB0aGF0IGRvIG5vdFxuICAgKiBoYXZlIFRDQnMgYXZhaWxhYmxlLlxuICAgKlxuICAgKiBHZW5lcmF0aW5nIGEgdGVtcGxhdGUgdHlwZS1jaGVja2luZyBwcm9ncmFtIGlzIGV4cGVuc2l2ZSwgYW5kIGluIHNvbWUgd29ya2Zsb3dzIChlLmcuIGNoZWNraW5nXG4gICAqIGFuIGVudGlyZSBwcm9ncmFtIGJlZm9yZSBlbWl0KSwgaXQgc2hvdWxkIGlkZWFsbHkgb25seSBiZSBkb25lIG9uY2UuIFRoZSBgb3B0aW1pemVGb3JgIGZsYWdcbiAgICogYWxsb3dzIHRoZSBjYWxsZXIgdG8gaGludCB0byBgZ2V0RGlhZ25vc3RpY3NGb3JGaWxlYCAod2hpY2ggaW50ZXJuYWxseSB3aWxsIGNyZWF0ZSBhIHRlbXBsYXRlXG4gICAqIHR5cGUtY2hlY2tpbmcgcHJvZ3JhbSBpZiBuZWVkZWQpIHdoZXRoZXIgdGhlIGNhbGxlciBpcyBpbnRlcmVzdGVkIGluIGp1c3QgdGhlIHJlc3VsdHMgb2YgdGhlXG4gICAqIHNpbmdsZSBmaWxlLCBvciB3aGV0aGVyIHRoZXkgcGxhbiB0byBxdWVyeSBhYm91dCBvdGhlciBmaWxlcyBpbiB0aGUgcHJvZ3JhbS4gQmFzZWQgb24gdGhpc1xuICAgKiBmbGFnLCBgZ2V0RGlhZ25vc3RpY3NGb3JGaWxlYCB3aWxsIGRldGVybWluZSBob3cgbXVjaCBvZiB0aGUgdXNlcidzIHByb2dyYW0gdG8gcHJlcGFyZSBmb3JcbiAgICogY2hlY2tpbmcgYXMgcGFydCBvZiB0aGUgdGVtcGxhdGUgdHlwZS1jaGVja2luZyBwcm9ncmFtIGl0IGNyZWF0ZXMuXG4gICAqL1xuICBnZXREaWFnbm9zdGljc0ZvckZpbGUoc2Y6IHRzLlNvdXJjZUZpbGUsIG9wdGltaXplRm9yOiBPcHRpbWl6ZUZvcik6IHRzLkRpYWdub3N0aWNbXTtcblxuICAvKipcbiAgICogR2V0IGFsbCBgdHMuRGlhZ25vc3RpY2BzIGN1cnJlbnRseSBhdmFpbGFibGUgdGhhdCBwZXJ0YWluIHRvIHRoZSBnaXZlbiBjb21wb25lbnQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGFsd2F5cyBydW5zIGluIGBPcHRpbWl6ZUZvci5TaW5nbGVGaWxlYCBtb2RlLlxuICAgKi9cbiAgZ2V0RGlhZ25vc3RpY3NGb3JDb21wb25lbnQoY29tcG9uZW50OiB0cy5DbGFzc0RlY2xhcmF0aW9uKTogdHMuRGlhZ25vc3RpY1tdO1xuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSB0aGUgdG9wLWxldmVsIG5vZGUgcmVwcmVzZW50aW5nIHRoZSBUQ0IgZm9yIHRoZSBnaXZlbiBjb21wb25lbnQuXG4gICAqXG4gICAqIFRoaXMgY2FuIHJldHVybiBgbnVsbGAgaWYgdGhlcmUgaXMgbm8gVENCIGF2YWlsYWJsZSBmb3IgdGhlIGNvbXBvbmVudC5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgYWx3YXlzIHJ1bnMgaW4gYE9wdGltaXplRm9yLlNpbmdsZUZpbGVgIG1vZGUuXG4gICAqL1xuICBnZXRUeXBlQ2hlY2tCbG9jayhjb21wb25lbnQ6IHRzLkNsYXNzRGVjbGFyYXRpb24pOiB0cy5Ob2RlfG51bGw7XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBhIGBTeW1ib2xgIGZvciB0aGUgbm9kZSBpbiBhIGNvbXBvbmVudCdzIHRlbXBsYXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gcmV0dXJuIGBudWxsYCBpZiBhIHZhbGlkIGBTeW1ib2xgIGNhbm5vdCBiZSBkZXRlcm1pbmVkIGZvciB0aGUgbm9kZS5cbiAgICpcbiAgICogQHNlZSBTeW1ib2xcbiAgICovXG4gIGdldFN5bWJvbE9mTm9kZShub2RlOiBBU1R8VG1wbEFzdE5vZGUsIGNvbXBvbmVudDogdHMuQ2xhc3NEZWNsYXJhdGlvbik6IFN5bWJvbHxudWxsO1xuXG4gIC8qKlxuICAgKiBHZXQgXCJnbG9iYWxcIiBgQ29tcGxldGlvbmBzIGluIHRoZSBnaXZlbiBjb250ZXh0LlxuICAgKlxuICAgKiBHbG9iYWwgY29tcGxldGlvbnMgYXJlIGNvbXBsZXRpb25zIGluIHRoZSBnbG9iYWwgY29udGV4dCwgYXMgb3Bwb3NlZCB0byBjb21wbGV0aW9ucyB3aXRoaW4gYW5cbiAgICogZXhpc3RpbmcgZXhwcmVzc2lvbi4gRm9yIGV4YW1wbGUsIGNvbXBsZXRpbmcgaW5zaWRlIGEgbmV3IGludGVycG9sYXRpb24gZXhwcmVzc2lvbiAoYHt7fH19YCkgb3JcbiAgICogaW5zaWRlIGEgbmV3IHByb3BlcnR5IGJpbmRpbmcgYFtpbnB1dF09XCJ8XCIgc2hvdWxkIHJldHJpZXZlIGdsb2JhbCBjb21wbGV0aW9ucywgd2hpY2ggd2lsbFxuICAgKiBpbmNsdWRlIGNvbXBsZXRpb25zIGZyb20gdGhlIHRlbXBsYXRlJ3MgY29udGV4dCBjb21wb25lbnQsIGFzIHdlbGwgYXMgYW55IGxvY2FsIHJlZmVyZW5jZXMgb3JcbiAgICogdGVtcGxhdGUgdmFyaWFibGVzIHdoaWNoIGFyZSBpbiBzY29wZSBmb3IgdGhhdCBleHByZXNzaW9uLlxuICAgKi9cbiAgZ2V0R2xvYmFsQ29tcGxldGlvbnMoY29udGV4dDogVG1wbEFzdFRlbXBsYXRlfG51bGwsIGNvbXBvbmVudDogdHMuQ2xhc3NEZWNsYXJhdGlvbik6XG4gICAgICBHbG9iYWxDb21wbGV0aW9uW107XG59XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBzY29wZSBvZiB0aGUgY2FsbGVyJ3MgaW50ZXJlc3QgaW4gdGVtcGxhdGUgdHlwZS1jaGVja2luZyByZXN1bHRzLlxuICovXG5leHBvcnQgZW51bSBPcHRpbWl6ZUZvciB7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgdGhhdCBhIGNvbnN1bWVyIG9mIGEgYFRlbXBsYXRlVHlwZUNoZWNrZXJgIGlzIG9ubHkgaW50ZXJlc3RlZCBpbiByZXN1bHRzIGZvciBhIGdpdmVuXG4gICAqIGZpbGUsIGFuZCB3YW50cyB0aGVtIGFzIGZhc3QgYXMgcG9zc2libGUuXG4gICAqXG4gICAqIENhbGxpbmcgYFRlbXBsYXRlVHlwZUNoZWNrZXJgIG1ldGhvZHMgc3VjY2Vzc2l2ZWx5IGZvciBtdWx0aXBsZSBmaWxlcyB3aGlsZSBzcGVjaWZ5aW5nXG4gICAqIGBPcHRpbWl6ZUZvci5TaW5nbGVGaWxlYCBjYW4gcmVzdWx0IGluIHNpZ25pZmljYW50IHVubmVjZXNzYXJ5IG92ZXJoZWFkIG92ZXJhbGwuXG4gICAqL1xuICBTaW5nbGVGaWxlLFxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgdGhhdCBhIGNvbnN1bWVyIG9mIGEgYFRlbXBsYXRlVHlwZUNoZWNrZXJgIGludGVuZHMgdG8gcXVlcnkgZm9yIHJlc3VsdHMgcGVydGFpbmluZyB0b1xuICAgKiB0aGUgZW50aXJlIHVzZXIgcHJvZ3JhbSwgYW5kIHNvIHRoZSB0eXBlLWNoZWNrZXIgc2hvdWxkIGludGVybmFsbHkgb3B0aW1pemUgZm9yIHRoaXMgY2FzZS5cbiAgICpcbiAgICogSW5pdGlhbCBjYWxscyB0byByZXRyaWV2ZSB0eXBlLWNoZWNraW5nIGluZm9ybWF0aW9uIG1heSB0YWtlIGxvbmdlciwgYnV0IHJlcGVhdGVkIGNhbGxzIHRvXG4gICAqIGdhdGhlciBpbmZvcm1hdGlvbiBmb3IgdGhlIHdob2xlIHVzZXIgcHJvZ3JhbSB3aWxsIGJlIHNpZ25pZmljYW50bHkgZmFzdGVyIHdpdGggdGhpcyBtb2RlIG9mXG4gICAqIG9wdGltaXphdGlvbi5cbiAgICovXG4gIFdob2xlUHJvZ3JhbSxcbn1cbiJdfQ==