/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { DomElementSchemaRegistry } from '@angular/compiler';
import * as ts from 'typescript';
import { ErrorCode, ngErrorCode } from '../../diagnostics';
import { makeTemplateDiagnostic } from '../diagnostics';
const REGISTRY = new DomElementSchemaRegistry();
const REMOVE_XHTML_REGEX = /^:xhtml:/;
/**
 * Checks non-Angular elements and properties against the `DomElementSchemaRegistry`, a schema
 * maintained by the Angular team via extraction from a browser IDL.
 */
export class RegistryDomSchemaChecker {
    constructor(resolver) {
        this.resolver = resolver;
        this._diagnostics = [];
    }
    get diagnostics() {
        return this._diagnostics;
    }
    checkElement(id, element, schemas) {
        // HTML elements inside an SVG `foreignObject` are declared in the `xhtml` namespace.
        // We need to strip it before handing it over to the registry because all HTML tag names
        // in the registry are without a namespace.
        const name = element.name.replace(REMOVE_XHTML_REGEX, '');
        if (!REGISTRY.hasElement(name, schemas)) {
            const mapping = this.resolver.getSourceMapping(id);
            let errorMsg = `'${name}' is not a known element:\n`;
            errorMsg +=
                `1. If '${name}' is an Angular component, then verify that it is part of this module.\n`;
            if (name.indexOf('-') > -1) {
                errorMsg += `2. If '${name}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.`;
            }
            else {
                errorMsg +=
                    `2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;
            }
            const diag = makeTemplateDiagnostic(id, mapping, element.startSourceSpan, ts.DiagnosticCategory.Error, ngErrorCode(ErrorCode.SCHEMA_INVALID_ELEMENT), errorMsg);
            this._diagnostics.push(diag);
        }
    }
    checkProperty(id, element, name, span, schemas) {
        if (!REGISTRY.hasProperty(element.name, name, schemas)) {
            const mapping = this.resolver.getSourceMapping(id);
            let errorMsg = `Can't bind to '${name}' since it isn't a known property of '${element.name}'.`;
            if (element.name.startsWith('ng-')) {
                errorMsg +=
                    `\n1. If '${name}' is an Angular directive, then add 'CommonModule' to the '@NgModule.imports' of this component.` +
                        `\n2. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;
            }
            else if (element.name.indexOf('-') > -1) {
                errorMsg +=
                    `\n1. If '${element.name}' is an Angular component and it has '${name}' input, then verify that it is part of this module.` +
                        `\n2. If '${element
                            .name}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.` +
                        `\n3. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;
            }
            const diag = makeTemplateDiagnostic(id, mapping, span, ts.DiagnosticCategory.Error, ngErrorCode(ErrorCode.SCHEMA_INVALID_ATTRIBUTE), errorMsg);
            this._diagnostics.push(diag);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,