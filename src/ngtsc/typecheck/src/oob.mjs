/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as ts from 'typescript';
import { ErrorCode, makeDiagnostic, makeRelatedInformation, ngErrorCode } from '../../diagnostics';
import { makeTemplateDiagnostic } from '../diagnostics';
export class OutOfBandDiagnosticRecorderImpl {
    constructor(resolver) {
        this.resolver = resolver;
        this._diagnostics = [];
        /**
         * Tracks which `BindingPipe` nodes have already been recorded as invalid, so only one diagnostic
         * is ever produced per node.
         */
        this.recordedPipes = new Set();
    }
    get diagnostics() {
        return this._diagnostics;
    }
    missingReferenceTarget(templateId, ref) {
        const mapping = this.resolver.getSourceMapping(templateId);
        const value = ref.value.trim();
        const errorMsg = `No directive found with exportAs '${value}'.`;
        this._diagnostics.push(makeTemplateDiagnostic(templateId, mapping, ref.valueSpan || ref.sourceSpan, ts.DiagnosticCategory.Error, ngErrorCode(ErrorCode.MISSING_REFERENCE_TARGET), errorMsg));
    }
    missingPipe(templateId, ast) {
        if (this.recordedPipes.has(ast)) {
            return;
        }
        const mapping = this.resolver.getSourceMapping(templateId);
        const errorMsg = `No pipe found with name '${ast.name}'.`;
        const sourceSpan = this.resolver.toParseSourceSpan(templateId, ast.nameSpan);
        if (sourceSpan === null) {
            throw new Error(`Assertion failure: no SourceLocation found for usage of pipe '${ast.name}'.`);
        }
        this._diagnostics.push(makeTemplateDiagnostic(templateId, mapping, sourceSpan, ts.DiagnosticCategory.Error, ngErrorCode(ErrorCode.MISSING_PIPE), errorMsg));
        this.recordedPipes.add(ast);
    }
    illegalAssignmentToTemplateVar(templateId, assignment, target) {
        const mapping = this.resolver.getSourceMapping(templateId);
        const errorMsg = `Cannot use variable '${assignment
            .name}' as the left-hand side of an assignment expression. Template variables are read-only.`;
        const sourceSpan = this.resolver.toParseSourceSpan(templateId, assignment.sourceSpan);
        if (sourceSpan === null) {
            throw new Error(`Assertion failure: no SourceLocation found for property binding.`);
        }
        this._diagnostics.push(makeTemplateDiagnostic(templateId, mapping, sourceSpan, ts.DiagnosticCategory.Error, ngErrorCode(ErrorCode.WRITE_TO_READ_ONLY_VARIABLE), errorMsg, {
            text: `The variable ${assignment.name} is declared here.`,
            span: target.valueSpan || target.sourceSpan,
        }));
    }
    duplicateTemplateVar(templateId, variable, firstDecl) {
        const mapping = this.resolver.getSourceMapping(templateId);
        const errorMsg = `Cannot redeclare variable '${variable.name}' as it was previously declared elsewhere for the same template.`;
        // The allocation of the error here is pretty useless for variables declared in microsyntax,
        // since the sourceSpan refers to the entire microsyntax property, not a span for the specific
        // variable in question.
        //
        // TODO(alxhub): allocate to a tighter span once one is available.
        this._diagnostics.push(makeTemplateDiagnostic(templateId, mapping, variable.sourceSpan, ts.DiagnosticCategory.Error, ngErrorCode(ErrorCode.DUPLICATE_VARIABLE_DECLARATION), errorMsg, {
            text: `The variable '${firstDecl.name}' was first declared here.`,
            span: firstDecl.sourceSpan,
        }));
    }
    requiresInlineTcb(templateId, node) {
        this._diagnostics.push(makeInlineDiagnostic(templateId, ErrorCode.INLINE_TCB_REQUIRED, node.name, `This component requires inline template type-checking, which is not supported by the current environment.`));
    }
    requiresInlineTypeConstructors(templateId, node, directives) {
        let message;
        if (directives.length > 1) {
            message =
                `This component uses directives which require inline type constructors, which are not supported by the current environment.`;
        }
        else {
            message =
                `This component uses a directive which requires an inline type constructor, which is not supported by the current environment.`;
        }
        this._diagnostics.push(makeInlineDiagnostic(templateId, ErrorCode.INLINE_TYPE_CTOR_REQUIRED, node.name, message, directives.map(dir => makeRelatedInformation(dir.name, `Requires an inline type constructor.`))));
    }
    suboptimalTypeInference(templateId, variables) {
        const mapping = this.resolver.getSourceMapping(templateId);
        // Select one of the template variables that's most suitable for reporting the diagnostic. Any
        // variable will do, but prefer one bound to the context's $implicit if present.
        let diagnosticVar = null;
        for (const variable of variables) {
            if (diagnosticVar === null || (variable.value === '' || variable.value === '$implicit')) {
                diagnosticVar = variable;
            }
        }
        if (diagnosticVar === null) {
            // There is no variable on which to report the diagnostic.
            return;
        }
        let varIdentification = `'${diagnosticVar.name}'`;
        if (variables.length === 2) {
            varIdentification += ` (and 1 other)`;
        }
        else if (variables.length > 2) {
            varIdentification += ` (and ${variables.length - 1} others)`;
        }
        const message = `This structural directive supports advanced type inference, but the current compiler configuration prevents its usage. The variable ${varIdentification} will have type 'any' as a result.\n\nConsider enabling the 'strictTemplates' option in your tsconfig.json for better type inference within this template.`;
        this._diagnostics.push(makeTemplateDiagnostic(templateId, mapping, diagnosticVar.keySpan, ts.DiagnosticCategory.Suggestion, ngErrorCode(ErrorCode.SUGGEST_SUBOPTIMAL_TYPE_INFERENCE), message));
    }
}
function makeInlineDiagnostic(templateId, code, node, messageText, relatedInformation) {
    return Object.assign(Object.assign({}, makeDiagnostic(code, node, messageText, relatedInformation)), { componentFile: node.getSourceFile(), templateId });
}
//# sourceMappingURL=data:application/json;base64,