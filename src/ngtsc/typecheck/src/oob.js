/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@angular/compiler-cli/src/ngtsc/typecheck/src/oob", ["require", "exports", "tslib", "@angular/compiler", "typescript", "@angular/compiler-cli/src/ngtsc/diagnostics", "@angular/compiler-cli/src/ngtsc/typecheck/diagnostics"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OutOfBandDiagnosticRecorderImpl = void 0;
    var tslib_1 = require("tslib");
    var compiler_1 = require("@angular/compiler");
    var ts = require("typescript");
    var diagnostics_1 = require("@angular/compiler-cli/src/ngtsc/diagnostics");
    var diagnostics_2 = require("@angular/compiler-cli/src/ngtsc/typecheck/diagnostics");
    var OutOfBandDiagnosticRecorderImpl = /** @class */ (function () {
        function OutOfBandDiagnosticRecorderImpl(resolver) {
            this.resolver = resolver;
            this._diagnostics = [];
            /**
             * Tracks which `BindingPipe` nodes have already been recorded as invalid, so only one diagnostic
             * is ever produced per node.
             */
            this.recordedPipes = new Set();
        }
        Object.defineProperty(OutOfBandDiagnosticRecorderImpl.prototype, "diagnostics", {
            get: function () {
                return this._diagnostics;
            },
            enumerable: false,
            configurable: true
        });
        OutOfBandDiagnosticRecorderImpl.prototype.missingReferenceTarget = function (templateId, ref) {
            var mapping = this.resolver.getSourceMapping(templateId);
            var value = ref.value.trim();
            var errorMsg = "No directive found with exportAs '" + value + "'.";
            this._diagnostics.push((0, diagnostics_2.makeTemplateDiagnostic)(templateId, mapping, ref.valueSpan || ref.sourceSpan, ts.DiagnosticCategory.Error, (0, diagnostics_1.ngErrorCode)(diagnostics_1.ErrorCode.MISSING_REFERENCE_TARGET), errorMsg));
        };
        OutOfBandDiagnosticRecorderImpl.prototype.missingPipe = function (templateId, ast) {
            if (this.recordedPipes.has(ast)) {
                return;
            }
            var mapping = this.resolver.getSourceMapping(templateId);
            var errorMsg = "No pipe found with name '" + ast.name + "'.";
            var sourceSpan = this.resolver.toParseSourceSpan(templateId, ast.nameSpan);
            if (sourceSpan === null) {
                throw new Error("Assertion failure: no SourceLocation found for usage of pipe '" + ast.name + "'.");
            }
            this._diagnostics.push((0, diagnostics_2.makeTemplateDiagnostic)(templateId, mapping, sourceSpan, ts.DiagnosticCategory.Error, (0, diagnostics_1.ngErrorCode)(diagnostics_1.ErrorCode.MISSING_PIPE), errorMsg));
            this.recordedPipes.add(ast);
        };
        OutOfBandDiagnosticRecorderImpl.prototype.illegalAssignmentToTemplateVar = function (templateId, assignment, target) {
            var _a, _b;
            var mapping = this.resolver.getSourceMapping(templateId);
            var errorMsg = "Cannot use variable '" + assignment
                .name + "' as the left-hand side of an assignment expression. Template variables are read-only.";
            var sourceSpan = this.resolver.toParseSourceSpan(templateId, assignment.sourceSpan);
            if (sourceSpan === null) {
                throw new Error("Assertion failure: no SourceLocation found for property binding.");
            }
            this._diagnostics.push((0, diagnostics_2.makeTemplateDiagnostic)(templateId, mapping, sourceSpan, ts.DiagnosticCategory.Error, (0, diagnostics_1.ngErrorCode)(diagnostics_1.ErrorCode.WRITE_TO_READ_ONLY_VARIABLE), errorMsg, [{
                    text: "The variable " + assignment.name + " is declared here.",
                    start: ((_a = target.valueSpan) === null || _a === void 0 ? void 0 : _a.start.offset) || target.sourceSpan.start.offset,
                    end: ((_b = target.valueSpan) === null || _b === void 0 ? void 0 : _b.end.offset) || target.sourceSpan.end.offset,
                    sourceFile: mapping.node.getSourceFile(),
                }]));
        };
        OutOfBandDiagnosticRecorderImpl.prototype.duplicateTemplateVar = function (templateId, variable, firstDecl) {
            var mapping = this.resolver.getSourceMapping(templateId);
            var errorMsg = "Cannot redeclare variable '" + variable.name + "' as it was previously declared elsewhere for the same template.";
            // The allocation of the error here is pretty useless for variables declared in microsyntax,
            // since the sourceSpan refers to the entire microsyntax property, not a span for the specific
            // variable in question.
            //
            // TODO(alxhub): allocate to a tighter span once one is available.
            this._diagnostics.push((0, diagnostics_2.makeTemplateDiagnostic)(templateId, mapping, variable.sourceSpan, ts.DiagnosticCategory.Error, (0, diagnostics_1.ngErrorCode)(diagnostics_1.ErrorCode.DUPLICATE_VARIABLE_DECLARATION), errorMsg, [{
                    text: "The variable '" + firstDecl.name + "' was first declared here.",
                    start: firstDecl.sourceSpan.start.offset,
                    end: firstDecl.sourceSpan.end.offset,
                    sourceFile: mapping.node.getSourceFile(),
                }]));
        };
        OutOfBandDiagnosticRecorderImpl.prototype.requiresInlineTcb = function (templateId, node) {
            this._diagnostics.push(makeInlineDiagnostic(templateId, diagnostics_1.ErrorCode.INLINE_TCB_REQUIRED, node.name, "This component requires inline template type-checking, which is not supported by the current environment."));
        };
        OutOfBandDiagnosticRecorderImpl.prototype.requiresInlineTypeConstructors = function (templateId, node, directives) {
            var message;
            if (directives.length > 1) {
                message =
                    "This component uses directives which require inline type constructors, which are not supported by the current environment.";
            }
            else {
                message =
                    "This component uses a directive which requires an inline type constructor, which is not supported by the current environment.";
            }
            this._diagnostics.push(makeInlineDiagnostic(templateId, diagnostics_1.ErrorCode.INLINE_TYPE_CTOR_REQUIRED, node.name, message, directives.map(function (dir) { return (0, diagnostics_1.makeRelatedInformation)(dir.name, "Requires an inline type constructor."); })));
        };
        OutOfBandDiagnosticRecorderImpl.prototype.suboptimalTypeInference = function (templateId, variables) {
            var e_1, _a;
            var mapping = this.resolver.getSourceMapping(templateId);
            // Select one of the template variables that's most suitable for reporting the diagnostic. Any
            // variable will do, but prefer one bound to the context's $implicit if present.
            var diagnosticVar = null;
            try {
                for (var variables_1 = (0, tslib_1.__values)(variables), variables_1_1 = variables_1.next(); !variables_1_1.done; variables_1_1 = variables_1.next()) {
                    var variable = variables_1_1.value;
                    if (diagnosticVar === null || (variable.value === '' || variable.value === '$implicit')) {
                        diagnosticVar = variable;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (variables_1_1 && !variables_1_1.done && (_a = variables_1.return)) _a.call(variables_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (diagnosticVar === null) {
                // There is no variable on which to report the diagnostic.
                return;
            }
            var varIdentification = "'" + diagnosticVar.name + "'";
            if (variables.length === 2) {
                varIdentification += " (and 1 other)";
            }
            else if (variables.length > 2) {
                varIdentification += " (and " + (variables.length - 1) + " others)";
            }
            var message = "This structural directive supports advanced type inference, but the current compiler configuration prevents its usage. The variable " + varIdentification + " will have type 'any' as a result.\n\nConsider enabling the 'strictTemplates' option in your tsconfig.json for better type inference within this template.";
            this._diagnostics.push((0, diagnostics_2.makeTemplateDiagnostic)(templateId, mapping, diagnosticVar.keySpan, ts.DiagnosticCategory.Suggestion, (0, diagnostics_1.ngErrorCode)(diagnostics_1.ErrorCode.SUGGEST_SUBOPTIMAL_TYPE_INFERENCE), message));
        };
        OutOfBandDiagnosticRecorderImpl.prototype.splitTwoWayBinding = function (templateId, input, output, inputConsumer, outputConsumer) {
            var mapping = this.resolver.getSourceMapping(templateId);
            var errorMsg = "The property and event halves of the two-way binding '" + input.name + "' are not bound to the same target.\n            Find more at https://angular.io/guide/two-way-binding#how-two-way-binding-works";
            var relatedMessages = [];
            relatedMessages.push({
                text: "The property half of the binding is to the '" + inputConsumer.name.text + "' component.",
                start: inputConsumer.name.getStart(),
                end: inputConsumer.name.getEnd(),
                sourceFile: inputConsumer.name.getSourceFile(),
            });
            if (outputConsumer instanceof compiler_1.TmplAstElement) {
                var message = "The event half of the binding is to a native event called '" + input.name + "' on the <" + outputConsumer.name + "> DOM element.";
                if (!mapping.node.getSourceFile().isDeclarationFile) {
                    message += "\n \n Are you missing an output declaration called '" + output.name + "'?";
                }
                relatedMessages.push({
                    text: message,
                    start: outputConsumer.sourceSpan.start.offset + 1,
                    end: outputConsumer.sourceSpan.start.offset + outputConsumer.name.length + 1,
                    sourceFile: mapping.node.getSourceFile(),
                });
            }
            else {
                relatedMessages.push({
                    text: "The event half of the binding is to the '" + outputConsumer.name.text + "' component.",
                    start: outputConsumer.name.getStart(),
                    end: outputConsumer.name.getEnd(),
                    sourceFile: outputConsumer.name.getSourceFile(),
                });
            }
            this._diagnostics.push((0, diagnostics_2.makeTemplateDiagnostic)(templateId, mapping, input.keySpan, ts.DiagnosticCategory.Error, (0, diagnostics_1.ngErrorCode)(diagnostics_1.ErrorCode.SPLIT_TWO_WAY_BINDING), errorMsg, relatedMessages));
        };
        return OutOfBandDiagnosticRecorderImpl;
    }());
    exports.OutOfBandDiagnosticRecorderImpl = OutOfBandDiagnosticRecorderImpl;
    function makeInlineDiagnostic(templateId, code, node, messageText, relatedInformation) {
        return (0, tslib_1.__assign)((0, tslib_1.__assign)({}, (0, diagnostics_1.makeDiagnostic)(code, node, messageText, relatedInformation)), { componentFile: node.getSourceFile(), templateId: templateId });
    }
});
//# sourceMappingURL=data:application/json;base64,