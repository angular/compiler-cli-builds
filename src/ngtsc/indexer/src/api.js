/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@angular/compiler-cli/src/ngtsc/indexer/src/api", ["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbsoluteSourceSpan = exports.IdentifierKind = void 0;
    /**
     * Describes the kind of identifier found in a template.
     */
    var IdentifierKind;
    (function (IdentifierKind) {
        IdentifierKind[IdentifierKind["Property"] = 0] = "Property";
        IdentifierKind[IdentifierKind["Method"] = 1] = "Method";
        IdentifierKind[IdentifierKind["Element"] = 2] = "Element";
        IdentifierKind[IdentifierKind["Template"] = 3] = "Template";
        IdentifierKind[IdentifierKind["Attribute"] = 4] = "Attribute";
        IdentifierKind[IdentifierKind["Reference"] = 5] = "Reference";
        IdentifierKind[IdentifierKind["Variable"] = 6] = "Variable";
    })(IdentifierKind = exports.IdentifierKind || (exports.IdentifierKind = {}));
    /**
     * Describes the absolute byte offsets of a text anchor in a source code.
     */
    var AbsoluteSourceSpan = /** @class */ (function () {
        function AbsoluteSourceSpan(start, end) {
            this.start = start;
            this.end = end;
        }
        return AbsoluteSourceSpan;
    }());
    exports.AbsoluteSourceSpan = AbsoluteSourceSpan;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tcGlsZXItY2xpL3NyYy9uZ3RzYy9pbmRleGVyL3NyYy9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOzs7Ozs7Ozs7Ozs7O0lBS0g7O09BRUc7SUFDSCxJQUFZLGNBUVg7SUFSRCxXQUFZLGNBQWM7UUFDeEIsMkRBQVEsQ0FBQTtRQUNSLHVEQUFNLENBQUE7UUFDTix5REFBTyxDQUFBO1FBQ1AsMkRBQVEsQ0FBQTtRQUNSLDZEQUFTLENBQUE7UUFDVCw2REFBUyxDQUFBO1FBQ1QsMkRBQVEsQ0FBQTtJQUNWLENBQUMsRUFSVyxjQUFjLEdBQWQsc0JBQWMsS0FBZCxzQkFBYyxRQVF6QjtJQStGRDs7T0FFRztJQUNIO1FBQ0UsNEJBQW1CLEtBQWEsRUFBUyxHQUFXO1lBQWpDLFVBQUssR0FBTCxLQUFLLENBQVE7WUFBUyxRQUFHLEdBQUgsR0FBRyxDQUFRO1FBQUcsQ0FBQztRQUMxRCx5QkFBQztJQUFELENBQUMsQUFGRCxJQUVDO0lBRlksZ0RBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7UGFyc2VTb3VyY2VGaWxlfSBmcm9tICdAYW5ndWxhci9jb21waWxlcic7XG5pbXBvcnQge0NsYXNzRGVjbGFyYXRpb24sIERlY2xhcmF0aW9uTm9kZX0gZnJvbSAnLi4vLi4vcmVmbGVjdGlvbic7XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBraW5kIG9mIGlkZW50aWZpZXIgZm91bmQgaW4gYSB0ZW1wbGF0ZS5cbiAqL1xuZXhwb3J0IGVudW0gSWRlbnRpZmllcktpbmQge1xuICBQcm9wZXJ0eSxcbiAgTWV0aG9kLCAgLy8gVE9ETzogTm8gbG9uZ2VyIGJlaW5nIHVzZWQuIFRvIGJlIHJlbW92ZWQgdG9nZXRoZXIgd2l0aCBgTWV0aG9kSWRlbnRpZmllcmAuXG4gIEVsZW1lbnQsXG4gIFRlbXBsYXRlLFxuICBBdHRyaWJ1dGUsXG4gIFJlZmVyZW5jZSxcbiAgVmFyaWFibGUsXG59XG5cbi8qKlxuICogRGVzY3JpYmVzIGEgc2VtYW50aWNhbGx5LWludGVyZXN0aW5nIGlkZW50aWZpZXIgaW4gYSB0ZW1wbGF0ZSwgc3VjaCBhcyBhbiBpbnRlcnBvbGF0ZWQgdmFyaWFibGVcbiAqIG9yIHNlbGVjdG9yLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRlbXBsYXRlSWRlbnRpZmllciB7XG4gIG5hbWU6IHN0cmluZztcbiAgc3BhbjogQWJzb2x1dGVTb3VyY2VTcGFuO1xuICBraW5kOiBJZGVudGlmaWVyS2luZDtcbn1cblxuLyoqIERlc2NyaWJlcyBhIHRlbXBsYXRlIGV4cHJlc3Npb24sIHdoaWNoIG1heSBoYXZlIGEgdGVtcGxhdGUgcmVmZXJlbmNlIG9yIHZhcmlhYmxlIHRhcmdldC4gKi9cbmludGVyZmFjZSBFeHByZXNzaW9uSWRlbnRpZmllciBleHRlbmRzIFRlbXBsYXRlSWRlbnRpZmllciB7XG4gIC8qKlxuICAgKiBSZWZlcmVuY2VJZGVudGlmaWVyIG9yIFZhcmlhYmxlSWRlbnRpZmllciBpbiB0aGUgdGVtcGxhdGUgdGhhdCB0aGlzIGlkZW50aWZpZXIgdGFyZ2V0cywgaWZcbiAgICogYW55LiBJZiB0aGUgdGFyZ2V0IGlzIGBudWxsYCwgaXQgcG9pbnRzIHRvIGEgZGVjbGFyYXRpb24gb24gdGhlIGNvbXBvbmVudCBjbGFzcy5cbiAgICogKi9cbiAgdGFyZ2V0OiBSZWZlcmVuY2VJZGVudGlmaWVyfFZhcmlhYmxlSWRlbnRpZmllcnxudWxsO1xufVxuXG4vKiogRGVzY3JpYmVzIGEgcHJvcGVydHkgYWNjZXNzZWQgaW4gYSB0ZW1wbGF0ZS4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUHJvcGVydHlJZGVudGlmaWVyIGV4dGVuZHMgRXhwcmVzc2lvbklkZW50aWZpZXIge1xuICBraW5kOiBJZGVudGlmaWVyS2luZC5Qcm9wZXJ0eTtcbn1cblxuLyoqXG4gKiBEZXNjcmliZXMgYSBtZXRob2QgYWNjZXNzZWQgaW4gYSB0ZW1wbGF0ZS5cbiAqIEBkZXByZWNhdGVkIE5vIGxvbmdlciBiZWluZyB1c2VkLiBUbyBiZSByZW1vdmVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1ldGhvZElkZW50aWZpZXIgZXh0ZW5kcyBFeHByZXNzaW9uSWRlbnRpZmllciB7XG4gIGtpbmQ6IElkZW50aWZpZXJLaW5kLk1ldGhvZDtcbn1cblxuLyoqIERlc2NyaWJlcyBhbiBlbGVtZW50IGF0dHJpYnV0ZSBpbiBhIHRlbXBsYXRlLiAqL1xuZXhwb3J0IGludGVyZmFjZSBBdHRyaWJ1dGVJZGVudGlmaWVyIGV4dGVuZHMgVGVtcGxhdGVJZGVudGlmaWVyIHtcbiAga2luZDogSWRlbnRpZmllcktpbmQuQXR0cmlidXRlO1xufVxuXG4vKiogQSByZWZlcmVuY2UgdG8gYSBkaXJlY3RpdmUgbm9kZSBhbmQgaXRzIHNlbGVjdG9yLiAqL1xuaW50ZXJmYWNlIERpcmVjdGl2ZVJlZmVyZW5jZSB7XG4gIG5vZGU6IENsYXNzRGVjbGFyYXRpb247XG4gIHNlbGVjdG9yOiBzdHJpbmc7XG59XG4vKiogQSBiYXNlIGludGVyZmFjZSBmb3IgZWxlbWVudCBhbmQgdGVtcGxhdGUgaWRlbnRpZmllcnMuICovXG5pbnRlcmZhY2UgQmFzZUVsZW1lbnRPclRlbXBsYXRlSWRlbnRpZmllciBleHRlbmRzIFRlbXBsYXRlSWRlbnRpZmllciB7XG4gIC8qKiBBdHRyaWJ1dGVzIG9uIGFuIGVsZW1lbnQgb3IgdGVtcGxhdGUuICovXG4gIGF0dHJpYnV0ZXM6IFNldDxBdHRyaWJ1dGVJZGVudGlmaWVyPjtcblxuICAvKiogRGlyZWN0aXZlcyBhcHBsaWVkIHRvIGFuIGVsZW1lbnQgb3IgdGVtcGxhdGUuICovXG4gIHVzZWREaXJlY3RpdmVzOiBTZXQ8RGlyZWN0aXZlUmVmZXJlbmNlPjtcbn1cbi8qKlxuICogRGVzY3JpYmVzIGFuIGluZGV4ZWQgZWxlbWVudCBpbiBhIHRlbXBsYXRlLiBUaGUgbmFtZSBvZiBhbiBgRWxlbWVudElkZW50aWZpZXJgIGlzIHRoZSBlbnRpcmVcbiAqIGVsZW1lbnQgdGFnLCB3aGljaCBjYW4gYmUgcGFyc2VkIGJ5IGFuIGluZGV4ZXIgdG8gZGV0ZXJtaW5lIHdoZXJlIHVzZWQgZGlyZWN0aXZlcyBzaG91bGQgYmVcbiAqIHJlZmVyZW5jZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRWxlbWVudElkZW50aWZpZXIgZXh0ZW5kcyBCYXNlRWxlbWVudE9yVGVtcGxhdGVJZGVudGlmaWVyIHtcbiAga2luZDogSWRlbnRpZmllcktpbmQuRWxlbWVudDtcbn1cblxuLyoqIERlc2NyaWJlcyBhbiBpbmRleGVkIHRlbXBsYXRlIG5vZGUgaW4gYSBjb21wb25lbnQgdGVtcGxhdGUgZmlsZS4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGVtcGxhdGVOb2RlSWRlbnRpZmllciBleHRlbmRzIEJhc2VFbGVtZW50T3JUZW1wbGF0ZUlkZW50aWZpZXIge1xuICBraW5kOiBJZGVudGlmaWVyS2luZC5UZW1wbGF0ZTtcbn1cblxuLyoqIERlc2NyaWJlcyBhIHJlZmVyZW5jZSBpbiBhIHRlbXBsYXRlIGxpa2UgXCJmb29cIiBpbiBgPGRpdiAjZm9vPjwvZGl2PmAuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlZmVyZW5jZUlkZW50aWZpZXIgZXh0ZW5kcyBUZW1wbGF0ZUlkZW50aWZpZXIge1xuICBraW5kOiBJZGVudGlmaWVyS2luZC5SZWZlcmVuY2U7XG5cbiAgLyoqIFRoZSB0YXJnZXQgb2YgdGhpcyByZWZlcmVuY2UuIElmIHRoZSB0YXJnZXQgaXMgbm90IGtub3duLCB0aGlzIGlzIGBudWxsYC4gKi9cbiAgdGFyZ2V0OiB7XG4gICAgLyoqIFRoZSB0ZW1wbGF0ZSBBU1Qgbm9kZSB0aGF0IHRoZSByZWZlcmVuY2UgdGFyZ2V0cy4gKi9cbiAgICBub2RlOiBFbGVtZW50SWRlbnRpZmllcnxUZW1wbGF0ZUlkZW50aWZpZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGlyZWN0aXZlIG9uIGBub2RlYCB0aGF0IHRoZSByZWZlcmVuY2UgdGFyZ2V0cy4gSWYgbm8gZGlyZWN0aXZlIGlzIHRhcmdldGVkLCB0aGlzIGlzXG4gICAgICogYG51bGxgLlxuICAgICAqL1xuICAgIGRpcmVjdGl2ZTogQ2xhc3NEZWNsYXJhdGlvbiB8IG51bGw7XG4gIH18bnVsbDtcbn1cblxuLyoqIERlc2NyaWJlcyBhIHRlbXBsYXRlIHZhcmlhYmxlIGxpa2UgXCJmb29cIiBpbiBgPGRpdiAqbmdGb3I9XCJsZXQgZm9vIG9mIGZvb3NcIj48L2Rpdj5gLiAqL1xuZXhwb3J0IGludGVyZmFjZSBWYXJpYWJsZUlkZW50aWZpZXIgZXh0ZW5kcyBUZW1wbGF0ZUlkZW50aWZpZXIge1xuICBraW5kOiBJZGVudGlmaWVyS2luZC5WYXJpYWJsZTtcbn1cblxuLyoqXG4gKiBJZGVudGlmaWVycyByZWNvcmRlZCBhdCB0aGUgdG9wIGxldmVsIG9mIHRoZSB0ZW1wbGF0ZSwgd2l0aG91dCBhbnkgY29udGV4dCBhYm91dCB0aGUgSFRNTCBub2Rlc1xuICogdGhleSB3ZXJlIGRpc2NvdmVyZWQgaW4uXG4gKi9cbmV4cG9ydCB0eXBlIFRvcExldmVsSWRlbnRpZmllciA9IFByb3BlcnR5SWRlbnRpZmllcnxFbGVtZW50SWRlbnRpZmllcnxUZW1wbGF0ZU5vZGVJZGVudGlmaWVyfFxuICAgIFJlZmVyZW5jZUlkZW50aWZpZXJ8VmFyaWFibGVJZGVudGlmaWVyfE1ldGhvZElkZW50aWZpZXI7XG5cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBhYnNvbHV0ZSBieXRlIG9mZnNldHMgb2YgYSB0ZXh0IGFuY2hvciBpbiBhIHNvdXJjZSBjb2RlLlxuICovXG5leHBvcnQgY2xhc3MgQWJzb2x1dGVTb3VyY2VTcGFuIHtcbiAgY29uc3RydWN0b3IocHVibGljIHN0YXJ0OiBudW1iZXIsIHB1YmxpYyBlbmQ6IG51bWJlcikge31cbn1cblxuLyoqXG4gKiBEZXNjcmliZXMgYW4gYW5hbHl6ZWQsIGluZGV4ZWQgY29tcG9uZW50IGFuZCBpdHMgdGVtcGxhdGUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5kZXhlZENvbXBvbmVudCB7XG4gIG5hbWU6IHN0cmluZztcbiAgc2VsZWN0b3I6IHN0cmluZ3xudWxsO1xuICBmaWxlOiBQYXJzZVNvdXJjZUZpbGU7XG4gIHRlbXBsYXRlOiB7XG4gICAgaWRlbnRpZmllcnM6IFNldDxUb3BMZXZlbElkZW50aWZpZXI+LFxuICAgIHVzZWRDb21wb25lbnRzOiBTZXQ8RGVjbGFyYXRpb25Ob2RlPixcbiAgICBpc0lubGluZTogYm9vbGVhbixcbiAgICBmaWxlOiBQYXJzZVNvdXJjZUZpbGU7XG4gIH07XG59XG4iXX0=