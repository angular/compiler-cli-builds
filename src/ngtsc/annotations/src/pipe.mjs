/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { compileClassMetadata, compileDeclareClassMetadata, compileDeclarePipeFromMetadata, compilePipeFromMetadata, FactoryTarget, WrappedNodeExpr } from '@angular/compiler';
import * as ts from 'typescript';
import { ErrorCode, FatalDiagnosticError } from '../../diagnostics';
import { Reference } from '../../imports';
import { SemanticSymbol } from '../../incremental/semantic_graph';
import { MetaType } from '../../metadata';
import { PerfEvent } from '../../perf';
import { Decorator, reflectObjectLiteral } from '../../reflection';
import { HandlerPrecedence } from '../../transform';
import { createValueHasWrongTypeError } from './diagnostics';
import { compileDeclareFactory, compileNgFactoryDefField } from './factory';
import { extractClassMetadata } from './metadata';
import { compileResults, findAngularDecorator, getValidConstructorDependencies, makeDuplicateDeclarationError, toFactoryMetadata, unwrapExpression, wrapTypeReference } from './util';
/**
 * Represents an Angular pipe.
 */
export class PipeSymbol extends SemanticSymbol {
    constructor(decl, name) {
        super(decl);
        this.name = name;
    }
    isPublicApiAffected(previousSymbol) {
        if (!(previousSymbol instanceof PipeSymbol)) {
            return true;
        }
        return this.name !== previousSymbol.name;
    }
    isTypeCheckApiAffected(previousSymbol) {
        return this.isPublicApiAffected(previousSymbol);
    }
}
export class PipeDecoratorHandler {
    constructor(reflector, evaluator, metaRegistry, scopeRegistry, injectableRegistry, isCore, perf) {
        this.reflector = reflector;
        this.evaluator = evaluator;
        this.metaRegistry = metaRegistry;
        this.scopeRegistry = scopeRegistry;
        this.injectableRegistry = injectableRegistry;
        this.isCore = isCore;
        this.perf = perf;
        this.precedence = HandlerPrecedence.PRIMARY;
        this.name = PipeDecoratorHandler.name;
    }
    detect(node, decorators) {
        if (!decorators) {
            return undefined;
        }
        const decorator = findAngularDecorator(decorators, 'Pipe', this.isCore);
        if (decorator !== undefined) {
            return {
                trigger: decorator.node,
                decorator: decorator,
                metadata: decorator,
            };
        }
        else {
            return undefined;
        }
    }
    analyze(clazz, decorator) {
        this.perf.eventCount(PerfEvent.AnalyzePipe);
        const name = clazz.name.text;
        const type = wrapTypeReference(this.reflector, clazz);
        const internalType = new WrappedNodeExpr(this.reflector.getInternalNameOfClass(clazz));
        if (decorator.args === null) {
            throw new FatalDiagnosticError(ErrorCode.DECORATOR_NOT_CALLED, Decorator.nodeForError(decorator), `@Pipe must be called`);
        }
        if (decorator.args.length !== 1) {
            throw new FatalDiagnosticError(ErrorCode.DECORATOR_ARITY_WRONG, Decorator.nodeForError(decorator), '@Pipe must have exactly one argument');
        }
        const meta = unwrapExpression(decorator.args[0]);
        if (!ts.isObjectLiteralExpression(meta)) {
            throw new FatalDiagnosticError(ErrorCode.DECORATOR_ARG_NOT_LITERAL, meta, '@Pipe must have a literal argument');
        }
        const pipe = reflectObjectLiteral(meta);
        if (!pipe.has('name')) {
            throw new FatalDiagnosticError(ErrorCode.PIPE_MISSING_NAME, meta, `@Pipe decorator is missing name field`);
        }
        const pipeNameExpr = pipe.get('name');
        const pipeName = this.evaluator.evaluate(pipeNameExpr);
        if (typeof pipeName !== 'string') {
            throw createValueHasWrongTypeError(pipeNameExpr, pipeName, `@Pipe.name must be a string`);
        }
        let pure = true;
        if (pipe.has('pure')) {
            const expr = pipe.get('pure');
            const pureValue = this.evaluator.evaluate(expr);
            if (typeof pureValue !== 'boolean') {
                throw createValueHasWrongTypeError(expr, pureValue, `@Pipe.pure must be a boolean`);
            }
            pure = pureValue;
        }
        return {
            analysis: {
                meta: {
                    name,
                    type,
                    internalType,
                    typeArgumentCount: this.reflector.getGenericArityOfClass(clazz) || 0,
                    pipeName,
                    deps: getValidConstructorDependencies(clazz, this.reflector, this.isCore),
                    pure,
                },
                classMetadata: extractClassMetadata(clazz, this.reflector, this.isCore),
                pipeNameExpr,
            },
        };
    }
    symbol(node, analysis) {
        return new PipeSymbol(node, analysis.meta.name);
    }
    register(node, analysis) {
        const ref = new Reference(node);
        this.metaRegistry.registerPipeMetadata({ type: MetaType.Pipe, ref, name: analysis.meta.pipeName, nameExpr: analysis.pipeNameExpr });
        this.injectableRegistry.registerInjectable(node);
    }
    resolve(node) {
        const duplicateDeclData = this.scopeRegistry.getDuplicateDeclarations(node);
        if (duplicateDeclData !== null) {
            // This pipe was declared twice (or more).
            return {
                diagnostics: [makeDuplicateDeclarationError(node, duplicateDeclData, 'Pipe')],
            };
        }
        return {};
    }
    compileFull(node, analysis) {
        const fac = compileNgFactoryDefField(toFactoryMetadata(analysis.meta, FactoryTarget.Pipe));
        const def = compilePipeFromMetadata(analysis.meta);
        const classMetadata = analysis.classMetadata !== null ?
            compileClassMetadata(analysis.classMetadata).toStmt() :
            null;
        return compileResults(fac, def, classMetadata, 'ɵpipe');
    }
    compilePartial(node, analysis) {
        const fac = compileDeclareFactory(toFactoryMetadata(analysis.meta, FactoryTarget.Pipe));
        const def = compileDeclarePipeFromMetadata(analysis.meta);
        const classMetadata = analysis.classMetadata !== null ?
            compileDeclareClassMetadata(analysis.classMetadata).toStmt() :
            null;
        return compileResults(fac, def, classMetadata, 'ɵpipe');
    }
}
//# sourceMappingURL=data:application/json;base64,