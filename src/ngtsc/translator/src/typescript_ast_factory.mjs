/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as ts from 'typescript';
/**
 * Different optimizers use different annotations on a function or method call to indicate its pure
 * status.
 */
var PureAnnotation;
(function (PureAnnotation) {
    /**
     * Closure's annotation for purity is `@pureOrBreakMyCode`, but this needs to be in a semantic
     * (jsdoc) enabled comment. Thus, the actual comment text for Closure must include the `*` that
     * turns a `/*` comment into a `/**` comment, as well as surrounding whitespace.
     */
    PureAnnotation["CLOSURE"] = "* @pureOrBreakMyCode ";
    PureAnnotation["TERSER"] = "@__PURE__";
})(PureAnnotation || (PureAnnotation = {}));
const UNARY_OPERATORS = {
    '+': ts.SyntaxKind.PlusToken,
    '-': ts.SyntaxKind.MinusToken,
    '!': ts.SyntaxKind.ExclamationToken,
};
const BINARY_OPERATORS = {
    '&&': ts.SyntaxKind.AmpersandAmpersandToken,
    '>': ts.SyntaxKind.GreaterThanToken,
    '>=': ts.SyntaxKind.GreaterThanEqualsToken,
    '&': ts.SyntaxKind.AmpersandToken,
    '/': ts.SyntaxKind.SlashToken,
    '==': ts.SyntaxKind.EqualsEqualsToken,
    '===': ts.SyntaxKind.EqualsEqualsEqualsToken,
    '<': ts.SyntaxKind.LessThanToken,
    '<=': ts.SyntaxKind.LessThanEqualsToken,
    '-': ts.SyntaxKind.MinusToken,
    '%': ts.SyntaxKind.PercentToken,
    '*': ts.SyntaxKind.AsteriskToken,
    '!=': ts.SyntaxKind.ExclamationEqualsToken,
    '!==': ts.SyntaxKind.ExclamationEqualsEqualsToken,
    '||': ts.SyntaxKind.BarBarToken,
    '+': ts.SyntaxKind.PlusToken,
    '??': ts.SyntaxKind.QuestionQuestionToken,
};
const VAR_TYPES = {
    'const': ts.NodeFlags.Const,
    'let': ts.NodeFlags.Let,
    'var': ts.NodeFlags.None,
};
/**
 * A TypeScript flavoured implementation of the AstFactory.
 */
export class TypeScriptAstFactory {
    constructor(annotateForClosureCompiler) {
        this.annotateForClosureCompiler = annotateForClosureCompiler;
        this.externalSourceFiles = new Map();
        this.attachComments = attachComments;
        this.createArrayLiteral = ts.createArrayLiteral;
        this.createConditional = ts.createConditional;
        this.createElementAccess = ts.createElementAccess;
        this.createExpressionStatement = ts.createExpressionStatement;
        this.createIdentifier = ts.createIdentifier;
        this.createParenthesizedExpression = ts.createParen;
        this.createPropertyAccess = ts.createPropertyAccess;
        this.createThrowStatement = ts.createThrow;
        this.createTypeOfExpression = ts.createTypeOf;
    }
    createAssignment(target, value) {
        return ts.createBinary(target, ts.SyntaxKind.EqualsToken, value);
    }
    createBinaryExpression(leftOperand, operator, rightOperand) {
        return ts.createBinary(leftOperand, BINARY_OPERATORS[operator], rightOperand);
    }
    createBlock(body) {
        return ts.createBlock(body);
    }
    createCallExpression(callee, args, pure) {
        const call = ts.createCall(callee, undefined, args);
        if (pure) {
            ts.addSyntheticLeadingComment(call, ts.SyntaxKind.MultiLineCommentTrivia, this.annotateForClosureCompiler ? PureAnnotation.CLOSURE : PureAnnotation.TERSER, 
            /* trailing newline */ false);
        }
        return call;
    }
    createFunctionDeclaration(functionName, parameters, body) {
        if (!ts.isBlock(body)) {
            throw new Error(`Invalid syntax, expected a block, but got ${ts.SyntaxKind[body.kind]}.`);
        }
        return ts.createFunctionDeclaration(undefined, undefined, undefined, functionName, undefined, parameters.map(param => ts.createParameter(undefined, undefined, undefined, param)), undefined, body);
    }
    createFunctionExpression(functionName, parameters, body) {
        if (!ts.isBlock(body)) {
            throw new Error(`Invalid syntax, expected a block, but got ${ts.SyntaxKind[body.kind]}.`);
        }
        return ts.createFunctionExpression(undefined, undefined, functionName !== null && functionName !== void 0 ? functionName : undefined, undefined, parameters.map(param => ts.createParameter(undefined, undefined, undefined, param)), undefined, body);
    }
    createIfStatement(condition, thenStatement, elseStatement) {
        return ts.createIf(condition, thenStatement, elseStatement !== null && elseStatement !== void 0 ? elseStatement : undefined);
    }
    createLiteral(value) {
        if (value === undefined) {
            return ts.createIdentifier('undefined');
        }
        else if (value === null) {
            return ts.createNull();
        }
        else {
            return ts.createLiteral(value);
        }
    }
    createNewExpression(expression, args) {
        return ts.createNew(expression, undefined, args);
    }
    createObjectLiteral(properties) {
        return ts.createObjectLiteral(properties.map(prop => ts.createPropertyAssignment(prop.quoted ? ts.createLiteral(prop.propertyName) :
            ts.createIdentifier(prop.propertyName), prop.value)));
    }
    createReturnStatement(expression) {
        return ts.createReturn(expression !== null && expression !== void 0 ? expression : undefined);
    }
    createTaggedTemplate(tag, template) {
        let templateLiteral;
        const length = template.elements.length;
        const head = template.elements[0];
        if (length === 1) {
            templateLiteral = ts.createNoSubstitutionTemplateLiteral(head.cooked, head.raw);
        }
        else {
            const spans = [];
            // Create the middle parts
            for (let i = 1; i < length - 1; i++) {
                const { cooked, raw, range } = template.elements[i];
                const middle = createTemplateMiddle(cooked, raw);
                if (range !== null) {
                    this.setSourceMapRange(middle, range);
                }
                spans.push(ts.createTemplateSpan(template.expressions[i - 1], middle));
            }
            // Create the tail part
            const resolvedExpression = template.expressions[length - 2];
            const templatePart = template.elements[length - 1];
            const templateTail = createTemplateTail(templatePart.cooked, templatePart.raw);
            if (templatePart.range !== null) {
                this.setSourceMapRange(templateTail, templatePart.range);
            }
            spans.push(ts.createTemplateSpan(resolvedExpression, templateTail));
            // Put it all together
            templateLiteral =
                ts.createTemplateExpression(ts.createTemplateHead(head.cooked, head.raw), spans);
        }
        if (head.range !== null) {
            this.setSourceMapRange(templateLiteral, head.range);
        }
        return ts.createTaggedTemplate(tag, templateLiteral);
    }
    createUnaryExpression(operator, operand) {
        return ts.createPrefix(UNARY_OPERATORS[operator], operand);
    }
    createVariableDeclaration(variableName, initializer, type) {
        return ts.createVariableStatement(undefined, ts.createVariableDeclarationList([ts.createVariableDeclaration(variableName, undefined, initializer !== null && initializer !== void 0 ? initializer : undefined)], VAR_TYPES[type]));
    }
    setSourceMapRange(node, sourceMapRange) {
        if (sourceMapRange === null) {
            return node;
        }
        const url = sourceMapRange.url;
        if (!this.externalSourceFiles.has(url)) {
            this.externalSourceFiles.set(url, ts.createSourceMapSource(url, sourceMapRange.content, pos => pos));
        }
        const source = this.externalSourceFiles.get(url);
        ts.setSourceMapRange(node, { pos: sourceMapRange.start.offset, end: sourceMapRange.end.offset, source });
        return node;
    }
}
// HACK: Use this in place of `ts.createTemplateMiddle()`.
// Revert once https://github.com/microsoft/TypeScript/issues/35374 is fixed.
export function createTemplateMiddle(cooked, raw) {
    const node = ts.createTemplateHead(cooked, raw);
    node.kind = ts.SyntaxKind.TemplateMiddle;
    return node;
}
// HACK: Use this in place of `ts.createTemplateTail()`.
// Revert once https://github.com/microsoft/TypeScript/issues/35374 is fixed.
export function createTemplateTail(cooked, raw) {
    const node = ts.createTemplateHead(cooked, raw);
    node.kind = ts.SyntaxKind.TemplateTail;
    return node;
}
/**
 * Attach the given `leadingComments` to the `statement` node.
 *
 * @param statement The statement that will have comments attached.
 * @param leadingComments The comments to attach to the statement.
 */
export function attachComments(statement, leadingComments) {
    for (const comment of leadingComments) {
        const commentKind = comment.multiline ? ts.SyntaxKind.MultiLineCommentTrivia :
            ts.SyntaxKind.SingleLineCommentTrivia;
        if (comment.multiline) {
            ts.addSyntheticLeadingComment(statement, commentKind, comment.toString(), comment.trailingNewline);
        }
        else {
            for (const line of comment.toString().split('\n')) {
                ts.addSyntheticLeadingComment(statement, commentKind, line, comment.trailingNewline);
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,