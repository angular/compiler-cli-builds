/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@angular/compiler-cli/src/ngtsc/metadata/src/api", ["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tcGlsZXItY2xpL3NyYy9uZ3RzYy9tZXRhZGF0YS9zcmMvYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0RpcmVjdGl2ZU1ldGEgYXMgVDJEaXJlY3RpdmVNZXRhLCBTY2hlbWFNZXRhZGF0YX0gZnJvbSAnQGFuZ3VsYXIvY29tcGlsZXInO1xuaW1wb3J0ICogYXMgdHMgZnJvbSAndHlwZXNjcmlwdCc7XG5cbmltcG9ydCB7UmVmZXJlbmNlfSBmcm9tICcuLi8uLi9pbXBvcnRzJztcbmltcG9ydCB7Q2xhc3NEZWNsYXJhdGlvbn0gZnJvbSAnLi4vLi4vcmVmbGVjdGlvbic7XG5cblxuLyoqXG4gKiBNZXRhZGF0YSBjb2xsZWN0ZWQgZm9yIGFuIGBOZ01vZHVsZWAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmdNb2R1bGVNZXRhIHtcbiAgcmVmOiBSZWZlcmVuY2U8Q2xhc3NEZWNsYXJhdGlvbj47XG4gIGRlY2xhcmF0aW9uczogUmVmZXJlbmNlPENsYXNzRGVjbGFyYXRpb24+W107XG4gIGltcG9ydHM6IFJlZmVyZW5jZTxDbGFzc0RlY2xhcmF0aW9uPltdO1xuICBleHBvcnRzOiBSZWZlcmVuY2U8Q2xhc3NEZWNsYXJhdGlvbj5bXTtcbiAgc2NoZW1hczogU2NoZW1hTWV0YWRhdGFbXTtcblxuICAvKipcbiAgICogVGhlIHJhdyBgdHMuRXhwcmVzc2lvbmAgd2hpY2ggZ2F2ZSByaXNlIHRvIGBkZWNsYXJhdGlvbnNgLCBpZiBvbmUgZXhpc3RzLlxuICAgKlxuICAgKiBJZiB0aGlzIGlzIGBudWxsYCwgdGhlbiBlaXRoZXIgbm8gZGVjbGFyYXRpb25zIGV4aXN0LCBvciBubyBleHByZXNzaW9uIHdhcyBhdmFpbGFibGUgKGxpa2VseVxuICAgKiBiZWNhdXNlIHRoZSBtb2R1bGUgY2FtZSBmcm9tIGEgLmQudHMgZmlsZSkuXG4gICAqL1xuICByYXdEZWNsYXJhdGlvbnM6IHRzLkV4cHJlc3Npb258bnVsbDtcbn1cblxuLyoqXG4gKiBUeXBpbmcgbWV0YWRhdGEgY29sbGVjdGVkIGZvciBhIGRpcmVjdGl2ZSB3aXRoaW4gYW4gTmdNb2R1bGUncyBzY29wZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEaXJlY3RpdmVUeXBlQ2hlY2tNZXRhIHtcbiAgLyoqXG4gICAqIExpc3Qgb2Ygc3RhdGljIGBuZ1RlbXBsYXRlR3VhcmRfeHhgIG1lbWJlcnMgZm91bmQgb24gdGhlIERpcmVjdGl2ZSdzIGNsYXNzLlxuICAgKiBAc2VlIGBUZW1wbGF0ZUd1YXJkTWV0YWBcbiAgICovXG4gIG5nVGVtcGxhdGVHdWFyZHM6IFRlbXBsYXRlR3VhcmRNZXRhW107XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIERpcmVjdGl2ZSdzIGNsYXNzIGhhcyBhIHN0YXRpYyBuZ1RlbXBsYXRlQ29udGV4dEd1YXJkIGZ1bmN0aW9uLlxuICAgKi9cbiAgaGFzTmdUZW1wbGF0ZUNvbnRleHRHdWFyZDogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhlIHNldCBvZiBpbnB1dCBmaWVsZHMgd2hpY2ggaGF2ZSBhIGNvcnJlc3BvbmRpbmcgc3RhdGljIGBuZ0FjY2VwdElucHV0VHlwZV9gIG9uIHRoZVxuICAgKiBEaXJlY3RpdmUncyBjbGFzcy4gVGhpcyBhbGxvd3MgaW5wdXRzIHRvIGFjY2VwdCBhIHdpZGVyIHJhbmdlIG9mIHR5cGVzIGFuZCBjb2VyY2UgdGhlIGlucHV0IHRvXG4gICAqIGEgbmFycm93ZXIgdHlwZSB3aXRoIGEgZ2V0dGVyL3NldHRlci4gU2VlIGh0dHBzOi8vYW5ndWxhci5pby9ndWlkZS90ZW1wbGF0ZS10eXBlY2hlY2suXG4gICAqL1xuICBjb2VyY2VkSW5wdXRGaWVsZHM6IFNldDxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBUaGUgc2V0IG9mIGlucHV0IGZpZWxkcyB3aGljaCBtYXAgdG8gYHJlYWRvbmx5YCwgYHByaXZhdGVgLCBvciBgcHJvdGVjdGVkYCBtZW1iZXJzIGluIHRoZVxuICAgKiBEaXJlY3RpdmUncyBjbGFzcy5cbiAgICovXG4gIHJlc3RyaWN0ZWRJbnB1dEZpZWxkczogU2V0PHN0cmluZz47XG5cbiAgLyoqXG4gICAqIFRoZSBzZXQgb2YgaW5wdXQgZmllbGRzIHdoaWNoIGFyZSBkZWNsYXJlZCBhcyBzdHJpbmcgbGl0ZXJhbCBtZW1iZXJzIGluIHRoZSBEaXJlY3RpdmUncyBjbGFzcy5cbiAgICogV2UgbmVlZCB0byB0cmFjayB0aGVzZSBzZXBhcmF0ZWx5IGJlY2F1c2UgdGhlc2UgZmllbGRzIG1heSBub3QgYmUgdmFsaWQgSlMgaWRlbnRpZmllcnMgc29cbiAgICogd2UgY2Fubm90IHVzZSB0aGVtIHdpdGggcHJvcGVydHkgYWNjZXNzIGV4cHJlc3Npb25zIHdoZW4gYXNzaWduaW5nIGlucHV0cy5cbiAgICovXG4gIHN0cmluZ0xpdGVyYWxJbnB1dEZpZWxkczogU2V0PHN0cmluZz47XG5cbiAgLyoqXG4gICAqIFRoZSBzZXQgb2YgaW5wdXQgZmllbGRzIHdoaWNoIGRvIG5vdCBoYXZlIGNvcnJlc3BvbmRpbmcgbWVtYmVycyBpbiB0aGUgRGlyZWN0aXZlJ3MgY2xhc3MuXG4gICAqL1xuICB1bmRlY2xhcmVkSW5wdXRGaWVsZHM6IFNldDxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBEaXJlY3RpdmUncyBjbGFzcyBpcyBnZW5lcmljLCBpLmUuIGBjbGFzcyBNeURpcjxUPiB7Li4ufWAuXG4gICAqL1xuICBpc0dlbmVyaWM6IGJvb2xlYW47XG59XG5cbi8qKlxuICogTWV0YWRhdGEgY29sbGVjdGVkIGZvciBhIGRpcmVjdGl2ZSB3aXRoaW4gYW4gTmdNb2R1bGUncyBzY29wZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEaXJlY3RpdmVNZXRhIGV4dGVuZHMgVDJEaXJlY3RpdmVNZXRhLCBEaXJlY3RpdmVUeXBlQ2hlY2tNZXRhIHtcbiAgcmVmOiBSZWZlcmVuY2U8Q2xhc3NEZWNsYXJhdGlvbj47XG4gIC8qKlxuICAgKiBVbnBhcnNlZCBzZWxlY3RvciBvZiB0aGUgZGlyZWN0aXZlLCBvciBudWxsIGlmIHRoZSBkaXJlY3RpdmUgZG9lcyBub3QgaGF2ZSBhIHNlbGVjdG9yLlxuICAgKi9cbiAgc2VsZWN0b3I6IHN0cmluZ3xudWxsO1xuICBxdWVyaWVzOiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogQSBgUmVmZXJlbmNlYCB0byB0aGUgYmFzZSBjbGFzcyBmb3IgdGhlIGRpcmVjdGl2ZSwgaWYgb25lIHdhcyBkZXRlY3RlZC5cbiAgICpcbiAgICogQSB2YWx1ZSBvZiBgJ2R5bmFtaWMnYCBpbmRpY2F0ZXMgdGhhdCB3aGlsZSB0aGUgYW5hbHl6ZXIgZGV0ZWN0ZWQgdGhhdCB0aGlzIGRpcmVjdGl2ZSBleHRlbmRzXG4gICAqIGFub3RoZXIgdHlwZSwgaXQgY291bGQgbm90IHN0YXRpY2FsbHkgZGV0ZXJtaW5lIHRoZSBiYXNlIGNsYXNzLlxuICAgKi9cbiAgYmFzZUNsYXNzOiBSZWZlcmVuY2U8Q2xhc3NEZWNsYXJhdGlvbj58J2R5bmFtaWMnfG51bGw7XG59XG5cbi8qKlxuICogTWV0YWRhdGEgdGhhdCBkZXNjcmliZXMgYSB0ZW1wbGF0ZSBndWFyZCBmb3Igb25lIG9mIHRoZSBkaXJlY3RpdmUncyBpbnB1dHMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGVtcGxhdGVHdWFyZE1ldGEge1xuICAvKipcbiAgICogVGhlIGlucHV0IG5hbWUgdGhhdCB0aGlzIGd1YXJkIHNob3VsZCBiZSBhcHBsaWVkIHRvLlxuICAgKi9cbiAgaW5wdXROYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFJlcHJlc2VudHMgdGhlIHR5cGUgb2YgdGhlIHRlbXBsYXRlIGd1YXJkLlxuICAgKlxuICAgKiAtICdpbnZvY2F0aW9uJyBtZWFucyB0aGF0IGEgY2FsbCB0byB0aGUgdGVtcGxhdGUgZ3VhcmQgZnVuY3Rpb24gaXMgZW1pdHRlZCBzbyB0aGF0IGl0cyByZXR1cm5cbiAgICogICB0eXBlIGNhbiByZXN1bHQgaW4gbmFycm93aW5nIG9mIHRoZSBpbnB1dCB0eXBlLlxuICAgKiAtICdiaW5kaW5nJyBtZWFucyB0aGF0IHRoZSBpbnB1dCBiaW5kaW5nIGV4cHJlc3Npb24gaXRzZWxmIGlzIHVzZWQgYXMgdGVtcGxhdGUgZ3VhcmQuXG4gICAqL1xuICB0eXBlOiAnaW52b2NhdGlvbid8J2JpbmRpbmcnO1xufVxuXG4vKipcbiAqIE1ldGFkYXRhIGZvciBhIHBpcGUgd2l0aGluIGFuIE5nTW9kdWxlJ3Mgc2NvcGUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGlwZU1ldGEge1xuICByZWY6IFJlZmVyZW5jZTxDbGFzc0RlY2xhcmF0aW9uPjtcbiAgbmFtZTogc3RyaW5nO1xufVxuXG4vKipcbiAqIFJlYWRzIG1ldGFkYXRhIGZvciBkaXJlY3RpdmVzLCBwaXBlcywgYW5kIG1vZHVsZXMgZnJvbSBhIHBhcnRpY3VsYXIgc291cmNlLCBzdWNoIGFzIC5kLnRzIGZpbGVzXG4gKiBvciBhIHJlZ2lzdHJ5LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1ldGFkYXRhUmVhZGVyIHtcbiAgZ2V0RGlyZWN0aXZlTWV0YWRhdGEobm9kZTogUmVmZXJlbmNlPENsYXNzRGVjbGFyYXRpb24+KTogRGlyZWN0aXZlTWV0YXxudWxsO1xuICBnZXROZ01vZHVsZU1ldGFkYXRhKG5vZGU6IFJlZmVyZW5jZTxDbGFzc0RlY2xhcmF0aW9uPik6IE5nTW9kdWxlTWV0YXxudWxsO1xuICBnZXRQaXBlTWV0YWRhdGEobm9kZTogUmVmZXJlbmNlPENsYXNzRGVjbGFyYXRpb24+KTogUGlwZU1ldGF8bnVsbDtcbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgbmV3IG1ldGFkYXRhIGZvciBkaXJlY3RpdmVzLCBwaXBlcywgYW5kIG1vZHVsZXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWV0YWRhdGFSZWdpc3RyeSB7XG4gIHJlZ2lzdGVyRGlyZWN0aXZlTWV0YWRhdGEobWV0YTogRGlyZWN0aXZlTWV0YSk6IHZvaWQ7XG4gIHJlZ2lzdGVyTmdNb2R1bGVNZXRhZGF0YShtZXRhOiBOZ01vZHVsZU1ldGEpOiB2b2lkO1xuICByZWdpc3RlclBpcGVNZXRhZGF0YShtZXRhOiBQaXBlTWV0YSk6IHZvaWQ7XG59XG4iXX0=