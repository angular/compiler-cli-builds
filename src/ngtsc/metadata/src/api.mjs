/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
export var MetaType;
(function (MetaType) {
    MetaType[MetaType["Pipe"] = 0] = "Pipe";
    MetaType[MetaType["Directive"] = 1] = "Directive";
})(MetaType || (MetaType = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tcGlsZXItY2xpL3NyYy9uZ3RzYy9tZXRhZGF0YS9zcmMvYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQTRFSCxNQUFNLENBQU4sSUFBWSxRQUdYO0FBSEQsV0FBWSxRQUFRO0lBQ2xCLHVDQUFJLENBQUE7SUFDSixpREFBUyxDQUFBO0FBQ1gsQ0FBQyxFQUhXLFFBQVEsS0FBUixRQUFRLFFBR25CIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7RGlyZWN0aXZlTWV0YSBhcyBUMkRpcmVjdGl2ZU1ldGEsIFNjaGVtYU1ldGFkYXRhfSBmcm9tICdAYW5ndWxhci9jb21waWxlcic7XG5pbXBvcnQgKiBhcyB0cyBmcm9tICd0eXBlc2NyaXB0JztcblxuaW1wb3J0IHtSZWZlcmVuY2V9IGZyb20gJy4uLy4uL2ltcG9ydHMnO1xuaW1wb3J0IHtDbGFzc0RlY2xhcmF0aW9ufSBmcm9tICcuLi8uLi9yZWZsZWN0aW9uJztcblxuaW1wb3J0IHtDbGFzc1Byb3BlcnR5TWFwcGluZywgQ2xhc3NQcm9wZXJ0eU5hbWV9IGZyb20gJy4vcHJvcGVydHlfbWFwcGluZyc7XG5cblxuLyoqXG4gKiBNZXRhZGF0YSBjb2xsZWN0ZWQgZm9yIGFuIGBOZ01vZHVsZWAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmdNb2R1bGVNZXRhIHtcbiAgcmVmOiBSZWZlcmVuY2U8Q2xhc3NEZWNsYXJhdGlvbj47XG4gIGRlY2xhcmF0aW9uczogUmVmZXJlbmNlPENsYXNzRGVjbGFyYXRpb24+W107XG4gIGltcG9ydHM6IFJlZmVyZW5jZTxDbGFzc0RlY2xhcmF0aW9uPltdO1xuICBleHBvcnRzOiBSZWZlcmVuY2U8Q2xhc3NEZWNsYXJhdGlvbj5bXTtcbiAgc2NoZW1hczogU2NoZW1hTWV0YWRhdGFbXTtcblxuICAvKipcbiAgICogVGhlIHJhdyBgdHMuRXhwcmVzc2lvbmAgd2hpY2ggZ2F2ZSByaXNlIHRvIGBkZWNsYXJhdGlvbnNgLCBpZiBvbmUgZXhpc3RzLlxuICAgKlxuICAgKiBJZiB0aGlzIGlzIGBudWxsYCwgdGhlbiBlaXRoZXIgbm8gZGVjbGFyYXRpb25zIGV4aXN0LCBvciBubyBleHByZXNzaW9uIHdhcyBhdmFpbGFibGUgKGxpa2VseVxuICAgKiBiZWNhdXNlIHRoZSBtb2R1bGUgY2FtZSBmcm9tIGEgLmQudHMgZmlsZSkuXG4gICAqL1xuICByYXdEZWNsYXJhdGlvbnM6IHRzLkV4cHJlc3Npb258bnVsbDtcbn1cblxuLyoqXG4gKiBUeXBpbmcgbWV0YWRhdGEgY29sbGVjdGVkIGZvciBhIGRpcmVjdGl2ZSB3aXRoaW4gYW4gTmdNb2R1bGUncyBzY29wZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEaXJlY3RpdmVUeXBlQ2hlY2tNZXRhIHtcbiAgLyoqXG4gICAqIExpc3Qgb2Ygc3RhdGljIGBuZ1RlbXBsYXRlR3VhcmRfeHhgIG1lbWJlcnMgZm91bmQgb24gdGhlIERpcmVjdGl2ZSdzIGNsYXNzLlxuICAgKiBAc2VlIGBUZW1wbGF0ZUd1YXJkTWV0YWBcbiAgICovXG4gIG5nVGVtcGxhdGVHdWFyZHM6IFRlbXBsYXRlR3VhcmRNZXRhW107XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIERpcmVjdGl2ZSdzIGNsYXNzIGhhcyBhIHN0YXRpYyBuZ1RlbXBsYXRlQ29udGV4dEd1YXJkIGZ1bmN0aW9uLlxuICAgKi9cbiAgaGFzTmdUZW1wbGF0ZUNvbnRleHRHdWFyZDogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhlIHNldCBvZiBpbnB1dCBmaWVsZHMgd2hpY2ggaGF2ZSBhIGNvcnJlc3BvbmRpbmcgc3RhdGljIGBuZ0FjY2VwdElucHV0VHlwZV9gIG9uIHRoZVxuICAgKiBEaXJlY3RpdmUncyBjbGFzcy4gVGhpcyBhbGxvd3MgaW5wdXRzIHRvIGFjY2VwdCBhIHdpZGVyIHJhbmdlIG9mIHR5cGVzIGFuZCBjb2VyY2UgdGhlIGlucHV0IHRvXG4gICAqIGEgbmFycm93ZXIgdHlwZSB3aXRoIGEgZ2V0dGVyL3NldHRlci4gU2VlIGh0dHBzOi8vYW5ndWxhci5pby9ndWlkZS90ZW1wbGF0ZS10eXBlY2hlY2suXG4gICAqL1xuICBjb2VyY2VkSW5wdXRGaWVsZHM6IFNldDxDbGFzc1Byb3BlcnR5TmFtZT47XG5cbiAgLyoqXG4gICAqIFRoZSBzZXQgb2YgaW5wdXQgZmllbGRzIHdoaWNoIG1hcCB0byBgcmVhZG9ubHlgLCBgcHJpdmF0ZWAsIG9yIGBwcm90ZWN0ZWRgIG1lbWJlcnMgaW4gdGhlXG4gICAqIERpcmVjdGl2ZSdzIGNsYXNzLlxuICAgKi9cbiAgcmVzdHJpY3RlZElucHV0RmllbGRzOiBTZXQ8Q2xhc3NQcm9wZXJ0eU5hbWU+O1xuXG4gIC8qKlxuICAgKiBUaGUgc2V0IG9mIGlucHV0IGZpZWxkcyB3aGljaCBhcmUgZGVjbGFyZWQgYXMgc3RyaW5nIGxpdGVyYWwgbWVtYmVycyBpbiB0aGUgRGlyZWN0aXZlJ3MgY2xhc3MuXG4gICAqIFdlIG5lZWQgdG8gdHJhY2sgdGhlc2Ugc2VwYXJhdGVseSBiZWNhdXNlIHRoZXNlIGZpZWxkcyBtYXkgbm90IGJlIHZhbGlkIEpTIGlkZW50aWZpZXJzIHNvXG4gICAqIHdlIGNhbm5vdCB1c2UgdGhlbSB3aXRoIHByb3BlcnR5IGFjY2VzcyBleHByZXNzaW9ucyB3aGVuIGFzc2lnbmluZyBpbnB1dHMuXG4gICAqL1xuICBzdHJpbmdMaXRlcmFsSW5wdXRGaWVsZHM6IFNldDxDbGFzc1Byb3BlcnR5TmFtZT47XG5cbiAgLyoqXG4gICAqIFRoZSBzZXQgb2YgaW5wdXQgZmllbGRzIHdoaWNoIGRvIG5vdCBoYXZlIGNvcnJlc3BvbmRpbmcgbWVtYmVycyBpbiB0aGUgRGlyZWN0aXZlJ3MgY2xhc3MuXG4gICAqL1xuICB1bmRlY2xhcmVkSW5wdXRGaWVsZHM6IFNldDxDbGFzc1Byb3BlcnR5TmFtZT47XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIERpcmVjdGl2ZSdzIGNsYXNzIGlzIGdlbmVyaWMsIGkuZS4gYGNsYXNzIE15RGlyPFQ+IHsuLi59YC5cbiAgICovXG4gIGlzR2VuZXJpYzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGVudW0gTWV0YVR5cGUge1xuICBQaXBlLFxuICBEaXJlY3RpdmUsXG59XG5cbi8qKlxuICogTWV0YWRhdGEgY29sbGVjdGVkIGZvciBhIGRpcmVjdGl2ZSB3aXRoaW4gYW4gTmdNb2R1bGUncyBzY29wZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEaXJlY3RpdmVNZXRhIGV4dGVuZHMgVDJEaXJlY3RpdmVNZXRhLCBEaXJlY3RpdmVUeXBlQ2hlY2tNZXRhIHtcbiAgdHlwZTogTWV0YVR5cGUuRGlyZWN0aXZlO1xuXG4gIHJlZjogUmVmZXJlbmNlPENsYXNzRGVjbGFyYXRpb24+O1xuICAvKipcbiAgICogVW5wYXJzZWQgc2VsZWN0b3Igb2YgdGhlIGRpcmVjdGl2ZSwgb3IgbnVsbCBpZiB0aGUgZGlyZWN0aXZlIGRvZXMgbm90IGhhdmUgYSBzZWxlY3Rvci5cbiAgICovXG4gIHNlbGVjdG9yOiBzdHJpbmd8bnVsbDtcbiAgcXVlcmllczogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIEEgbWFwcGluZyBvZiBpbnB1dCBmaWVsZCBuYW1lcyB0byB0aGUgcHJvcGVydHkgbmFtZXMuXG4gICAqL1xuICBpbnB1dHM6IENsYXNzUHJvcGVydHlNYXBwaW5nO1xuXG4gIC8qKlxuICAgKiBBIG1hcHBpbmcgb2Ygb3V0cHV0IGZpZWxkIG5hbWVzIHRvIHRoZSBwcm9wZXJ0eSBuYW1lcy5cbiAgICovXG4gIG91dHB1dHM6IENsYXNzUHJvcGVydHlNYXBwaW5nO1xuXG4gIC8qKlxuICAgKiBBIGBSZWZlcmVuY2VgIHRvIHRoZSBiYXNlIGNsYXNzIGZvciB0aGUgZGlyZWN0aXZlLCBpZiBvbmUgd2FzIGRldGVjdGVkLlxuICAgKlxuICAgKiBBIHZhbHVlIG9mIGAnZHluYW1pYydgIGluZGljYXRlcyB0aGF0IHdoaWxlIHRoZSBhbmFseXplciBkZXRlY3RlZCB0aGF0IHRoaXMgZGlyZWN0aXZlIGV4dGVuZHNcbiAgICogYW5vdGhlciB0eXBlLCBpdCBjb3VsZCBub3Qgc3RhdGljYWxseSBkZXRlcm1pbmUgdGhlIGJhc2UgY2xhc3MuXG4gICAqL1xuICBiYXNlQ2xhc3M6IFJlZmVyZW5jZTxDbGFzc0RlY2xhcmF0aW9uPnwnZHluYW1pYyd8bnVsbDtcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgZGlyZWN0aXZlIGhhZCBzb21lIGlzc3VlIHdpdGggaXRzIGRlY2xhcmF0aW9uIHRoYXQgbWVhbnMgaXQgbWlnaHQgbm90IGhhdmUgY29tcGxldGVcbiAgICogYW5kIHJlbGlhYmxlIG1ldGFkYXRhLlxuICAgKi9cbiAgaXNQb2lzb25lZDogYm9vbGVhbjtcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgZGlyZWN0aXZlIGlzIGxpa2VseSBhIHN0cnVjdHVyYWwgZGlyZWN0aXZlIChpbmplY3RzIGBUZW1wbGF0ZVJlZmApLlxuICAgKi9cbiAgaXNTdHJ1Y3R1cmFsOiBib29sZWFuO1xufVxuXG4vKipcbiAqIE1ldGFkYXRhIHRoYXQgZGVzY3JpYmVzIGEgdGVtcGxhdGUgZ3VhcmQgZm9yIG9uZSBvZiB0aGUgZGlyZWN0aXZlJ3MgaW5wdXRzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRlbXBsYXRlR3VhcmRNZXRhIHtcbiAgLyoqXG4gICAqIFRoZSBpbnB1dCBuYW1lIHRoYXQgdGhpcyBndWFyZCBzaG91bGQgYmUgYXBwbGllZCB0by5cbiAgICovXG4gIGlucHV0TmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBSZXByZXNlbnRzIHRoZSB0eXBlIG9mIHRoZSB0ZW1wbGF0ZSBndWFyZC5cbiAgICpcbiAgICogLSAnaW52b2NhdGlvbicgbWVhbnMgdGhhdCBhIGNhbGwgdG8gdGhlIHRlbXBsYXRlIGd1YXJkIGZ1bmN0aW9uIGlzIGVtaXR0ZWQgc28gdGhhdCBpdHMgcmV0dXJuXG4gICAqICAgdHlwZSBjYW4gcmVzdWx0IGluIG5hcnJvd2luZyBvZiB0aGUgaW5wdXQgdHlwZS5cbiAgICogLSAnYmluZGluZycgbWVhbnMgdGhhdCB0aGUgaW5wdXQgYmluZGluZyBleHByZXNzaW9uIGl0c2VsZiBpcyB1c2VkIGFzIHRlbXBsYXRlIGd1YXJkLlxuICAgKi9cbiAgdHlwZTogJ2ludm9jYXRpb24nfCdiaW5kaW5nJztcbn1cblxuLyoqXG4gKiBNZXRhZGF0YSBmb3IgYSBwaXBlIHdpdGhpbiBhbiBOZ01vZHVsZSdzIHNjb3BlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBpcGVNZXRhIHtcbiAgdHlwZTogTWV0YVR5cGUuUGlwZTtcbiAgcmVmOiBSZWZlcmVuY2U8Q2xhc3NEZWNsYXJhdGlvbj47XG4gIG5hbWU6IHN0cmluZztcbiAgbmFtZUV4cHI6IHRzLkV4cHJlc3Npb258bnVsbDtcbn1cblxuLyoqXG4gKiBSZWFkcyBtZXRhZGF0YSBmb3IgZGlyZWN0aXZlcywgcGlwZXMsIGFuZCBtb2R1bGVzIGZyb20gYSBwYXJ0aWN1bGFyIHNvdXJjZSwgc3VjaCBhcyAuZC50cyBmaWxlc1xuICogb3IgYSByZWdpc3RyeS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNZXRhZGF0YVJlYWRlciB7XG4gIGdldERpcmVjdGl2ZU1ldGFkYXRhKG5vZGU6IFJlZmVyZW5jZTxDbGFzc0RlY2xhcmF0aW9uPik6IERpcmVjdGl2ZU1ldGF8bnVsbDtcbiAgZ2V0TmdNb2R1bGVNZXRhZGF0YShub2RlOiBSZWZlcmVuY2U8Q2xhc3NEZWNsYXJhdGlvbj4pOiBOZ01vZHVsZU1ldGF8bnVsbDtcbiAgZ2V0UGlwZU1ldGFkYXRhKG5vZGU6IFJlZmVyZW5jZTxDbGFzc0RlY2xhcmF0aW9uPik6IFBpcGVNZXRhfG51bGw7XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzIG5ldyBtZXRhZGF0YSBmb3IgZGlyZWN0aXZlcywgcGlwZXMsIGFuZCBtb2R1bGVzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1ldGFkYXRhUmVnaXN0cnkge1xuICByZWdpc3RlckRpcmVjdGl2ZU1ldGFkYXRhKG1ldGE6IERpcmVjdGl2ZU1ldGEpOiB2b2lkO1xuICByZWdpc3Rlck5nTW9kdWxlTWV0YWRhdGEobWV0YTogTmdNb2R1bGVNZXRhKTogdm9pZDtcbiAgcmVnaXN0ZXJQaXBlTWV0YWRhdGEobWV0YTogUGlwZU1ldGEpOiB2b2lkO1xufVxuIl19