(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@angular/compiler-cli/src/ngtsc/incremental/semantic_graph/src/api", ["require", "exports", "typescript", "@angular/compiler-cli/src/ngtsc/file_system"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SemanticSymbol = void 0;
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var ts = require("typescript");
    var file_system_1 = require("@angular/compiler-cli/src/ngtsc/file_system");
    /**
     * Represents a symbol that is recognizable across incremental rebuilds, which enables the captured
     * metadata to be compared to the prior compilation. This allows for semantic understanding of
     * the changes that have been made in a rebuild, which potentially enables more reuse of work
     * from the prior compilation.
     */
    var SemanticSymbol = /** @class */ (function () {
        function SemanticSymbol(
        /**
         * The declaration for this symbol.
         */
        decl) {
            this.decl = decl;
            this.path = (0, file_system_1.absoluteFromSourceFile)(decl.getSourceFile());
            this.identifier = getSymbolIdentifier(decl);
        }
        return SemanticSymbol;
    }());
    exports.SemanticSymbol = SemanticSymbol;
    function getSymbolIdentifier(decl) {
        if (!ts.isSourceFile(decl.parent)) {
            return null;
        }
        // If this is a top-level class declaration, the class name is used as unique identifier.
        // Other scenarios are currently not supported and causes the symbol not to be identified
        // across rebuilds, unless the declaration node has not changed.
        return decl.name.text;
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tcGlsZXItY2xpL3NyYy9uZ3RzYy9pbmNyZW1lbnRhbC9zZW1hbnRpY19ncmFwaC9zcmMvYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztJQUFBOzs7Ozs7T0FNRztJQUNILCtCQUFpQztJQUVqQywyRUFBNEU7SUFHNUU7Ozs7O09BS0c7SUFDSDtRQWlCRTtRQUNJOztXQUVHO1FBQ2EsSUFBc0I7WUFBdEIsU0FBSSxHQUFKLElBQUksQ0FBa0I7WUFFeEMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFBLG9DQUFzQixFQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO1lBQ3pELElBQUksQ0FBQyxVQUFVLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUMsQ0FBQztRQXVESCxxQkFBQztJQUFELENBQUMsQUFoRkQsSUFnRkM7SUFoRnFCLHdDQUFjO0lBbUdwQyxTQUFTLG1CQUFtQixDQUFDLElBQXNCO1FBQ2pELElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNqQyxPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQseUZBQXlGO1FBQ3pGLHlGQUF5RjtRQUN6RixnRUFBZ0U7UUFDaEUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztJQUN4QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgKiBhcyB0cyBmcm9tICd0eXBlc2NyaXB0JztcblxuaW1wb3J0IHthYnNvbHV0ZUZyb21Tb3VyY2VGaWxlLCBBYnNvbHV0ZUZzUGF0aH0gZnJvbSAnLi4vLi4vLi4vZmlsZV9zeXN0ZW0nO1xuaW1wb3J0IHtDbGFzc0RlY2xhcmF0aW9ufSBmcm9tICcuLi8uLi8uLi9yZWZsZWN0aW9uJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgc3ltYm9sIHRoYXQgaXMgcmVjb2duaXphYmxlIGFjcm9zcyBpbmNyZW1lbnRhbCByZWJ1aWxkcywgd2hpY2ggZW5hYmxlcyB0aGUgY2FwdHVyZWRcbiAqIG1ldGFkYXRhIHRvIGJlIGNvbXBhcmVkIHRvIHRoZSBwcmlvciBjb21waWxhdGlvbi4gVGhpcyBhbGxvd3MgZm9yIHNlbWFudGljIHVuZGVyc3RhbmRpbmcgb2ZcbiAqIHRoZSBjaGFuZ2VzIHRoYXQgaGF2ZSBiZWVuIG1hZGUgaW4gYSByZWJ1aWxkLCB3aGljaCBwb3RlbnRpYWxseSBlbmFibGVzIG1vcmUgcmV1c2Ugb2Ygd29ya1xuICogZnJvbSB0aGUgcHJpb3IgY29tcGlsYXRpb24uXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTZW1hbnRpY1N5bWJvbCB7XG4gIC8qKlxuICAgKiBUaGUgcGF0aCBvZiB0aGUgZmlsZSB0aGF0IGRlY2xhcmVzIHRoaXMgc3ltYm9sLlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IHBhdGg6IEFic29sdXRlRnNQYXRoO1xuXG4gIC8qKlxuICAgKiBUaGUgaWRlbnRpZmllciBvZiB0aGlzIHN5bWJvbCwgb3IgbnVsbCBpZiBubyBpZGVudGlmaWVyIGNvdWxkIGJlIGRldGVybWluZWQuIEl0IHNob3VsZFxuICAgKiB1bmlxdWVseSBpZGVudGlmeSB0aGUgc3ltYm9sIHJlbGF0aXZlIHRvIGBmaWxlYC4gVGhpcyBpcyB0eXBpY2FsbHkganVzdCB0aGUgbmFtZSBvZiBhXG4gICAqIHRvcC1sZXZlbCBjbGFzcyBkZWNsYXJhdGlvbiwgYXMgdGhhdCB1bmlxdWVseSBpZGVudGlmaWVzIHRoZSBjbGFzcyB3aXRoaW4gdGhlIGZpbGUuXG4gICAqXG4gICAqIElmIHRoZSBpZGVudGlmaWVyIGlzIG51bGwsIHRoZW4gdGhpcyBzeW1ib2wgY2Fubm90IGJlIHJlY29nbml6ZWQgYWNyb3NzIHJlYnVpbGRzLiBJbiB0aGF0XG4gICAqIGNhc2UsIHRoZSBzeW1ib2wgaXMgYWx3YXlzIGFzc3VtZWQgdG8gaGF2ZSBzZW1hbnRpY2FsbHkgY2hhbmdlZCB0byBndWFyYW50ZWUgYSBwcm9wZXJcbiAgICogcmVidWlsZC5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBpZGVudGlmaWVyOiBzdHJpbmd8bnVsbDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIC8qKlxuICAgICAgICogVGhlIGRlY2xhcmF0aW9uIGZvciB0aGlzIHN5bWJvbC5cbiAgICAgICAqL1xuICAgICAgcHVibGljIHJlYWRvbmx5IGRlY2w6IENsYXNzRGVjbGFyYXRpb24sXG4gICkge1xuICAgIHRoaXMucGF0aCA9IGFic29sdXRlRnJvbVNvdXJjZUZpbGUoZGVjbC5nZXRTb3VyY2VGaWxlKCkpO1xuICAgIHRoaXMuaWRlbnRpZmllciA9IGdldFN5bWJvbElkZW50aWZpZXIoZGVjbCk7XG4gIH1cblxuICAvKipcbiAgICogQWxsb3dzIHRoZSBzeW1ib2wgdG8gYmUgY29tcGFyZWQgdG8gdGhlIGVxdWl2YWxlbnQgc3ltYm9sIGluIHRoZSBwcmV2aW91cyBjb21waWxhdGlvbi4gVGhlXG4gICAqIHJldHVybiB2YWx1ZSBpbmRpY2F0ZXMgd2hldGhlciB0aGUgc3ltYm9sIGhhcyBiZWVuIGNoYW5nZWQgaW4gYSB3YXkgc3VjaCB0aGF0IGl0cyBwdWJsaWMgQVBJXG4gICAqIGlzIGFmZmVjdGVkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBkZXRlcm1pbmVzIHdoZXRoZXIgYSBjaGFuZ2UgdG8gX3RoaXNfIHN5bWJvbCByZXF1aXJlIHRoZSBzeW1ib2xzIHRoYXRcbiAgICogdXNlIHRvIHRoaXMgc3ltYm9sIHRvIGJlIHJlLWVtaXR0ZWQuXG4gICAqXG4gICAqIE5vdGU6IGBwcmV2aW91c1N5bWJvbGAgaXMgb2J0YWluZWQgZnJvbSB0aGUgbW9zdCByZWNlbnRseSBzdWNjZWVkZWQgY29tcGlsYXRpb24uIFN5bWJvbHMgb2ZcbiAgICogZmFpbGVkIGNvbXBpbGF0aW9ucyBhcmUgbmV2ZXIgcHJvdmlkZWQuXG4gICAqXG4gICAqIEBwYXJhbSBwcmV2aW91c1N5bWJvbCBUaGUgc3ltYm9sIGZyb20gYSBwcmlvciBjb21waWxhdGlvbi5cbiAgICovXG4gIGFic3RyYWN0IGlzUHVibGljQXBpQWZmZWN0ZWQocHJldmlvdXNTeW1ib2w6IFNlbWFudGljU3ltYm9sKTogYm9vbGVhbjtcblxuICAvKipcbiAgICogQWxsb3dzIHRoZSBzeW1ib2wgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgaXRzIGVtaXQgaXMgYWZmZWN0ZWQuIFRoZSBlcXVpdmFsZW50IHN5bWJvbCBmcm9tIGEgcHJpb3JcbiAgICogYnVpbGQgaXMgZ2l2ZW4sIGluIGFkZGl0aW9uIHRvIHRoZSBzZXQgb2Ygc3ltYm9scyBvZiB3aGljaCB0aGUgcHVibGljIEFQSSBoYXMgY2hhbmdlZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZGV0ZXJtaW5lcyB3aGV0aGVyIGEgY2hhbmdlIHRvIF9vdGhlcl8gc3ltYm9scywgaS5lLiB0aG9zZSBwcmVzZW50IGluXG4gICAqIGBwdWJsaWNBcGlBZmZlY3RlZGAsIHNob3VsZCBjYXVzZSBfdGhpc18gc3ltYm9sIHRvIGJlIHJlLWVtaXR0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSBwcmV2aW91c1N5bWJvbCBUaGUgZXF1aXZhbGVudCBzeW1ib2wgZnJvbSBhIHByaW9yIGNvbXBpbGF0aW9uLiBOb3RlIHRoYXQgaXQgbWF5IGJlIGFcbiAgICogZGlmZmVyZW50IHR5cGUgb2Ygc3ltYm9sLCBpZiBlLmcuIGEgQ29tcG9uZW50IHdhcyBjaGFuZ2VkIGludG8gYSBEaXJlY3RpdmUgd2l0aCB0aGUgc2FtZSBuYW1lLlxuICAgKiBAcGFyYW0gcHVibGljQXBpQWZmZWN0ZWQgVGhlIHNldCBvZiBzeW1ib2xzIG9mIHdoaWNoIHRoZSBwdWJsaWMgQVBJIGhhcyBjaGFuZ2VkLlxuICAgKi9cbiAgaXNFbWl0QWZmZWN0ZWQ/KHByZXZpb3VzU3ltYm9sOiBTZW1hbnRpY1N5bWJvbCwgcHVibGljQXBpQWZmZWN0ZWQ6IFNldDxTZW1hbnRpY1N5bWJvbD4pOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBTaW1pbGFyIHRvIGBpc1B1YmxpY0FwaUFmZmVjdGVkYCwgYnV0IGhlcmUgZXF1aXZhbGVudCBzeW1ib2wgZnJvbSBhIHByaW9yIGNvbXBpbGF0aW9uIG5lZWRzXG4gICAqIHRvIGJlIGNvbXBhcmVkIHRvIHNlZSBpZiB0aGUgdHlwZS1jaGVjayBibG9jayBvZiBjb21wb25lbnRzIHRoYXQgdXNlIHRoaXMgc3ltYm9sIGlzIGFmZmVjdGVkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBkZXRlcm1pbmVzIHdoZXRoZXIgYSBjaGFuZ2UgdG8gX3RoaXNfIHN5bWJvbCByZXF1aXJlIHRoZSBzeW1ib2xzIHRoYXRcbiAgICogdXNlIHRvIHRoaXMgc3ltYm9sIHRvIGhhdmUgdGhlaXIgdHlwZS1jaGVjayBibG9jayByZWdlbmVyYXRlZC5cbiAgICpcbiAgICogTm90ZTogYHByZXZpb3VzU3ltYm9sYCBpcyBvYnRhaW5lZCBmcm9tIHRoZSBtb3N0IHJlY2VudGx5IHN1Y2NlZWRlZCBjb21waWxhdGlvbi4gU3ltYm9scyBvZlxuICAgKiBmYWlsZWQgY29tcGlsYXRpb25zIGFyZSBuZXZlciBwcm92aWRlZC5cbiAgICpcbiAgICogQHBhcmFtIHByZXZpb3VzU3ltYm9sIFRoZSBzeW1ib2wgZnJvbSBhIHByaW9yIGNvbXBpbGF0aW9uLlxuICAgKi9cbiAgYWJzdHJhY3QgaXNUeXBlQ2hlY2tBcGlBZmZlY3RlZChwcmV2aW91c1N5bWJvbDogU2VtYW50aWNTeW1ib2wpOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBTaW1pbGFyIHRvIGBpc0VtaXRBZmZlY3RlZGAsIGJ1dCBmb2N1c2VkIG9uIHRoZSB0eXBlLWNoZWNrIGJsb2NrIG9mIHRoaXMgc3ltYm9sLiBUaGlzIG1ldGhvZFxuICAgKiBkZXRlcm1pbmVzIHdoZXRoZXIgYSBjaGFuZ2UgdG8gX290aGVyXyBzeW1ib2xzLCBpLmUuIHRob3NlIHByZXNlbnQgaW4gYHR5cGVDaGVja0FwaUFmZmVjdGVkYCxcbiAgICogc2hvdWxkIGNhdXNlIF90aGlzXyBzeW1ib2wncyB0eXBlLWNoZWNrIGJsb2NrIHRvIGJlIHJlZ2VuZXJhdGVkLlxuICAgKlxuICAgKiBAcGFyYW0gcHJldmlvdXNTeW1ib2wgVGhlIGVxdWl2YWxlbnQgc3ltYm9sIGZyb20gYSBwcmlvciBjb21waWxhdGlvbi4gTm90ZSB0aGF0IGl0IG1heSBiZSBhXG4gICAqIGRpZmZlcmVudCB0eXBlIG9mIHN5bWJvbCwgaWYgZS5nLiBhIENvbXBvbmVudCB3YXMgY2hhbmdlZCBpbnRvIGEgRGlyZWN0aXZlIHdpdGggdGhlIHNhbWUgbmFtZS5cbiAgICogQHBhcmFtIHR5cGVDaGVja0FwaUFmZmVjdGVkIFRoZSBzZXQgb2Ygc3ltYm9scyBvZiB3aGljaCB0aGUgdHlwZS1jaGVjayBBUEkgaGFzIGNoYW5nZWQuXG4gICAqL1xuICBpc1R5cGVDaGVja0Jsb2NrQWZmZWN0ZWQ/XG4gICAgICAocHJldmlvdXNTeW1ib2w6IFNlbWFudGljU3ltYm9sLCB0eXBlQ2hlY2tBcGlBZmZlY3RlZDogU2V0PFNlbWFudGljU3ltYm9sPik6IGJvb2xlYW47XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHJlZmVyZW5jZSB0byBhIHNlbWFudGljIHN5bWJvbCB0aGF0IGhhcyBiZWVuIGVtaXR0ZWQgaW50byBhIHNvdXJjZSBmaWxlLiBUaGVcbiAqIHJlZmVyZW5jZSBtYXkgcmVmZXIgdG8gdGhlIHN5bWJvbCB1c2luZyBhIGRpZmZlcmVudCBuYW1lIHRoYW4gdGhlIHNlbWFudGljIHN5bWJvbCdzIGRlY2xhcmVkXG4gKiBuYW1lLCBlLmcuIGluIGNhc2UgYSByZS1leHBvcnQgdW5kZXIgYSBkaWZmZXJlbnQgbmFtZSB3YXMgY2hvc2VuIGJ5IGEgcmVmZXJlbmNlIGVtaXR0ZXIuXG4gKiBDb25zZXF1ZW50bHksIHRvIGtub3cgdGhhdCBhbiBlbWl0dGVkIHJlZmVyZW5jZSBpcyBzdGlsbCB2YWxpZCBub3Qgb25seSByZXF1aXJlcyB0aGF0IHRoZVxuICogc2VtYW50aWMgc3ltYm9sIGlzIHN0aWxsIHZhbGlkLCBidXQgYWxzbyB0aGF0IHRoZSBwYXRoIGJ5IHdoaWNoIHRoZSBzeW1ib2wgaXMgaW1wb3J0ZWQgaGFzIG5vdFxuICogY2hhbmdlZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZW1hbnRpY1JlZmVyZW5jZSB7XG4gIHN5bWJvbDogU2VtYW50aWNTeW1ib2w7XG5cbiAgLyoqXG4gICAqIFRoZSBwYXRoIGJ5IHdoaWNoIHRoZSBzeW1ib2wgaGFzIGJlZW4gcmVmZXJlbmNlZC5cbiAgICovXG4gIGltcG9ydFBhdGg6IHN0cmluZ3xudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRTeW1ib2xJZGVudGlmaWVyKGRlY2w6IENsYXNzRGVjbGFyYXRpb24pOiBzdHJpbmd8bnVsbCB7XG4gIGlmICghdHMuaXNTb3VyY2VGaWxlKGRlY2wucGFyZW50KSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gSWYgdGhpcyBpcyBhIHRvcC1sZXZlbCBjbGFzcyBkZWNsYXJhdGlvbiwgdGhlIGNsYXNzIG5hbWUgaXMgdXNlZCBhcyB1bmlxdWUgaWRlbnRpZmllci5cbiAgLy8gT3RoZXIgc2NlbmFyaW9zIGFyZSBjdXJyZW50bHkgbm90IHN1cHBvcnRlZCBhbmQgY2F1c2VzIHRoZSBzeW1ib2wgbm90IHRvIGJlIGlkZW50aWZpZWRcbiAgLy8gYWNyb3NzIHJlYnVpbGRzLCB1bmxlc3MgdGhlIGRlY2xhcmF0aW9uIG5vZGUgaGFzIG5vdCBjaGFuZ2VkLlxuICByZXR1cm4gZGVjbC5uYW1lLnRleHQ7XG59XG4iXX0=