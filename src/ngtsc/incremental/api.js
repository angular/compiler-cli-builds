/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@angular/compiler-cli/src/ngtsc/incremental/api", ["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NOOP_COMPONENT_RESOLUTION_REGISTRY = void 0;
    /**
     * A `ComponentResolutionRegistry` that does nothing, to be used when the information that is being
     * registered is not used.
     */
    exports.NOOP_COMPONENT_RESOLUTION_REGISTRY = {
        register: function () { }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tcGlsZXItY2xpL3NyYy9uZ3RzYy9pbmNyZW1lbnRhbC9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOzs7Ozs7Ozs7Ozs7O0lBeUVIOzs7T0FHRztJQUNVLFFBQUEsa0NBQWtDLEdBQWdDO1FBQzdFLFFBQVEsZ0JBQUksQ0FBQztLQUNkLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0ICogYXMgdHMgZnJvbSAndHlwZXNjcmlwdCc7XG5pbXBvcnQge0Fic29sdXRlRnNQYXRofSBmcm9tICcuLi9maWxlX3N5c3RlbSc7XG5pbXBvcnQge0NsYXNzRGVjbGFyYXRpb24sIERlY2xhcmF0aW9uTm9kZX0gZnJvbSAnLi4vcmVmbGVjdGlvbic7XG5cbi8qKlxuICogSW50ZXJmYWNlIG9mIHRoZSBpbmNyZW1lbnRhbCBidWlsZCBlbmdpbmUuXG4gKlxuICogYEFuYWx5c2lzVGAgaXMgYSBnZW5lcmljIHR5cGUgcmVwcmVzZW50aW5nIGEgdW5pdCBvZiB3b3JrLiBUaGlzIGlzIGdlbmVyaWMgdG8gYXZvaWQgYSBjeWNsaWNcbiAqIGRlcGVuZGVuY3kgYmV0d2VlbiB0aGUgaW5jcmVtZW50YWwgZW5naW5lIEFQSSBkZWZpbml0aW9uIGFuZCBpdHMgY29uc3VtZXIocykuXG4gKiBgRmlsZVR5cGVDaGVja0RhdGFUYCBpcyBhIGdlbmVyaWMgdHlwZSByZXByZXNlbnRpbmcgdGVtcGxhdGUgdHlwZS1jaGVja2luZyBkYXRhIGZvciBhIHBhcnRpY3VsYXJcbiAqIGlucHV0IGZpbGUsIHdoaWNoIGlzIGdlbmVyaWMgZm9yIHRoZSBzYW1lIHJlYXNvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbmNyZW1lbnRhbEJ1aWxkPEFuYWx5c2lzVCwgRmlsZVR5cGVDaGVja0RhdGFUPiB7XG4gIC8qKlxuICAgKiBSZXRyaWV2ZSB0aGUgcHJpb3IgYW5hbHlzaXMgd29yaywgaWYgYW55LCBkb25lIGZvciB0aGUgZ2l2ZW4gc291cmNlIGZpbGUuXG4gICAqL1xuICBwcmlvcldvcmtGb3Ioc2Y6IHRzLlNvdXJjZUZpbGUpOiBBbmFseXNpc1RbXXxudWxsO1xuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSB0aGUgcHJpb3IgdHlwZS1jaGVja2luZyB3b3JrLCBpZiBhbnksIHRoYXQncyBiZWVuIGRvbmUgZm9yIHRoZSBnaXZlbiBzb3VyY2UgZmlsZS5cbiAgICovXG4gIHByaW9yVHlwZUNoZWNraW5nUmVzdWx0c0ZvcihmaWxlU2Y6IHRzLlNvdXJjZUZpbGUpOiBGaWxlVHlwZUNoZWNrRGF0YVR8bnVsbDtcblxuICAvKipcbiAgICogUmVwb3J0cyB0aGF0IHRlbXBsYXRlIHR5cGUtY2hlY2tpbmcgaGFzIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHksIHdpdGggYSBtYXAgb2YgdHlwZS1jaGVja2luZ1xuICAgKiBkYXRhIGZvciBlYWNoIHVzZXIgZmlsZSB3aGljaCBjYW4gYmUgcmV1c2VkIGluIGEgZnV0dXJlIGluY3JlbWVudGFsIGl0ZXJhdGlvbi5cbiAgICovXG4gIHJlY29yZFN1Y2Nlc3NmdWxUeXBlQ2hlY2socmVzdWx0czogTWFwPEFic29sdXRlRnNQYXRoLCBGaWxlVHlwZUNoZWNrRGF0YVQ+KTogdm9pZDtcbn1cblxuLyoqXG4gKiBUcmFja3MgZGVwZW5kZW5jaWVzIGJldHdlZW4gc291cmNlIGZpbGVzIG9yIHJlc291cmNlcyBpbiB0aGUgYXBwbGljYXRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGVwZW5kZW5jeVRyYWNrZXI8VCBleHRlbmRzIHtmaWxlTmFtZTogc3RyaW5nfSA9IHRzLlNvdXJjZUZpbGU+IHtcbiAgLyoqXG4gICAqIFJlY29yZCB0aGF0IHRoZSBmaWxlIGBmcm9tYCBkZXBlbmRzIG9uIHRoZSBmaWxlIGBvbmAuXG4gICAqL1xuICBhZGREZXBlbmRlbmN5KGZyb206IFQsIG9uOiBUKTogdm9pZDtcblxuICAvKipcbiAgICogUmVjb3JkIHRoYXQgdGhlIGZpbGUgYGZyb21gIGRlcGVuZHMgb24gdGhlIHJlc291cmNlIGZpbGUgYG9uYC5cbiAgICovXG4gIGFkZFJlc291cmNlRGVwZW5kZW5jeShmcm9tOiBULCBvbjogQWJzb2x1dGVGc1BhdGgpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZWNvcmQgdGhhdCB0aGUgZ2l2ZW4gZmlsZSBjb250YWlucyB1bnJlc29sdmFibGUgZGVwZW5kZW5jaWVzLlxuICAgKlxuICAgKiBJbiBwcmFjdGljZSwgdGhpcyBtZWFucyB0aGF0IHRoZSBkZXBlbmRlbmN5IGdyYXBoIGNhbm5vdCBwcm92aWRlIGluc2lnaHQgaW50byB0aGUgZWZmZWN0cyBvZlxuICAgKiBmdXR1cmUgY2hhbmdlcyBvbiB0aGF0IGZpbGUuXG4gICAqL1xuICByZWNvcmREZXBlbmRlbmN5QW5hbHlzaXNGYWlsdXJlKGZpbGU6IFQpOiB2b2lkO1xufVxuXG4vKipcbiAqIENhcHR1cmVzIHRoZSByZXNvbHV0aW9uIGRhdGEgb2YgY29tcG9uZW50cyB0byBiZSBhYmxlIGRldGVybWluZSBpZiBhIGNvbXBvbmVudCdzIGVtaXQgaXNcbiAqIGFmZmVjdGVkIGJ5IHRoZSBjaGFuZ2VzIHRoYXQgd2VyZSBtYWRlIGluIGFuIGluY3JlbWVudGFsIHJlYnVpbGQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcG9uZW50UmVzb2x1dGlvblJlZ2lzdHJ5IHtcbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGNvbXBvbmVudCdzIHVzYWdlcyBpbiB0aGUgcmVnaXN0cnkuXG4gICAqXG4gICAqIEBwYXJhbSBjb21wb25lbnQgVGhlIGNvbXBvbmVudCBkZWNsYXJhdGlvbiB0byByZWdpc3Rlci5cbiAgICogQHBhcmFtIHVzZWREaXJlY3RpdmVzIFRoZSBkZWNsYXJhdGlvbnMgb2YgdGhlIGRpcmVjdGl2ZXMgdGhhdCBhcmUgdXNlZCBieSB0aGUgY29tcG9uZW50LlxuICAgKiBAcGFyYW0gdXNlZFBpcGVzIFRoZSBkZWNsYXJhdGlvbnMgb2YgdGhlIHBpcGVzIHRoYXQgYXJlIHVzZWQgYnkgdGhlIGNvbXBvbmVudC5cbiAgICogQHBhcmFtIGlzUmVtb3RlbHlTY29wZWQgV2hldGhlciB0aGUgY29tcG9uZW50IHJlcXVpcmVzIHJlbW90ZSBzY29waW5nLlxuICAgKi9cbiAgcmVnaXN0ZXIoXG4gICAgICBjb21wb25lbnQ6IENsYXNzRGVjbGFyYXRpb24sIHVzZWREaXJlY3RpdmVzOiBDbGFzc0RlY2xhcmF0aW9uW10sXG4gICAgICB1c2VkUGlwZXM6IENsYXNzRGVjbGFyYXRpb25bXSwgaXNSZW1vdGVseVNjb3BlZDogYm9vbGVhbik6IHZvaWQ7XG59XG5cbi8qKlxuICogQSBgQ29tcG9uZW50UmVzb2x1dGlvblJlZ2lzdHJ5YCB0aGF0IGRvZXMgbm90aGluZywgdG8gYmUgdXNlZCB3aGVuIHRoZSBpbmZvcm1hdGlvbiB0aGF0IGlzIGJlaW5nXG4gKiByZWdpc3RlcmVkIGlzIG5vdCB1c2VkLlxuICovXG5leHBvcnQgY29uc3QgTk9PUF9DT01QT05FTlRfUkVTT0xVVElPTl9SRUdJU1RSWTogQ29tcG9uZW50UmVzb2x1dGlvblJlZ2lzdHJ5ID0ge1xuICByZWdpc3RlcigpIHt9XG59O1xuIl19