/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const INDEX_HEADER = `/**
 * Generated bundle index. Do not edit.
 */
`;
export function privateEntriesToIndex(index, privates) {
    const results = [INDEX_HEADER];
    // Export all of the index symbols.
    results.push(`export * from '${index}';`, '');
    // Simplify the exports
    const exports = new Map();
    for (const entry of privates) {
        let entries = exports.get(entry.module);
        if (!entries) {
            entries = [];
            exports.set(entry.module, entries);
        }
        entries.push(entry);
    }
    const compareEntries = compare((e) => e.name);
    const compareModules = compare((e) => e[0]);
    const orderedExports = Array.from(exports)
        .map(([module, entries]) => [module, entries.sort(compareEntries)])
        .sort(compareModules);
    for (const [module, entries] of orderedExports) {
        let symbols = entries.map(e => `${e.name} as ${e.privateName}`);
        results.push(`export {${symbols}} from '${module}';`);
    }
    return results.join('\n');
}
function compare(select) {
    return (a, b) => {
        const ak = select(a);
        const bk = select(b);
        return ak > bk ? 1 : ak < bk ? -1 : 0;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXhfd3JpdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tcGlsZXItY2xpL3NyYy9tZXRhZGF0YS9pbmRleF93cml0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBSUgsTUFBTSxZQUFZLEdBQUc7OztDQUdwQixDQUFDO0FBSUYsTUFBTSxVQUFVLHFCQUFxQixDQUFDLEtBQWEsRUFBRSxRQUE4QjtJQUNqRixNQUFNLE9BQU8sR0FBYSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBRXpDLG1DQUFtQztJQUNuQyxPQUFPLENBQUMsSUFBSSxDQUFDLGtCQUFrQixLQUFLLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUU5Qyx1QkFBdUI7SUFDdkIsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLEVBQWdDLENBQUM7SUFFeEQsS0FBSyxNQUFNLEtBQUssSUFBSSxRQUFRLEVBQUU7UUFDNUIsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNaLE9BQU8sR0FBRyxFQUFFLENBQUM7WUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDcEM7UUFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3JCO0lBR0QsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBcUIsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xFLE1BQU0sY0FBYyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEQsTUFBTSxjQUFjLEdBQ2hCLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEVBQUUsRUFBRSxDQUFXLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztTQUM1RSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFFOUIsS0FBSyxNQUFNLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxJQUFJLGNBQWMsRUFBRTtRQUM5QyxJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ2hFLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxPQUFPLFdBQVcsTUFBTSxJQUFJLENBQUMsQ0FBQztLQUN2RDtJQUVELE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBRUQsU0FBUyxPQUFPLENBQU8sTUFBbUI7SUFDeEMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNkLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0J1bmRsZVByaXZhdGVFbnRyeX0gZnJvbSAnLi9idW5kbGVyJztcblxuY29uc3QgSU5ERVhfSEVBREVSID0gYC8qKlxuICogR2VuZXJhdGVkIGJ1bmRsZSBpbmRleC4gRG8gbm90IGVkaXQuXG4gKi9cbmA7XG5cbnR5cGUgTWFwRW50cnkgPSBbc3RyaW5nLCBCdW5kbGVQcml2YXRlRW50cnlbXV07XG5cbmV4cG9ydCBmdW5jdGlvbiBwcml2YXRlRW50cmllc1RvSW5kZXgoaW5kZXg6IHN0cmluZywgcHJpdmF0ZXM6IEJ1bmRsZVByaXZhdGVFbnRyeVtdKTogc3RyaW5nIHtcbiAgY29uc3QgcmVzdWx0czogc3RyaW5nW10gPSBbSU5ERVhfSEVBREVSXTtcblxuICAvLyBFeHBvcnQgYWxsIG9mIHRoZSBpbmRleCBzeW1ib2xzLlxuICByZXN1bHRzLnB1c2goYGV4cG9ydCAqIGZyb20gJyR7aW5kZXh9JztgLCAnJyk7XG5cbiAgLy8gU2ltcGxpZnkgdGhlIGV4cG9ydHNcbiAgY29uc3QgZXhwb3J0cyA9IG5ldyBNYXA8c3RyaW5nLCBCdW5kbGVQcml2YXRlRW50cnlbXT4oKTtcblxuICBmb3IgKGNvbnN0IGVudHJ5IG9mIHByaXZhdGVzKSB7XG4gICAgbGV0IGVudHJpZXMgPSBleHBvcnRzLmdldChlbnRyeS5tb2R1bGUpO1xuICAgIGlmICghZW50cmllcykge1xuICAgICAgZW50cmllcyA9IFtdO1xuICAgICAgZXhwb3J0cy5zZXQoZW50cnkubW9kdWxlLCBlbnRyaWVzKTtcbiAgICB9XG4gICAgZW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG5cbiAgY29uc3QgY29tcGFyZUVudHJpZXMgPSBjb21wYXJlKChlOiBCdW5kbGVQcml2YXRlRW50cnkpID0+IGUubmFtZSk7XG4gIGNvbnN0IGNvbXBhcmVNb2R1bGVzID0gY29tcGFyZSgoZTogTWFwRW50cnkpID0+IGVbMF0pO1xuICBjb25zdCBvcmRlcmVkRXhwb3J0cyA9XG4gICAgICBBcnJheS5mcm9tKGV4cG9ydHMpXG4gICAgICAgICAgLm1hcCgoW21vZHVsZSwgZW50cmllc10pID0+IDxNYXBFbnRyeT5bbW9kdWxlLCBlbnRyaWVzLnNvcnQoY29tcGFyZUVudHJpZXMpXSlcbiAgICAgICAgICAuc29ydChjb21wYXJlTW9kdWxlcyk7XG5cbiAgZm9yIChjb25zdCBbbW9kdWxlLCBlbnRyaWVzXSBvZiBvcmRlcmVkRXhwb3J0cykge1xuICAgIGxldCBzeW1ib2xzID0gZW50cmllcy5tYXAoZSA9PiBgJHtlLm5hbWV9IGFzICR7ZS5wcml2YXRlTmFtZX1gKTtcbiAgICByZXN1bHRzLnB1c2goYGV4cG9ydCB7JHtzeW1ib2xzfX0gZnJvbSAnJHttb2R1bGV9JztgKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHRzLmpvaW4oJ1xcbicpO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlPEUsIFQ+KHNlbGVjdDogKGU6IEUpID0+IFQpOiAoYTogRSwgYjogRSkgPT4gbnVtYmVyIHtcbiAgcmV0dXJuIChhLCBiKSA9PiB7XG4gICAgY29uc3QgYWsgPSBzZWxlY3QoYSk7XG4gICAgY29uc3QgYmsgPSBzZWxlY3QoYik7XG4gICAgcmV0dXJuIGFrID4gYmsgPyAxIDogYWsgPCBiayA/IC0xIDogMDtcbiAgfTtcbn1cbiJdfQ==