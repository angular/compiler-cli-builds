/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Metadata Schema
// If you make a backwards incompatible change to the schema, increment the METADTA_VERSION number.
// If you make a backwards compatible change to the metadata (such as adding an option field) then
// leave METADATA_VERSION the same. If possible, supply as many versions of the metadata that can
// represent the semantics of the file in an array. For example, when generating a version 2 file,
// if version 1 can accurately represent the metadata, generate both version 1 and version 2 in
// an array.
export const METADATA_VERSION = 4;
export function isModuleMetadata(value) {
    return value && value.__symbolic === 'module';
}
export function isClassMetadata(value) {
    return value && value.__symbolic === 'class';
}
export function isInterfaceMetadata(value) {
    return value && value.__symbolic === 'interface';
}
export function isMemberMetadata(value) {
    if (value) {
        switch (value.__symbolic) {
            case 'constructor':
            case 'method':
            case 'property':
                return true;
        }
    }
    return false;
}
export function isMethodMetadata(value) {
    return value && (value.__symbolic === 'constructor' || value.__symbolic === 'method');
}
export function isConstructorMetadata(value) {
    return value && value.__symbolic === 'constructor';
}
export function isFunctionMetadata(value) {
    return value && value.__symbolic === 'function';
}
export function isMetadataSymbolicExpression(value) {
    if (value) {
        switch (value.__symbolic) {
            case 'binary':
            case 'call':
            case 'index':
            case 'new':
            case 'pre':
            case 'reference':
            case 'select':
            case 'spread':
            case 'if':
                return true;
        }
    }
    return false;
}
export function isMetadataSymbolicBinaryExpression(value) {
    return value && value.__symbolic === 'binary';
}
export function isMetadataSymbolicIndexExpression(value) {
    return value && value.__symbolic === 'index';
}
export function isMetadataSymbolicCallExpression(value) {
    return value && (value.__symbolic === 'call' || value.__symbolic === 'new');
}
export function isMetadataSymbolicPrefixExpression(value) {
    return value && value.__symbolic === 'pre';
}
export function isMetadataSymbolicIfExpression(value) {
    return value && value.__symbolic === 'if';
}
export function isMetadataGlobalReferenceExpression(value) {
    return value && value.name && !value.module && isMetadataSymbolicReferenceExpression(value);
}
export function isMetadataModuleReferenceExpression(value) {
    return value && value.module && !value.name && !value.default &&
        isMetadataSymbolicReferenceExpression(value);
}
export function isMetadataImportedSymbolReferenceExpression(value) {
    return value && value.module && !!value.name && isMetadataSymbolicReferenceExpression(value);
}
export function isMetadataImportDefaultReference(value) {
    return value && value.module && value.default && isMetadataSymbolicReferenceExpression(value);
}
export function isMetadataSymbolicReferenceExpression(value) {
    return value && value.__symbolic === 'reference';
}
export function isMetadataSymbolicSelectExpression(value) {
    return value && value.__symbolic === 'select';
}
export function isMetadataSymbolicSpreadExpression(value) {
    return value && value.__symbolic === 'spread';
}
export function isMetadataError(value) {
    return value && value.__symbolic === 'error';
}
//# sourceMappingURL=data:application/json;base64,