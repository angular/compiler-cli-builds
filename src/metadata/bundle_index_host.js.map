{"version":3,"file":"bundle_index_host.js","sourceRoot":"","sources":["../../../../../packages/compiler-cli/src/metadata/bundle_index_host.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {CompilerOptions} from '../transformers/api';\n\nimport {CompilerHostAdapter, MetadataBundler} from './bundler';\nimport {privateEntriesToIndex} from './index_writer';\n\nconst DTS = /\\.d\\.ts$/;\nconst JS_EXT = /(\\.js|)$/;\n\nfunction createSyntheticIndexHost<H extends ts.CompilerHost>(\n    delegate: H, syntheticIndex: {name: string, content: string, metadata: string}): H {\n  const normalSyntheticIndexName = path.normalize(syntheticIndex.name);\n  const indexContent = syntheticIndex.content;\n  const indexMetadata = syntheticIndex.metadata;\n\n  const newHost = Object.create(delegate);\n  newHost.fileExists = (fileName: string): boolean => {\n    return path.normalize(fileName) == normalSyntheticIndexName || delegate.fileExists(fileName);\n  };\n\n  newHost.readFile = (fileName: string) => {\n    return path.normalize(fileName) == normalSyntheticIndexName ? indexContent :\n                                                                  delegate.readFile(fileName);\n  };\n\n  newHost.getSourceFile =\n      (fileName: string, languageVersion: ts.ScriptTarget, onError?: (message: string) => void) => {\n        if (path.normalize(fileName) == normalSyntheticIndexName) {\n          const sf = ts.createSourceFile(fileName, indexContent, languageVersion, true);\n          if ((delegate as any).fileNameToModuleName) {\n            sf.moduleName = (delegate as any).fileNameToModuleName(fileName);\n          }\n          return sf;\n        }\n        return delegate.getSourceFile(fileName, languageVersion, onError);\n      };\n\n  newHost.writeFile =\n      (fileName: string, data: string, writeByteOrderMark: boolean,\n       onError: ((message: string) => void) | undefined,\n       sourceFiles: Readonly<ts.SourceFile>[]) => {\n        delegate.writeFile(fileName, data, writeByteOrderMark, onError, sourceFiles);\n        if (fileName.match(DTS) && sourceFiles && sourceFiles.length == 1 &&\n            path.normalize(sourceFiles[0].fileName) === normalSyntheticIndexName) {\n          // If we are writing the synthetic index, write the metadata along side.\n          const metadataName = fileName.replace(DTS, '.metadata.json');\n          delegate.writeFile(metadataName, indexMetadata, writeByteOrderMark, onError, []);\n        }\n      };\n  return newHost;\n}\n\nexport function createBundleIndexHost<H extends ts.CompilerHost>(\n    ngOptions: CompilerOptions, rootFiles: ReadonlyArray<string>,\n    host: H): {host: H, indexName?: string, errors?: ts.Diagnostic[]} {\n  const files = rootFiles.filter(f => !DTS.test(f));\n  let indexFile: string|undefined;\n  if (files.length === 1) {\n    indexFile = files[0];\n  } else {\n    for (const f of files) {\n      // Assume the shortest file path called index.ts is the entry point\n      if (f.endsWith(path.sep + 'index.ts')) {\n        if (!indexFile || indexFile.length > f.length) {\n          indexFile = f;\n        }\n      }\n    }\n  }\n  if (!indexFile) {\n    return {\n      host,\n      errors: [{\n        file: null as any as ts.SourceFile,\n        start: null as any as number,\n        length: null as any as number,\n        messageText:\n            'Angular compiler option \"flatModuleIndex\" requires one and only one .ts file in the \"files\" field.',\n        category: ts.DiagnosticCategory.Error,\n        code: 0\n      }]\n    };\n  }\n\n  const indexModule = indexFile.replace(/\\.ts$/, '');\n  const bundler = new MetadataBundler(\n      indexModule, ngOptions.flatModuleId, new CompilerHostAdapter(host),\n      ngOptions.flatModulePrivateSymbolPrefix);\n  const metadataBundle = bundler.getMetadataBundle();\n  const metadata = JSON.stringify(metadataBundle.metadata);\n  const name =\n      path.join(path.dirname(indexModule), ngOptions.flatModuleOutFile !.replace(JS_EXT, '.ts'));\n  const libraryIndex = `./${path.basename(indexModule)}`;\n  const content = privateEntriesToIndex(libraryIndex, metadataBundle.privates);\n  host = createSyntheticIndexHost(host, {name, content, metadata});\n  return {host, indexName: name};\n}\n"]}