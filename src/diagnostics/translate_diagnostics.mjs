/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as ts from 'typescript';
import { DEFAULT_ERROR_CODE, SOURCE } from '../transformers/api';
import { GENERATED_FILES } from '../transformers/util';
export function translateDiagnostics(host, untranslatedDiagnostics) {
    const ts = [];
    const ng = [];
    untranslatedDiagnostics.forEach((diagnostic) => {
        if (diagnostic.file && diagnostic.start && GENERATED_FILES.test(diagnostic.file.fileName)) {
            // We need to filter out diagnostics about unused functions as
            // they are in fact referenced by nobody and only serve to surface
            // type check errors.
            if (diagnostic.code === /* ... is declared but never used */ 6133) {
                return;
            }
            const span = sourceSpanOf(host, diagnostic.file, diagnostic.start);
            if (span) {
                const fileName = span.start.file.url;
                ng.push({
                    messageText: diagnosticMessageToString(diagnostic.messageText),
                    category: diagnostic.category,
                    span,
                    source: SOURCE,
                    code: DEFAULT_ERROR_CODE
                });
            }
        }
        else {
            ts.push(diagnostic);
        }
    });
    return { ts, ng };
}
function sourceSpanOf(host, source, start) {
    const { line, character } = ts.getLineAndCharacterOfPosition(source, start);
    return host.parseSourceSpanOf(source.fileName, line, character);
}
function diagnosticMessageToString(message) {
    return ts.flattenDiagnosticMessageText(message, '\n');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlX2RpYWdub3N0aWNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tcGlsZXItY2xpL3NyYy9kaWFnbm9zdGljcy90cmFuc2xhdGVfZGlhZ25vc3RpY3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBR0gsT0FBTyxLQUFLLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFakMsT0FBTyxFQUFDLGtCQUFrQixFQUFjLE1BQU0sRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQzNFLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQU1yRCxNQUFNLFVBQVUsb0JBQW9CLENBQ2hDLElBQW1CLEVBQUUsdUJBQXFEO0lBRTVFLE1BQU0sRUFBRSxHQUFvQixFQUFFLENBQUM7SUFDL0IsTUFBTSxFQUFFLEdBQWlCLEVBQUUsQ0FBQztJQUU1Qix1QkFBdUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRTtRQUM3QyxJQUFJLFVBQVUsQ0FBQyxJQUFJLElBQUksVUFBVSxDQUFDLEtBQUssSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDekYsOERBQThEO1lBQzlELGtFQUFrRTtZQUNsRSxxQkFBcUI7WUFDckIsSUFBSSxVQUFVLENBQUMsSUFBSSxLQUFLLG9DQUFvQyxDQUFDLElBQUksRUFBRTtnQkFDakUsT0FBTzthQUNSO1lBQ0QsTUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNuRSxJQUFJLElBQUksRUFBRTtnQkFDUixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7Z0JBQ3JDLEVBQUUsQ0FBQyxJQUFJLENBQUM7b0JBQ04sV0FBVyxFQUFFLHlCQUF5QixDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUM7b0JBQzlELFFBQVEsRUFBRSxVQUFVLENBQUMsUUFBUTtvQkFDN0IsSUFBSTtvQkFDSixNQUFNLEVBQUUsTUFBTTtvQkFDZCxJQUFJLEVBQUUsa0JBQWtCO2lCQUN6QixDQUFDLENBQUM7YUFDSjtTQUNGO2FBQU07WUFDTCxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ3JCO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLEVBQUMsRUFBRSxFQUFFLEVBQUUsRUFBQyxDQUFDO0FBQ2xCLENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBQyxJQUFtQixFQUFFLE1BQXFCLEVBQUUsS0FBYTtJQUU3RSxNQUFNLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBQyxHQUFHLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDMUUsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDbEUsQ0FBQztBQUVELFNBQVMseUJBQXlCLENBQUMsT0FBeUM7SUFDMUUsT0FBTyxFQUFFLENBQUMsNEJBQTRCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtQYXJzZVNvdXJjZVNwYW59IGZyb20gJ0Bhbmd1bGFyL2NvbXBpbGVyJztcbmltcG9ydCAqIGFzIHRzIGZyb20gJ3R5cGVzY3JpcHQnO1xuXG5pbXBvcnQge0RFRkFVTFRfRVJST1JfQ09ERSwgRGlhZ25vc3RpYywgU09VUkNFfSBmcm9tICcuLi90cmFuc2Zvcm1lcnMvYXBpJztcbmltcG9ydCB7R0VORVJBVEVEX0ZJTEVTfSBmcm9tICcuLi90cmFuc2Zvcm1lcnMvdXRpbCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHlwZUNoZWNrSG9zdCB7XG4gIHBhcnNlU291cmNlU3Bhbk9mKGZpbGVOYW1lOiBzdHJpbmcsIGxpbmU6IG51bWJlciwgY2hhcmFjdGVyOiBudW1iZXIpOiBQYXJzZVNvdXJjZVNwYW58bnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZURpYWdub3N0aWNzKFxuICAgIGhvc3Q6IFR5cGVDaGVja0hvc3QsIHVudHJhbnNsYXRlZERpYWdub3N0aWNzOiBSZWFkb25seUFycmF5PHRzLkRpYWdub3N0aWM+KTpcbiAgICB7dHM6IHRzLkRpYWdub3N0aWNbXSwgbmc6IERpYWdub3N0aWNbXX0ge1xuICBjb25zdCB0czogdHMuRGlhZ25vc3RpY1tdID0gW107XG4gIGNvbnN0IG5nOiBEaWFnbm9zdGljW10gPSBbXTtcblxuICB1bnRyYW5zbGF0ZWREaWFnbm9zdGljcy5mb3JFYWNoKChkaWFnbm9zdGljKSA9PiB7XG4gICAgaWYgKGRpYWdub3N0aWMuZmlsZSAmJiBkaWFnbm9zdGljLnN0YXJ0ICYmIEdFTkVSQVRFRF9GSUxFUy50ZXN0KGRpYWdub3N0aWMuZmlsZS5maWxlTmFtZSkpIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gZmlsdGVyIG91dCBkaWFnbm9zdGljcyBhYm91dCB1bnVzZWQgZnVuY3Rpb25zIGFzXG4gICAgICAvLyB0aGV5IGFyZSBpbiBmYWN0IHJlZmVyZW5jZWQgYnkgbm9ib2R5IGFuZCBvbmx5IHNlcnZlIHRvIHN1cmZhY2VcbiAgICAgIC8vIHR5cGUgY2hlY2sgZXJyb3JzLlxuICAgICAgaWYgKGRpYWdub3N0aWMuY29kZSA9PT0gLyogLi4uIGlzIGRlY2xhcmVkIGJ1dCBuZXZlciB1c2VkICovIDYxMzMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3BhbiA9IHNvdXJjZVNwYW5PZihob3N0LCBkaWFnbm9zdGljLmZpbGUsIGRpYWdub3N0aWMuc3RhcnQpO1xuICAgICAgaWYgKHNwYW4pIHtcbiAgICAgICAgY29uc3QgZmlsZU5hbWUgPSBzcGFuLnN0YXJ0LmZpbGUudXJsO1xuICAgICAgICBuZy5wdXNoKHtcbiAgICAgICAgICBtZXNzYWdlVGV4dDogZGlhZ25vc3RpY01lc3NhZ2VUb1N0cmluZyhkaWFnbm9zdGljLm1lc3NhZ2VUZXh0KSxcbiAgICAgICAgICBjYXRlZ29yeTogZGlhZ25vc3RpYy5jYXRlZ29yeSxcbiAgICAgICAgICBzcGFuLFxuICAgICAgICAgIHNvdXJjZTogU09VUkNFLFxuICAgICAgICAgIGNvZGU6IERFRkFVTFRfRVJST1JfQ09ERVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdHMucHVzaChkaWFnbm9zdGljKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge3RzLCBuZ307XG59XG5cbmZ1bmN0aW9uIHNvdXJjZVNwYW5PZihob3N0OiBUeXBlQ2hlY2tIb3N0LCBzb3VyY2U6IHRzLlNvdXJjZUZpbGUsIHN0YXJ0OiBudW1iZXIpOiBQYXJzZVNvdXJjZVNwYW58XG4gICAgbnVsbCB7XG4gIGNvbnN0IHtsaW5lLCBjaGFyYWN0ZXJ9ID0gdHMuZ2V0TGluZUFuZENoYXJhY3Rlck9mUG9zaXRpb24oc291cmNlLCBzdGFydCk7XG4gIHJldHVybiBob3N0LnBhcnNlU291cmNlU3Bhbk9mKHNvdXJjZS5maWxlTmFtZSwgbGluZSwgY2hhcmFjdGVyKTtcbn1cblxuZnVuY3Rpb24gZGlhZ25vc3RpY01lc3NhZ2VUb1N0cmluZyhtZXNzYWdlOiB0cy5EaWFnbm9zdGljTWVzc2FnZUNoYWlufHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiB0cy5mbGF0dGVuRGlhZ25vc3RpY01lc3NhZ2VUZXh0KG1lc3NhZ2UsICdcXG4nKTtcbn1cbiJdfQ==