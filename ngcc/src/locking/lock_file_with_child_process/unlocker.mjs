/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { NodeJSFileSystem } from '../../../../src/ngtsc/file_system';
import { ConsoleLogger } from '../../../../src/ngtsc/logging';
import { removeLockFile } from './util';
/// <reference types="node" />
// This file is an entry-point for the child-process that is started by `LockFileWithChildProcess`
// to ensure that the lock-file is removed when the primary process exits unexpectedly.
// We have no choice but to use the node.js file-system here since we are in a separate process
// from the main ngcc run, which may be running a mock file-system from within a test.
const fs = new NodeJSFileSystem();
// We create a logger that has the same logging level as the parent process, since it should have
// been passed through as one of the args
const logLevel = parseInt(process.argv.pop(), 10);
const logger = new ConsoleLogger(logLevel);
// We must store the parent PID now as it changes if the parent process is killed early
const ppid = process.ppid.toString();
// The path to the lock-file to remove should have been passed as one of the args
const lockFilePath = fs.resolve(process.argv.pop());
logger.debug(`Starting unlocker at process ${process.pid} on behalf of process ${ppid}`);
logger.debug(`The lock-file path is ${lockFilePath}`);
/**
 * When the parent process exits (for whatever reason) remove the loc-file if it exists and as long
 * as it was one that was created by the parent process.
 */
process.on('disconnect', () => {
    removeLockFile(fs, logger, lockFilePath, ppid);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5sb2NrZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb21waWxlci1jbGkvbmdjYy9zcmMvbG9ja2luZy9sb2NrX2ZpbGVfd2l0aF9jaGlsZF9wcm9jZXNzL3VubG9ja2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUNILE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBQ25FLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUM1RCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBRXRDLDhCQUE4QjtBQUU5QixrR0FBa0c7QUFDbEcsdUZBQXVGO0FBRXZGLCtGQUErRjtBQUMvRixzRkFBc0Y7QUFDdEYsTUFBTSxFQUFFLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO0FBRWxDLGlHQUFpRztBQUNqRyx5Q0FBeUM7QUFDekMsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDbkQsTUFBTSxNQUFNLEdBQUcsSUFBSSxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFM0MsdUZBQXVGO0FBQ3ZGLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7QUFFckMsaUZBQWlGO0FBQ2pGLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUcsQ0FBQyxDQUFDO0FBRXJELE1BQU0sQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLE9BQU8sQ0FBQyxHQUFHLHlCQUF5QixJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3pGLE1BQU0sQ0FBQyxLQUFLLENBQUMseUJBQXlCLFlBQVksRUFBRSxDQUFDLENBQUM7QUFFdEQ7OztHQUdHO0FBQ0gsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO0lBQzVCLGNBQWMsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNqRCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHtOb2RlSlNGaWxlU3lzdGVtfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvbmd0c2MvZmlsZV9zeXN0ZW0nO1xuaW1wb3J0IHtDb25zb2xlTG9nZ2VyfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvbmd0c2MvbG9nZ2luZyc7XG5pbXBvcnQge3JlbW92ZUxvY2tGaWxlfSBmcm9tICcuL3V0aWwnO1xuXG4vLy8gPHJlZmVyZW5jZSB0eXBlcz1cIm5vZGVcIiAvPlxuXG4vLyBUaGlzIGZpbGUgaXMgYW4gZW50cnktcG9pbnQgZm9yIHRoZSBjaGlsZC1wcm9jZXNzIHRoYXQgaXMgc3RhcnRlZCBieSBgTG9ja0ZpbGVXaXRoQ2hpbGRQcm9jZXNzYFxuLy8gdG8gZW5zdXJlIHRoYXQgdGhlIGxvY2stZmlsZSBpcyByZW1vdmVkIHdoZW4gdGhlIHByaW1hcnkgcHJvY2VzcyBleGl0cyB1bmV4cGVjdGVkbHkuXG5cbi8vIFdlIGhhdmUgbm8gY2hvaWNlIGJ1dCB0byB1c2UgdGhlIG5vZGUuanMgZmlsZS1zeXN0ZW0gaGVyZSBzaW5jZSB3ZSBhcmUgaW4gYSBzZXBhcmF0ZSBwcm9jZXNzXG4vLyBmcm9tIHRoZSBtYWluIG5nY2MgcnVuLCB3aGljaCBtYXkgYmUgcnVubmluZyBhIG1vY2sgZmlsZS1zeXN0ZW0gZnJvbSB3aXRoaW4gYSB0ZXN0LlxuY29uc3QgZnMgPSBuZXcgTm9kZUpTRmlsZVN5c3RlbSgpO1xuXG4vLyBXZSBjcmVhdGUgYSBsb2dnZXIgdGhhdCBoYXMgdGhlIHNhbWUgbG9nZ2luZyBsZXZlbCBhcyB0aGUgcGFyZW50IHByb2Nlc3MsIHNpbmNlIGl0IHNob3VsZCBoYXZlXG4vLyBiZWVuIHBhc3NlZCB0aHJvdWdoIGFzIG9uZSBvZiB0aGUgYXJnc1xuY29uc3QgbG9nTGV2ZWwgPSBwYXJzZUludChwcm9jZXNzLmFyZ3YucG9wKCkhLCAxMCk7XG5jb25zdCBsb2dnZXIgPSBuZXcgQ29uc29sZUxvZ2dlcihsb2dMZXZlbCk7XG5cbi8vIFdlIG11c3Qgc3RvcmUgdGhlIHBhcmVudCBQSUQgbm93IGFzIGl0IGNoYW5nZXMgaWYgdGhlIHBhcmVudCBwcm9jZXNzIGlzIGtpbGxlZCBlYXJseVxuY29uc3QgcHBpZCA9IHByb2Nlc3MucHBpZC50b1N0cmluZygpO1xuXG4vLyBUaGUgcGF0aCB0byB0aGUgbG9jay1maWxlIHRvIHJlbW92ZSBzaG91bGQgaGF2ZSBiZWVuIHBhc3NlZCBhcyBvbmUgb2YgdGhlIGFyZ3NcbmNvbnN0IGxvY2tGaWxlUGF0aCA9IGZzLnJlc29sdmUocHJvY2Vzcy5hcmd2LnBvcCgpISk7XG5cbmxvZ2dlci5kZWJ1ZyhgU3RhcnRpbmcgdW5sb2NrZXIgYXQgcHJvY2VzcyAke3Byb2Nlc3MucGlkfSBvbiBiZWhhbGYgb2YgcHJvY2VzcyAke3BwaWR9YCk7XG5sb2dnZXIuZGVidWcoYFRoZSBsb2NrLWZpbGUgcGF0aCBpcyAke2xvY2tGaWxlUGF0aH1gKTtcblxuLyoqXG4gKiBXaGVuIHRoZSBwYXJlbnQgcHJvY2VzcyBleGl0cyAoZm9yIHdoYXRldmVyIHJlYXNvbikgcmVtb3ZlIHRoZSBsb2MtZmlsZSBpZiBpdCBleGlzdHMgYW5kIGFzIGxvbmdcbiAqIGFzIGl0IHdhcyBvbmUgdGhhdCB3YXMgY3JlYXRlZCBieSB0aGUgcGFyZW50IHByb2Nlc3MuXG4gKi9cbnByb2Nlc3Mub24oJ2Rpc2Nvbm5lY3QnLCAoKSA9PiB7XG4gIHJlbW92ZUxvY2tGaWxlKGZzLCBsb2dnZXIsIGxvY2tGaWxlUGF0aCwgcHBpZCk7XG59KTtcbiJdfQ==