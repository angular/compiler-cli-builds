/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as ts from 'typescript';
import { absoluteFrom, isRooted } from '../../src/ngtsc/file_system';
import { KnownDeclaration } from '../../src/ngtsc/reflection';
export function getOriginalSymbol(checker) {
    return function (symbol) {
        return ts.SymbolFlags.Alias & symbol.flags ? checker.getAliasedSymbol(symbol) : symbol;
    };
}
export function isDefined(value) {
    return (value !== undefined) && (value !== null);
}
export function getNameText(name) {
    return ts.isIdentifier(name) || ts.isLiteralExpression(name) ? name.text : name.getText();
}
/**
 * Parse down the AST and capture all the nodes that satisfy the test.
 * @param node The start node.
 * @param test The function that tests whether a node should be included.
 * @returns a collection of nodes that satisfy the test.
 */
export function findAll(node, test) {
    const nodes = [];
    findAllVisitor(node);
    return nodes;
    function findAllVisitor(n) {
        if (test(n)) {
            nodes.push(n);
        }
        else {
            n.forEachChild(child => findAllVisitor(child));
        }
    }
}
/**
 * Does the given declaration have a name which is an identifier?
 * @param declaration The declaration to test.
 * @returns true if the declaration has an identifier for a name.
 */
export function hasNameIdentifier(declaration) {
    const namedDeclaration = declaration;
    return namedDeclaration.name !== undefined && ts.isIdentifier(namedDeclaration.name);
}
/**
 * Test whether a path is "relative".
 *
 * Relative paths start with `/`, `./` or `../` (or the Windows equivalents); or are simply `.` or
 * `..`.
 */
export function isRelativePath(path) {
    return isRooted(path) || /^\.\.?(\/|\\|$)/.test(path);
}
/**
 * A `Map`-like object that can compute and memoize a missing value for any key.
 *
 * The computed values are memoized, so the factory function is not called more than once per key.
 * This is useful for storing values that are expensive to compute and may be used multiple times.
 */
// NOTE:
// Ideally, this class should extend `Map`, but that causes errors in ES5 transpiled code:
// `TypeError: Constructor Map requires 'new'`
export class FactoryMap {
    constructor(factory, entries) {
        this.factory = factory;
        this.internalMap = new Map(entries);
    }
    get(key) {
        if (!this.internalMap.has(key)) {
            this.internalMap.set(key, this.factory(key));
        }
        return this.internalMap.get(key);
    }
    set(key, value) {
        this.internalMap.set(key, value);
    }
}
/**
 * Attempt to resolve a `path` to a file by appending the provided `postFixes`
 * to the `path` and checking if the file exists on disk.
 * @returns An absolute path to the first matching existing file, or `null` if none exist.
 */
export function resolveFileWithPostfixes(fs, path, postFixes) {
    for (const postFix of postFixes) {
        const testPath = absoluteFrom(path + postFix);
        if (fs.exists(testPath) && fs.stat(testPath).isFile()) {
            return testPath;
        }
    }
    return null;
}
/**
 * Determine whether a function declaration corresponds with a TypeScript helper function, returning
 * its kind if so or null if the declaration does not seem to correspond with such a helper.
 */
export function getTsHelperFnFromDeclaration(decl) {
    if (!ts.isFunctionDeclaration(decl) && !ts.isVariableDeclaration(decl)) {
        return null;
    }
    if (decl.name === undefined || !ts.isIdentifier(decl.name)) {
        return null;
    }
    return getTsHelperFnFromIdentifier(decl.name);
}
/**
 * Determine whether an identifier corresponds with a TypeScript helper function (based on its
 * name), returning its kind if so or null if the identifier does not seem to correspond with such a
 * helper.
 */
export function getTsHelperFnFromIdentifier(id) {
    switch (stripDollarSuffix(id.text)) {
        case '__assign':
            return KnownDeclaration.TsHelperAssign;
        case '__spread':
            return KnownDeclaration.TsHelperSpread;
        case '__spreadArrays':
            return KnownDeclaration.TsHelperSpreadArrays;
        case '__spreadArray':
            return KnownDeclaration.TsHelperSpreadArray;
        case '__read':
            return KnownDeclaration.TsHelperRead;
        default:
            return null;
    }
}
/**
 * An identifier may become repeated when bundling multiple source files into a single bundle, so
 * bundlers have a strategy of suffixing non-unique identifiers with a suffix like $2. This function
 * strips off such suffixes, so that ngcc deals with the canonical name of an identifier.
 * @param value The value to strip any suffix of, if applicable.
 * @returns The canonical representation of the value, without any suffix.
 */
export function stripDollarSuffix(value) {
    return value.replace(/\$\d+$/, '');
}
export function stripExtension(fileName) {
    return fileName.replace(/\..+$/, '');
}
//# sourceMappingURL=data:application/json;base64,