/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as os from 'os';
import { absoluteFrom, getFileSystem } from '../../src/ngtsc/file_system';
import { ConsoleLogger, LogLevel } from '../../src/ngtsc/logging';
import { readConfiguration } from '../../src/perform_compile';
import { SUPPORTED_FORMAT_PROPERTIES } from './packages/entry_point';
import { getPathMappingsFromTsConfig } from './path_mappings';
import { InPlaceFileWriter } from './writing/in_place_file_writer';
import { NewEntryPointFileWriter } from './writing/new_entry_point_file_writer';
/**
 * Instantiate common utilities that are always used and fix up options with defaults, as necessary.
 *
 * NOTE: Avoid eagerly instantiating anything that might not be used when running sync/async.
 */
export function getSharedSetup(options) {
    const fileSystem = getFileSystem();
    const absBasePath = absoluteFrom(options.basePath);
    const projectPath = fileSystem.dirname(absBasePath);
    const tsConfig = options.tsConfigPath !== null ? getTsConfig(options.tsConfigPath || projectPath) : null;
    let { basePath, targetEntryPointPath, propertiesToConsider = SUPPORTED_FORMAT_PROPERTIES, typingsOnly = false, compileAllFormats = true, createNewEntryPointFormats = false, logger = new ConsoleLogger(LogLevel.info), pathMappings = getPathMappingsFromTsConfig(fileSystem, tsConfig, projectPath), async = false, errorOnFailedEntryPoint = false, enableI18nLegacyMessageIdFormat = true, invalidateEntryPointManifest = false, tsConfigPath, } = options;
    if (!!targetEntryPointPath) {
        // targetEntryPointPath forces us to error if an entry-point fails.
        errorOnFailedEntryPoint = true;
    }
    if (typingsOnly) {
        // If we only want to process the typings then we do not want to waste time trying to process
        // multiple JS formats.
        compileAllFormats = false;
    }
    checkForSolutionStyleTsConfig(fileSystem, logger, projectPath, options.tsConfigPath, tsConfig);
    return {
        basePath,
        targetEntryPointPath,
        propertiesToConsider,
        typingsOnly,
        compileAllFormats,
        createNewEntryPointFormats,
        logger,
        pathMappings,
        async,
        errorOnFailedEntryPoint,
        enableI18nLegacyMessageIdFormat,
        invalidateEntryPointManifest,
        tsConfigPath,
        fileSystem,
        absBasePath,
        projectPath,
        tsConfig,
        getFileWriter: (pkgJsonUpdater) => createNewEntryPointFormats ?
            new NewEntryPointFileWriter(fileSystem, logger, errorOnFailedEntryPoint, pkgJsonUpdater) :
            new InPlaceFileWriter(fileSystem, logger, errorOnFailedEntryPoint),
    };
}
let tsConfigCache = null;
let tsConfigPathCache = null;
/**
 * Get the parsed configuration object for the given `tsConfigPath`.
 *
 * This function will cache the previous parsed configuration object to avoid unnecessary processing
 * of the tsconfig.json in the case that it is requested repeatedly.
 *
 * This makes the assumption, which is true as of writing, that the contents of tsconfig.json and
 * its dependencies will not change during the life of the process running ngcc.
 */
function getTsConfig(tsConfigPath) {
    if (tsConfigPath !== tsConfigPathCache) {
        tsConfigPathCache = tsConfigPath;
        tsConfigCache = readConfiguration(tsConfigPath);
    }
    return tsConfigCache;
}
export function clearTsConfigCache() {
    tsConfigPathCache = null;
    tsConfigCache = null;
}
function checkForSolutionStyleTsConfig(fileSystem, logger, projectPath, tsConfigPath, tsConfig) {
    if (tsConfigPath !== null && !tsConfigPath && tsConfig !== null &&
        tsConfig.rootNames.length === 0 && tsConfig.projectReferences !== undefined &&
        tsConfig.projectReferences.length > 0) {
        logger.warn(`The inferred tsconfig file "${tsConfig.project}" appears to be "solution-style" ` +
            `since it contains no root files but does contain project references.\n` +
            `This is probably not wanted, since ngcc is unable to infer settings like "paths" mappings from such a file.\n` +
            `Perhaps you should have explicitly specified one of the referenced projects using the --tsconfig option. For example:\n\n` +
            tsConfig.projectReferences.map(ref => `  ngcc ... --tsconfig "${ref.originalPath}"\n`)
                .join('') +
            `\nFind out more about solution-style tsconfig at https://devblogs.microsoft.com/typescript/announcing-typescript-3-9/#solution-style-tsconfig.\n` +
            `If you did intend to use this file, then you can hide this warning by providing it explicitly:\n\n` +
            `  ngcc ... --tsconfig "${fileSystem.relative(projectPath, tsConfig.project)}"`);
    }
}
/**
 * Determines the maximum number of workers to use for parallel execution. This can be set using the
 * NGCC_MAX_WORKERS environment variable, or is computed based on the number of available CPUs. One
 * CPU core is always reserved for the master process, so we take the number of CPUs minus one, with
 * a maximum of 4 workers. We don't scale the number of workers beyond 4 by default, as it takes
 * considerably more memory and CPU cycles while not offering a substantial improvement in time.
 */
export function getMaxNumberOfWorkers() {
    const maxWorkers = process.env.NGCC_MAX_WORKERS;
    if (maxWorkers === undefined) {
        // Use up to 4 CPU cores for workers, always reserving one for master.
        return Math.max(1, Math.min(4, os.cpus().length - 1));
    }
    const numericMaxWorkers = +maxWorkers.trim();
    if (!Number.isInteger(numericMaxWorkers)) {
        throw new Error('NGCC_MAX_WORKERS should be an integer.');
    }
    else if (numericMaxWorkers < 1) {
        throw new Error('NGCC_MAX_WORKERS should be at least 1.');
    }
    return numericMaxWorkers;
}
//# sourceMappingURL=data:application/json;base64,