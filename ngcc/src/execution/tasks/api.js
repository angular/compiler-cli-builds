(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@angular/compiler-cli/ngcc/src/execution/tasks/api", ["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TaskDependencies = void 0;
    exports.TaskDependencies = Map;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tcGlsZXItY2xpL25nY2Mvc3JjL2V4ZWN1dGlvbi90YXNrcy9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0lBeURhLFFBQUEsZ0JBQWdCLEdBQUcsR0FBRyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHtFbnRyeVBvaW50LCBFbnRyeVBvaW50SnNvblByb3BlcnR5LCBKc29uT2JqZWN0fSBmcm9tICcuLi8uLi9wYWNrYWdlcy9lbnRyeV9wb2ludCc7XG5pbXBvcnQge1BhcnRpYWxseU9yZGVyZWRMaXN0fSBmcm9tICcuLi8uLi91dGlscyc7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHVuaXQgb2Ygd29yayB0byBiZSB1bmRlcnRha2VuIGJ5IGFuIGBFeGVjdXRvcmAuXG4gKlxuICogQSB0YXNrIGNvbnNpc3RzIG9mIHByb2Nlc3NpbmcgYSBzcGVjaWZpYyBmb3JtYXQgcHJvcGVydHkgb2YgYW4gZW50cnktcG9pbnQuXG4gKiBUaGlzIG1heSBvciBtYXkgbm90IGFsc28gaW5jbHVkZSBwcm9jZXNzaW5nIHRoZSB0eXBpbmdzIGZvciB0aGF0IGVudHJ5LXBvaW50LCB3aGljaCBvbmx5IG5lZWRzIHRvXG4gKiBoYXBwZW4gb25jZSBhY3Jvc3MgYWxsIHRoZSBmb3JtYXRzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRhc2sgZXh0ZW5kcyBKc29uT2JqZWN0IHtcbiAgLyoqIFRoZSBgRW50cnlQb2ludGAgd2hpY2ggbmVlZHMgdG8gYmUgcHJvY2Vzc2VkIGFzIHBhcnQgb2YgdGhlIHRhc2suICovXG4gIGVudHJ5UG9pbnQ6IEVudHJ5UG9pbnQ7XG5cbiAgLyoqXG4gICAqIFRoZSBgcGFja2FnZS5qc29uYCBmb3JtYXQgcHJvcGVydHkgdG8gcHJvY2VzcyAoaS5lLiB0aGUgcHJvcGVydHkgd2hpY2ggcG9pbnRzIHRvIHRoZSBmaWxlIHRoYXRcbiAgICogaXMgdGhlIHByb2dyYW0gZW50cnktcG9pbnQpLlxuICAgKi9cbiAgZm9ybWF0UHJvcGVydHk6IEVudHJ5UG9pbnRKc29uUHJvcGVydHk7XG5cbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIGFsbCBmb3JtYXQgcHJvcGVydGllcyAoaW5jbHVkaW5nIGB0YXNrLmZvcm1hdFByb3BlcnR5YCkgdGhhdCBzaG91bGQgYmUgbWFya2VkIGFzXG4gICAqIHByb2Nlc3NlZCBvbmNlIHRoZSB0YXNrIGhhcyBiZWVuIGNvbXBsZXRlZCwgYmVjYXVzZSB0aGV5IHBvaW50IHRvIHRoZSBmb3JtYXQtcGF0aCB0aGF0IHdpbGwgYmVcbiAgICogcHJvY2Vzc2VkIGFzIHBhcnQgb2YgdGhlIHRhc2suXG4gICAqL1xuICBmb3JtYXRQcm9wZXJ0aWVzVG9NYXJrQXNQcm9jZXNzZWQ6IEVudHJ5UG9pbnRKc29uUHJvcGVydHlbXTtcblxuICAvKiogV2hldGhlciB0byBhbHNvIHByb2Nlc3MgdHlwaW5ncyBmb3IgdGhpcyBlbnRyeS1wb2ludCBhcyBwYXJ0IG9mIHRoZSB0YXNrLiAqL1xuICBwcm9jZXNzRHRzOiBib29sZWFuO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBwYXJ0aWFsbHkgb3JkZXJlZCBsaXN0IG9mIHRhc2tzLlxuICpcbiAqIFRoZSBvcmRlcmluZy9wcmVjZWRlbmNlIG9mIHRhc2tzIGlzIGRldGVybWluZWQgYnkgdGhlIGludGVyLWRlcGVuZGVuY2llcyBiZXR3ZWVuIHRoZWlyIGFzc29jaWF0ZWRcbiAqIGVudHJ5LXBvaW50cy4gU3BlY2lmaWNhbGx5LCB0aGUgdGFza3MnIG9yZGVyL3ByZWNlZGVuY2UgaXMgc3VjaCB0aGF0IHRhc2tzIGFzc29jaWF0ZWQgdG9cbiAqIGRlcGVuZGVudCBlbnRyeS1wb2ludHMgYWx3YXlzIGNvbWUgYWZ0ZXIgdGFza3MgYXNzb2NpYXRlZCB3aXRoIHRoZWlyIGRlcGVuZGVuY2llcy5cbiAqXG4gKiBBcyByZXN1bHQgb2YgdGhpcyBvcmRlcmluZywgaXQgaXMgZ3VhcmFudGVlZCB0aGF0IC0gYnkgcHJvY2Vzc2luZyB0YXNrcyBpbiB0aGUgb3JkZXIgaW4gd2hpY2hcbiAqIHRoZXkgYXBwZWFyIGluIHRoZSBsaXN0IC0gYSB0YXNrJ3MgZGVwZW5kZW5jaWVzIHdpbGwgYWx3YXlzIGhhdmUgYmVlbiBwcm9jZXNzZWQgYmVmb3JlIHByb2Nlc3NpbmdcbiAqIHRoZSB0YXNrIGl0c2VsZi5cbiAqXG4gKiBTZWUgYERlcGVuZGVuY3lSZXNvbHZlciNzb3J0RW50cnlQb2ludHNCeURlcGVuZGVuY3koKWAuXG4gKi9cbmV4cG9ydCB0eXBlIFBhcnRpYWxseU9yZGVyZWRUYXNrcyA9IFBhcnRpYWxseU9yZGVyZWRMaXN0PFRhc2s+O1xuXG4vKipcbiAqIEEgbWFwcGluZyBmcm9tIFRhc2tzIHRvIHRoZSBUYXNrcyB0aGF0IGRlcGVuZCB1cG9uIHRoZW0gKGRlcGVuZGVudHMpLlxuICovXG5leHBvcnQgdHlwZSBUYXNrRGVwZW5kZW5jaWVzID0gTWFwPFRhc2ssIFNldDxUYXNrPj47XG5leHBvcnQgY29uc3QgVGFza0RlcGVuZGVuY2llcyA9IE1hcDtcblxuLyoqXG4gKiBBIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIFRhc2tDb21wbGV0ZWRDYWxsYmFjayBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IHR5cGUgQ3JlYXRlVGFza0NvbXBsZXRlZENhbGxiYWNrID0gKHRhc2tRdWV1ZTogVGFza1F1ZXVlKSA9PiBUYXNrQ29tcGxldGVkQ2FsbGJhY2s7XG5cbi8qKlxuICogQSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb25jZSBhIHRhc2sgaGFzIGJlZW4gcHJvY2Vzc2VkLlxuICovXG5leHBvcnQgdHlwZSBUYXNrQ29tcGxldGVkQ2FsbGJhY2sgPVxuICAgICh0YXNrOiBUYXNrLCBvdXRjb21lOiBUYXNrUHJvY2Vzc2luZ091dGNvbWUsIG1lc3NhZ2U6IHN0cmluZ3xudWxsKSA9PiB2b2lkO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIG91dGNvbWUgb2YgcHJvY2Vzc2luZyBhIGBUYXNrYC5cbiAqL1xuZXhwb3J0IGNvbnN0IGVudW0gVGFza1Byb2Nlc3NpbmdPdXRjb21lIHtcbiAgLyoqIFN1Y2Nlc3NmdWxseSBwcm9jZXNzZWQgdGhlIHRhcmdldCBmb3JtYXQgcHJvcGVydHkuICovXG4gIFByb2Nlc3NlZCxcbiAgLyoqIEZhaWxlZCB0byBwcm9jZXNzIHRoZSB0YXJnZXQgZm9ybWF0LiAqL1xuICBGYWlsZWQsXG59XG5cbi8qKlxuICogQSB3cmFwcGVyIGFyb3VuZCBhIGxpc3Qgb2YgdGFza3MgYW5kIHByb3ZpZGluZyB1dGlsaXR5IG1ldGhvZHMgZm9yIGdldHRpbmcgdGhlIG5leHQgdGFzayBvZlxuICogaW50ZXJlc3QgYW5kIGRldGVybWluaW5nIHdoZW4gYWxsIHRhc2tzIGhhdmUgYmVlbiBjb21wbGV0ZWQuXG4gKlxuICogKFRoaXMgYWxsb3dzIGRpZmZlcmVudCBpbXBsZW1lbnRhdGlvbnMgdG8gaW1wb3NlIGRpZmZlcmVudCBjb25zdHJhaW50cyBvbiB3aGVuIGEgdGFzaydzXG4gKiBwcm9jZXNzaW5nIGNhbiBzdGFydC4pXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGFza1F1ZXVlIHtcbiAgLyoqIFdoZXRoZXIgYWxsIHRhc2tzIGhhdmUgYmVlbiBjb21wbGV0ZWQuICovXG4gIGFsbFRhc2tzQ29tcGxldGVkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5leHQgdGFzayB3aG9zZSBwcm9jZXNzaW5nIGNhbiBzdGFydCAoaWYgYW55KS5cbiAgICpcbiAgICogVGhpcyBpbXBsaWNpdGx5IG1hcmtzIHRoZSB0YXNrIGFzIGluLXByb2dyZXNzLlxuICAgKiAoVGhpcyBpbmZvcm1hdGlvbiBpcyB1c2VkIHRvIGRldGVybWluZSB3aGV0aGVyIGFsbCB0YXNrcyBoYXZlIGJlZW4gY29tcGxldGVkLilcbiAgICpcbiAgICogQHJldHVybiBUaGUgbmV4dCB0YXNrIGF2YWlsYWJsZSBmb3IgcHJvY2Vzc2luZyBvciBgbnVsbGAsIGlmIG5vIHRhc2sgY2FuIGJlIHByb2Nlc3NlZCBhdCB0aGVcbiAgICogICAgICAgICBtb21lbnQgKGluY2x1ZGluZyBpZiB0aGVyZSBhcmUgbm8gbW9yZSB1bnByb2Nlc3NlZCB0YXNrcykuXG4gICAqL1xuICBnZXROZXh0VGFzaygpOiBUYXNrfG51bGw7XG5cbiAgLyoqXG4gICAqIE1hcmsgYSB0YXNrIGFzIGNvbXBsZXRlZC5cbiAgICpcbiAgICogVGhpcyByZW1vdmVzIHRoZSB0YXNrIGZyb20gdGhlIGludGVybmFsIGxpc3Qgb2YgaW4tcHJvZ3Jlc3MgdGFza3MuXG4gICAqIChUaGlzIGluZm9ybWF0aW9uIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYWxsIHRhc2tzIGhhdmUgYmVlbiBjb21wbGV0ZWQuKVxuICAgKlxuICAgKiBAcGFyYW0gdGFzayBUaGUgdGFzayB0byBtYXJrIGFzIGNvbXBsZXRlZC5cbiAgICovXG4gIG1hcmtBc0NvbXBsZXRlZCh0YXNrOiBUYXNrKTogdm9pZDtcblxuICAvKipcbiAgICogTWFyayBhIHRhc2sgYXMgZmFpbGVkLlxuICAgKlxuICAgKiBEbyBub3QgcHJvY2VzcyB0aGUgdGFza3MgdGhhdCBkZXBlbmQgdXBvbiB0aGUgZ2l2ZW4gdGFzay5cbiAgICovXG4gIG1hcmtBc0ZhaWxlZCh0YXNrOiBUYXNrKTogdm9pZDtcblxuICAvKipcbiAgICogTWFyayBhIHRhc2sgYXMgbm90IHByb2Nlc3NlZCAoaS5lLiBhZGQgYW4gaW4tcHJvZ3Jlc3MgdGFzayBiYWNrIHRvIHRoZSBxdWV1ZSkuXG4gICAqXG4gICAqIFRoaXMgcmVtb3ZlcyB0aGUgdGFzayBmcm9tIHRoZSBpbnRlcm5hbCBsaXN0IG9mIGluLXByb2dyZXNzIHRhc2tzIGFuZCBhZGRzIGl0IGJhY2sgdG8gdGhlIGxpc3RcbiAgICogb2YgcGVuZGluZyB0YXNrcy5cbiAgICpcbiAgICogQHBhcmFtIHRhc2sgVGhlIHRhc2sgdG8gbWFyayBhcyBub3QgcHJvY2Vzc2VkLlxuICAgKi9cbiAgbWFya0FzVW5wcm9jZXNzZWQodGFzazogVGFzayk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdGFzayBxdWV1ZSAoZm9yIGRlYnVnZ2luZyBwdXJwb3NlcykuXG4gICAqXG4gICAqIEByZXR1cm4gQSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHRhc2sgcXVldWUuXG4gICAqL1xuICB0b1N0cmluZygpOiBzdHJpbmc7XG59XG4iXX0=