(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@angular/compiler-cli/ngcc/src/migrations/migration", ["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlncmF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tcGlsZXItY2xpL25nY2Mvc3JjL21pZ3JhdGlvbnMvbWlncmF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgKiBhcyB0cyBmcm9tICd0eXBlc2NyaXB0JztcblxuaW1wb3J0IHtNZXRhZGF0YVJlYWRlcn0gZnJvbSAnLi4vLi4vLi4vc3JjL25ndHNjL21ldGFkYXRhJztcbmltcG9ydCB7UGFydGlhbEV2YWx1YXRvcn0gZnJvbSAnLi4vLi4vLi4vc3JjL25ndHNjL3BhcnRpYWxfZXZhbHVhdG9yJztcbmltcG9ydCB7Q2xhc3NEZWNsYXJhdGlvbiwgRGVjb3JhdG9yfSBmcm9tICcuLi8uLi8uLi9zcmMvbmd0c2MvcmVmbGVjdGlvbic7XG5pbXBvcnQge0hhbmRsZXJGbGFnc30gZnJvbSAnLi4vLi4vLi4vc3JjL25ndHNjL3RyYW5zZm9ybSc7XG5pbXBvcnQge05nY2NSZWZsZWN0aW9uSG9zdH0gZnJvbSAnLi4vaG9zdC9uZ2NjX2hvc3QnO1xuXG5cbi8qKlxuICogSW1wbGVtZW50IHRoaXMgaW50ZXJmYWNlIGFuZCBhZGQgaXQgdG8gdGhlIGBEZWNvcmF0aW9uQW5hbHl6ZXIubWlncmF0aW9uc2AgY29sbGVjdGlvbiB0byBnZXQgbmdjY1xuICogdG8gbW9kaWZ5IHRoZSBhbmFseXNpcyBvZiB0aGUgZGVjb3JhdG9ycyBpbiB0aGUgcHJvZ3JhbSBpbiBvcmRlciB0byBtaWdyYXRlIG9sZGVyIGNvZGUgdG8gd29ya1xuICogd2l0aCBJdnkuXG4gKlxuICogYE1pZ3JhdGlvbi5hcHBseSgpYCBpcyBjYWxsZWQgZm9yIGV2ZXJ5IGNsYXNzIGluIHRoZSBwcm9ncmFtIGJlaW5nIGNvbXBpbGVkIGJ5IG5nY2MuXG4gKlxuICogTm90ZSB0aGF0IHRoZSB1bmRlcmx5aW5nIHByb2dyYW0gY291bGQgYmUgaW4gYSB2YXJpZXR5IG9mIGRpZmZlcmVudCBmb3JtYXRzLCBlLmcuIEVTMjAxNSwgRVM1LFxuICogVU1ELCBDb21tb25KUyBldGMuIFRoaXMgbWVhbnMgdGhhdCBhbiBhdXRob3Igb2YgYSBgTWlncmF0aW9uYCBzaG91bGQgbm90IGF0dGVtcHQgdG8gbmF2aWdhdGUgYW5kXG4gKiBtYW5pcHVsYXRlIHRoZSBBU1Qgbm9kZXMgZGlyZWN0bHkuIEluc3RlYWQsIHRoZSBgTWlncmF0aW9uSG9zdGAgaW50ZXJmYWNlLCBwYXNzZWQgdG8gdGhlXG4gKiBgTWlncmF0aW9uYCwgcHJvdmlkZXMgYWNjZXNzIHRvIGEgYE1ldGFkYXRhUmVhZGVyYCwgYFJlZmxlY3Rpb25Ib3N0YCBhbmQgYFBhcnRpYWxFdmFsdWF0b3JgXG4gKiBpbnRlcmZhY2VzLCB3aGljaCBzaG91bGQgYmUgdXNlZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNaWdyYXRpb24ge1xuICBhcHBseShjbGF6ejogQ2xhc3NEZWNsYXJhdGlvbiwgaG9zdDogTWlncmF0aW9uSG9zdCk6IHRzLkRpYWdub3N0aWN8bnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNaWdyYXRpb25Ib3N0IHtcbiAgLyoqIFByb3ZpZGVzIGFjY2VzcyB0byB0aGUgZGVjb3JhdG9yIGluZm9ybWF0aW9uIGFzc29jaWF0ZWQgd2l0aCBjbGFzc2VzLiAqL1xuICByZWFkb25seSBtZXRhZGF0YTogTWV0YWRhdGFSZWFkZXI7XG4gIC8qKiBQcm92aWRlcyBhY2Nlc3MgdG8gbmF2aWdhdGUgdGhlIEFTVCBpbiBhIGZvcm1hdC1hZ25vc3RpYyBtYW5uZXIuICovXG4gIHJlYWRvbmx5IHJlZmxlY3Rpb25Ib3N0OiBOZ2NjUmVmbGVjdGlvbkhvc3Q7XG4gIC8qKiBFbmFibGVzIGV4cHJlc3Npb25zIHRvIGJlIHN0YXRpY2FsbHkgZXZhbHVhdGVkIGluIHRoZSBjb250ZXh0IG9mIHRoZSBwcm9ncmFtLiAqL1xuICByZWFkb25seSBldmFsdWF0b3I6IFBhcnRpYWxFdmFsdWF0b3I7XG4gIC8qKlxuICAgKiBBc3NvY2lhdGUgYSBuZXcgc3ludGhlc2l6ZWQgZGVjb3JhdG9yLCB3aGljaCBkaWQgbm90IGFwcGVhciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLCB3aXRoIGFcbiAgICogZ2l2ZW4gY2xhc3MuXG4gICAqIEBwYXJhbSBjbGF6eiB0aGUgY2xhc3MgdG8gcmVjZWl2ZSB0aGUgbmV3IGRlY29yYXRvci5cbiAgICogQHBhcmFtIGRlY29yYXRvciB0aGUgZGVjb3JhdG9yIHRvIGluamVjdC5cbiAgICovXG4gIGluamVjdFN5bnRoZXRpY0RlY29yYXRvcihjbGF6ejogQ2xhc3NEZWNsYXJhdGlvbiwgZGVjb3JhdG9yOiBEZWNvcmF0b3IsIGZsYWdzPzogSGFuZGxlckZsYWdzKTpcbiAgICAgIHZvaWQ7XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBhbGwgZGVjb3JhdG9ycyB0aGF0IGFyZSBhc3NvY2lhdGVkIHdpdGggdGhlIGNsYXNzLCBpbmNsdWRpbmcgc3ludGhldGljIGRlY29yYXRvcnNcbiAgICogdGhhdCBoYXZlIGJlZW4gaW5qZWN0ZWQgYmVmb3JlLlxuICAgKiBAcGFyYW0gY2xhenogdGhlIGNsYXNzIGZvciB3aGljaCBhbGwgZGVjb3JhdG9ycyBhcmUgcmV0cmlldmVkLlxuICAgKiBAcmV0dXJucyB0aGUgbGlzdCBvZiB0aGUgZGVjb3JhdG9ycywgb3IgbnVsbCBpZiB0aGUgY2xhc3Mgd2FzIG5vdCBkZWNvcmF0ZWQuXG4gICAqL1xuICBnZXRBbGxEZWNvcmF0b3JzKGNsYXp6OiBDbGFzc0RlY2xhcmF0aW9uKTogRGVjb3JhdG9yW118bnVsbDtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwcm92aWRlZCBjbGFzcyBpbiB3aXRoaW4gc2NvcGUgb2YgdGhlIGVudHJ5LXBvaW50IHRoYXQgaXMgY3VycmVudGx5XG4gICAqIGJlaW5nIGNvbXBpbGVkLlxuICAgKiBAcGFyYW0gY2xhenogdGhlIGNsYXNzIGZvciB3aGljaCB0byBkZXRlcm1pbmUgd2hldGhlciBpdCBpcyB3aXRoaW4gdGhlIGN1cnJlbnQgZW50cnktcG9pbnQuXG4gICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIGZpbGUgaXMgcGFydCBvZiB0aGUgY29tcGlsZWQgZW50cnktcG9pbnQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGlzSW5TY29wZShjbGF6ejogQ2xhc3NEZWNsYXJhdGlvbik6IGJvb2xlYW47XG59XG4iXX0=