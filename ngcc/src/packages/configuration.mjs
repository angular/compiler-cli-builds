/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { createHash } from 'crypto';
import { satisfies } from 'semver';
import * as vm from 'vm';
/**
 * The default configuration for ngcc.
 *
 * This is the ultimate fallback configuration that ngcc will use if there is no configuration
 * for a package at the package level or project level.
 *
 * This configuration is for packages that are "dead" - i.e. no longer maintained and so are
 * unlikely to be fixed to work with ngcc, nor provide a package level config of their own.
 *
 * The fallback process for looking up configuration is:
 *
 * Project -> Package -> Default
 *
 * If a package provides its own configuration then that would override this default one.
 *
 * Also application developers can always provide configuration at their project level which
 * will override everything else.
 *
 * Note that the fallback is package based not entry-point based.
 * For example, if a there is configuration for a package at the project level this will replace all
 * entry-point configurations that may have been provided in the package level or default level
 * configurations, even if the project level configuration does not provide for a given entry-point.
 */
export const DEFAULT_NGCC_CONFIG = {
    packages: {
        // Add default package configuration here. For example:
        // '@angular/fire@^5.2.0': {
        //   entryPoints: {
        //     './database-deprecated': {ignore: true},
        //   },
        // },
        // The package does not contain any `.metadata.json` files in the root directory but only inside
        // `dist/`. Without this config, ngcc does not realize this is a ViewEngine-built Angular
        // package that needs to be compiled to Ivy.
        'angular2-highcharts': {
            entryPoints: {
                '.': {
                    override: {
                        main: './index.js',
                    },
                },
            },
        },
        // The `dist/` directory has a duplicate `package.json` pointing to the same files, which (under
        // certain configurations) can causes ngcc to try to process the files twice and fail.
        // Ignore the `dist/` entry-point.
        'ng2-dragula': {
            entryPoints: {
                './dist': { ignore: true },
            },
        },
    },
    locking: {
        retryDelay: 500,
        retryAttempts: 500,
    }
};
const NGCC_CONFIG_FILENAME = 'ngcc.config.js';
/**
 * The processed package level configuration as a result of processing a raw package level config.
 */
export class ProcessedNgccPackageConfig {
    constructor(fs, packagePath, { entryPoints = {}, ignorableDeepImportMatchers = [], }) {
        const absolutePathEntries = Object.entries(entryPoints).map(([relativePath, config]) => [fs.resolve(packagePath, relativePath), config]);
        this.packagePath = packagePath;
        this.entryPoints = new Map(absolutePathEntries);
        this.ignorableDeepImportMatchers = ignorableDeepImportMatchers;
    }
}
/**
 * Ngcc has a hierarchical configuration system that lets us "fix up" packages that do not
 * work with ngcc out of the box.
 *
 * There are three levels at which configuration can be declared:
 *
 * * Default level - ngcc comes with built-in configuration for well known cases.
 * * Package level - a library author publishes a configuration with their package to fix known
 *   issues.
 * * Project level - the application developer provides a configuration that fixes issues specific
 *   to the libraries used in their application.
 *
 * Ngcc will match configuration based on the package name but also on its version. This allows
 * configuration to provide different fixes to different version ranges of a package.
 *
 * * Package level configuration is specific to the package version where the configuration is
 *   found.
 * * Default and project level configuration should provide version ranges to ensure that the
 *   configuration is only applied to the appropriate versions of a package.
 *
 * When getting a configuration for a package (via `getConfig()`) the caller should provide the
 * version of the package in question, if available. If it is not provided then the first available
 * configuration for a package is returned.
 */
export class NgccConfiguration {
    constructor(fs, baseDir) {
        this.fs = fs;
        this.cache = new Map();
        this.defaultConfig = this.processProjectConfig(DEFAULT_NGCC_CONFIG);
        this.projectConfig = this.processProjectConfig(this.loadProjectConfig(baseDir));
        this.hash = this.computeHash();
    }
    /**
     * Get the configuration options for locking the ngcc process.
     */
    getLockingConfig() {
        let { retryAttempts, retryDelay } = this.projectConfig.locking;
        if (retryAttempts === undefined) {
            retryAttempts = this.defaultConfig.locking.retryAttempts;
        }
        if (retryDelay === undefined) {
            retryDelay = this.defaultConfig.locking.retryDelay;
        }
        return { retryAttempts, retryDelay };
    }
    /**
     * Get a configuration for the given `version` of a package at `packagePath`.
     *
     * @param packageName The name of the package whose config we want.
     * @param packagePath The path to the package whose config we want.
     * @param version The version of the package whose config we want, or `null` if the package's
     * package.json did not exist or was invalid.
     */
    getPackageConfig(packageName, packagePath, version) {
        const rawPackageConfig = this.getRawPackageConfig(packageName, packagePath, version);
        return new ProcessedNgccPackageConfig(this.fs, packagePath, rawPackageConfig);
    }
    getRawPackageConfig(packageName, packagePath, version) {
        const cacheKey = packageName + (version !== null ? `@${version}` : '');
        if (this.cache.has(cacheKey)) {
            return this.cache.get(cacheKey);
        }
        const projectLevelConfig = this.projectConfig.packages ?
            findSatisfactoryVersion(this.projectConfig.packages[packageName], version) :
            null;
        if (projectLevelConfig !== null) {
            this.cache.set(cacheKey, projectLevelConfig);
            return projectLevelConfig;
        }
        const packageLevelConfig = this.loadPackageConfig(packagePath, version);
        if (packageLevelConfig !== null) {
            this.cache.set(cacheKey, packageLevelConfig);
            return packageLevelConfig;
        }
        const defaultLevelConfig = this.defaultConfig.packages ?
            findSatisfactoryVersion(this.defaultConfig.packages[packageName], version) :
            null;
        if (defaultLevelConfig !== null) {
            this.cache.set(cacheKey, defaultLevelConfig);
            return defaultLevelConfig;
        }
        return { versionRange: '*' };
    }
    processProjectConfig(projectConfig) {
        const processedConfig = { packages: {}, locking: {} };
        // locking configuration
        if (projectConfig.locking !== undefined) {
            processedConfig.locking = projectConfig.locking;
        }
        // packages configuration
        for (const packageNameAndVersion in projectConfig.packages) {
            const packageConfig = projectConfig.packages[packageNameAndVersion];
            if (packageConfig) {
                const [packageName, versionRange = '*'] = this.splitNameAndVersion(packageNameAndVersion);
                const packageConfigs = processedConfig.packages[packageName] || (processedConfig.packages[packageName] = []);
                packageConfigs.push(Object.assign(Object.assign({}, packageConfig), { versionRange }));
            }
        }
        return processedConfig;
    }
    loadProjectConfig(baseDir) {
        const configFilePath = this.fs.join(baseDir, NGCC_CONFIG_FILENAME);
        if (this.fs.exists(configFilePath)) {
            try {
                return this.evalSrcFile(configFilePath);
            }
            catch (e) {
                throw new Error(`Invalid project configuration file at "${configFilePath}": ` + e.message);
            }
        }
        else {
            return { packages: {} };
        }
    }
    loadPackageConfig(packagePath, version) {
        const configFilePath = this.fs.join(packagePath, NGCC_CONFIG_FILENAME);
        if (this.fs.exists(configFilePath)) {
            try {
                const packageConfig = this.evalSrcFile(configFilePath);
                return Object.assign(Object.assign({}, packageConfig), { versionRange: version || '*' });
            }
            catch (e) {
                throw new Error(`Invalid package configuration file at "${configFilePath}": ` + e.message);
            }
        }
        else {
            return null;
        }
    }
    evalSrcFile(srcPath) {
        const src = this.fs.readFile(srcPath);
        const theExports = {};
        const sandbox = {
            module: { exports: theExports },
            exports: theExports,
            require,
            __dirname: this.fs.dirname(srcPath),
            __filename: srcPath
        };
        vm.runInNewContext(src, sandbox, { filename: srcPath });
        return sandbox.module.exports;
    }
    splitNameAndVersion(packageNameAndVersion) {
        const versionIndex = packageNameAndVersion.lastIndexOf('@');
        // Note that > 0 is because we don't want to match @ at the start of the line
        // which is what you would have with a namespaced package, e.g. `@angular/common`.
        return versionIndex > 0 ?
            [
                packageNameAndVersion.substring(0, versionIndex),
                packageNameAndVersion.substring(versionIndex + 1),
            ] :
            [packageNameAndVersion, undefined];
    }
    computeHash() {
        return createHash('md5').update(JSON.stringify(this.projectConfig)).digest('hex');
    }
}
function findSatisfactoryVersion(configs, version) {
    if (configs === undefined) {
        return null;
    }
    if (version === null) {
        // The package has no version (!) - perhaps the entry-point was from a deep import, which made
        // it impossible to find the package.json.
        // So just return the first config that matches the package name.
        return configs[0];
    }
    return configs.find(config => satisfies(version, config.versionRange, { includePrerelease: true })) ||
        null;
}
//# sourceMappingURL=data:application/json;base64,