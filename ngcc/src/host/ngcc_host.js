(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@angular/compiler-cli/ngcc/src/host/ngcc_host", ["require", "exports", "typescript"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var ts = require("typescript");
    exports.PRE_R3_MARKER = '__PRE_R3__';
    exports.POST_R3_MARKER = '__POST_R3__';
    function isSwitchableVariableDeclaration(node) {
        return ts.isVariableDeclaration(node) && !!node.initializer &&
            ts.isIdentifier(node.initializer) && node.initializer.text.endsWith(exports.PRE_R3_MARKER);
    }
    exports.isSwitchableVariableDeclaration = isSwitchableVariableDeclaration;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdjY19ob3N0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tcGlsZXItY2xpL25nY2Mvc3JjL2hvc3QvbmdjY19ob3N0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBQUE7Ozs7OztPQU1HO0lBQ0gsK0JBQWlDO0lBSXBCLFFBQUEsYUFBYSxHQUFHLFlBQVksQ0FBQztJQUM3QixRQUFBLGNBQWMsR0FBRyxhQUFhLENBQUM7SUFHNUMsU0FBZ0IsK0JBQStCLENBQUMsSUFBYTtRQUUzRCxPQUFPLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVc7WUFDdkQsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLHFCQUFhLENBQUMsQ0FBQztJQUN6RixDQUFDO0lBSkQsMEVBSUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgKiBhcyB0cyBmcm9tICd0eXBlc2NyaXB0JztcblxuaW1wb3J0IHtDbGFzc0RlY2xhcmF0aW9uLCBDb25jcmV0ZURlY2xhcmF0aW9uLCBEZWNsYXJhdGlvbiwgRGVjb3JhdG9yLCBSZWZsZWN0aW9uSG9zdH0gZnJvbSAnLi4vLi4vLi4vc3JjL25ndHNjL3JlZmxlY3Rpb24nO1xuXG5leHBvcnQgY29uc3QgUFJFX1IzX01BUktFUiA9ICdfX1BSRV9SM19fJztcbmV4cG9ydCBjb25zdCBQT1NUX1IzX01BUktFUiA9ICdfX1BPU1RfUjNfXyc7XG5cbmV4cG9ydCB0eXBlIFN3aXRjaGFibGVWYXJpYWJsZURlY2xhcmF0aW9uID0gdHMuVmFyaWFibGVEZWNsYXJhdGlvbiAmIHtpbml0aWFsaXplcjogdHMuSWRlbnRpZmllcn07XG5leHBvcnQgZnVuY3Rpb24gaXNTd2l0Y2hhYmxlVmFyaWFibGVEZWNsYXJhdGlvbihub2RlOiB0cy5Ob2RlKTpcbiAgICBub2RlIGlzIFN3aXRjaGFibGVWYXJpYWJsZURlY2xhcmF0aW9uIHtcbiAgcmV0dXJuIHRzLmlzVmFyaWFibGVEZWNsYXJhdGlvbihub2RlKSAmJiAhIW5vZGUuaW5pdGlhbGl6ZXIgJiZcbiAgICAgIHRzLmlzSWRlbnRpZmllcihub2RlLmluaXRpYWxpemVyKSAmJiBub2RlLmluaXRpYWxpemVyLnRleHQuZW5kc1dpdGgoUFJFX1IzX01BUktFUik7XG59XG5cbi8qKlxuICogQSBzdHJ1Y3R1cmUgcmV0dXJuZWQgZnJvbSBgZ2V0TW9kdWxlV2l0aFByb3ZpZGVySW5mb2AgdGhhdCBkZXNjcmliZXMgZnVuY3Rpb25zXG4gKiB0aGF0IHJldHVybiBNb2R1bGVXaXRoUHJvdmlkZXJzIG9iamVjdHMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTW9kdWxlV2l0aFByb3ZpZGVyc0Z1bmN0aW9uIHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBkZWNsYXJlZCBmdW5jdGlvbi5cbiAgICovXG4gIG5hbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBkZWNsYXJhdGlvbiBvZiB0aGUgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBgTW9kdWxlV2l0aFByb3ZpZGVyc2Agb2JqZWN0LlxuICAgKi9cbiAgZGVjbGFyYXRpb246IHRzLlNpZ25hdHVyZURlY2xhcmF0aW9uO1xuICAvKipcbiAgICogRGVjbGFyYXRpb24gb2YgdGhlIGNvbnRhaW5pbmcgY2xhc3MgKGlmIHRoaXMgaXMgYSBtZXRob2QpXG4gICAqL1xuICBjb250YWluZXI6IHRzLkRlY2xhcmF0aW9ufG51bGw7XG4gIC8qKlxuICAgKiBUaGUgZGVjbGFyYXRpb24gb2YgdGhlIGNsYXNzIHRoYXQgdGhlIGBuZ01vZHVsZWAgcHJvcGVydHkgb24gdGhlIGBNb2R1bGVXaXRoUHJvdmlkZXJzYCBvYmplY3RcbiAgICogcmVmZXJzIHRvLlxuICAgKi9cbiAgbmdNb2R1bGU6IENvbmNyZXRlRGVjbGFyYXRpb248Q2xhc3NEZWNsYXJhdGlvbj47XG59XG5cbi8qKlxuICogVGhlIHN5bWJvbCBjb3JyZXNwb25kaW5nIHRvIGEgXCJjbGFzc1wiIGRlY2xhcmF0aW9uLiBJLmUuIGEgYHRzLlN5bWJvbGAgd2hvc2UgYHZhbHVlRGVjbGFyYXRpb25gIGlzXG4gKiBhIGBDbGFzc0RlY2xhcmF0aW9uYC5cbiAqL1xuZXhwb3J0IHR5cGUgQ2xhc3NTeW1ib2wgPSB0cy5TeW1ib2wgJiB7dmFsdWVEZWNsYXJhdGlvbjogQ2xhc3NEZWNsYXJhdGlvbn07XG5cbi8qKlxuICogQSByZXByZXNlbnRhdGlvbiBvZiBhIGNsYXNzIHRoYXQgYWNjb3VudHMgZm9yIHRoZSBwb3RlbnRpYWwgZXhpc3RlbmNlIG9mIHR3byBgQ2xhc3NTeW1ib2xgcyBmb3IgYVxuICogZ2l2ZW4gY2xhc3MsIGFzIHRoZSBjb21waWxlZCBKYXZhU2NyaXB0IGJ1bmRsZXMgdGhhdCBuZ2NjIHJlZmxlY3RzIG9uIGNhbiBoYXZlIHR3byBkZWNsYXJhdGlvbnMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmdjY0NsYXNzU3ltYm9sIHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBjbGFzcy5cbiAgICovXG4gIG5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogUmVwcmVzZW50cyB0aGUgc3ltYm9sIGNvcnJlc3BvbmRpbmcgd2l0aCB0aGUgb3V0ZXIgZGVjbGFyYXRpb24gb2YgdGhlIGNsYXNzLiBUaGlzIHNob3VsZCBiZVxuICAgKiBjb25zaWRlcmVkIHRoZSBwdWJsaWMgY2xhc3Mgc3ltYm9sLCBpLmUuIGl0cyBkZWNsYXJhdGlvbiBpcyB2aXNpYmxlIHRvIHRoZSByZXN0IG9mIHRoZSBwcm9ncmFtLlxuICAgKi9cbiAgZGVjbGFyYXRpb246IENsYXNzU3ltYm9sO1xuXG4gIC8qKlxuICAgKiBSZXByZXNlbnRzIHRoZSBzeW1ib2wgY29ycmVzcG9uZGluZyB3aXRoIHRoZSBpbm5lciBkZWNsYXJhdGlvbiBvZiB0aGUgY2xhc3MsIHJlZmVycmVkIHRvIGFzIGl0c1xuICAgKiBcImltcGxlbWVudGF0aW9uXCIuIFRoaXMgaXMgbm90IG5lY2Vzc2FyaWx5IGEgYENsYXNzU3ltYm9sYCBidXQgcmF0aGVyIGp1c3QgYSBgdHMuU3ltYm9sYCwgYXMgdGhlXG4gICAqIGlubmVyIGRlY2xhcmF0aW9uIGRvZXMgbm90IG5lZWQgdG8gc2F0aXNmeSB0aGUgcmVxdWlyZW1lbnRzIGltcG9zZWQgb24gYSBwdWJsaWNseSB2aXNpYmxlIGNsYXNzXG4gICAqIGRlY2xhcmF0aW9uLlxuICAgKi9cbiAgaW1wbGVtZW50YXRpb246IHRzLlN5bWJvbDtcbn1cblxuLyoqXG4gKiBBIHJlZmxlY3Rpb24gaG9zdCB0aGF0IGhhcyBleHRyYSBtZXRob2RzIGZvciBsb29raW5nIGF0IG5vbi1UeXBlc2NyaXB0IHBhY2thZ2UgZm9ybWF0c1xuICovXG5leHBvcnQgaW50ZXJmYWNlIE5nY2NSZWZsZWN0aW9uSG9zdCBleHRlbmRzIFJlZmxlY3Rpb25Ib3N0IHtcbiAgLyoqXG4gICAqIEZpbmQgYSBzeW1ib2wgZm9yIGEgZGVjbGFyYXRpb24gdGhhdCB3ZSB0aGluayBpcyBhIGNsYXNzLlxuICAgKiBAcGFyYW0gZGVjbGFyYXRpb24gVGhlIGRlY2xhcmF0aW9uIHdob3NlIHN5bWJvbCB3ZSBhcmUgZmluZGluZ1xuICAgKiBAcmV0dXJucyB0aGUgc3ltYm9sIGZvciB0aGUgZGVjbGFyYXRpb24gb3IgYHVuZGVmaW5lZGAgaWYgaXQgaXMgbm90XG4gICAqIGEgXCJjbGFzc1wiIG9yIGhhcyBubyBzeW1ib2wuXG4gICAqL1xuICBnZXRDbGFzc1N5bWJvbChkZWNsYXJhdGlvbjogdHMuTm9kZSk6IE5nY2NDbGFzc1N5bWJvbHx1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFNlYXJjaCB0aGUgZ2l2ZW4gbW9kdWxlIGZvciB2YXJpYWJsZSBkZWNsYXJhdGlvbnMgaW4gd2hpY2ggdGhlIGluaXRpYWxpemVyXG4gICAqIGlzIGFuIGlkZW50aWZpZXIgbWFya2VkIHdpdGggdGhlIGBQUkVfUjNfTUFSS0VSYC5cbiAgICogQHBhcmFtIG1vZHVsZSBUaGUgbW9kdWxlIGluIHdoaWNoIHRvIHNlYXJjaCBmb3Igc3dpdGNoYWJsZSBkZWNsYXJhdGlvbnMuXG4gICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHZhcmlhYmxlIGRlY2xhcmF0aW9ucyB0aGF0IG1hdGNoLlxuICAgKi9cbiAgZ2V0U3dpdGNoYWJsZURlY2xhcmF0aW9ucyhtb2R1bGU6IHRzLk5vZGUpOiBTd2l0Y2hhYmxlVmFyaWFibGVEZWNsYXJhdGlvbltdO1xuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYWxsIGRlY29yYXRvcnMgb2YgYSBnaXZlbiBjbGFzcyBzeW1ib2wuXG4gICAqIEBwYXJhbSBzeW1ib2wgQ2xhc3Mgc3ltYm9sIHRoYXQgY2FuIHJlZmVyIHRvIGEgZGVjbGFyYXRpb24gd2hpY2ggY2FuIGhvbGQgZGVjb3JhdG9ycy5cbiAgICogQHJldHVybnMgQW4gYXJyYXkgb2YgZGVjb3JhdG9ycyBvciBudWxsIGlmIG5vbmUgYXJlIGRlY2xhcmVkLlxuICAgKi9cbiAgZ2V0RGVjb3JhdG9yc09mU3ltYm9sKHN5bWJvbDogTmdjY0NsYXNzU3ltYm9sKTogRGVjb3JhdG9yW118bnVsbDtcblxuICAvKipcbiAgICogUmV0cmlldmVzIGFsbCBjbGFzcyBzeW1ib2xzIG9mIGEgZ2l2ZW4gc291cmNlIGZpbGUuXG4gICAqIEBwYXJhbSBzb3VyY2VGaWxlIFRoZSBzb3VyY2UgZmlsZSB0byBzZWFyY2ggZm9yIGNsYXNzZXMuXG4gICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIGZvdW5kIGNsYXNzIHN5bWJvbHMuXG4gICAqL1xuICBmaW5kQ2xhc3NTeW1ib2xzKHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBOZ2NjQ2xhc3NTeW1ib2xbXTtcblxuICAvKipcbiAgICogU2VhcmNoIHRoZSBnaXZlbiBzb3VyY2UgZmlsZSBmb3IgZXhwb3J0ZWQgZnVuY3Rpb25zIGFuZCBzdGF0aWMgY2xhc3MgbWV0aG9kcyB0aGF0IHJldHVyblxuICAgKiBNb2R1bGVXaXRoUHJvdmlkZXJzIG9iamVjdHMuXG4gICAqIEBwYXJhbSBmIFRoZSBzb3VyY2UgZmlsZSB0byBzZWFyY2ggZm9yIHRoZXNlIGZ1bmN0aW9uc1xuICAgKiBAcmV0dXJucyBBbiBhcnJheSBvZiBpbmZvIGl0ZW1zIGFib3V0IGVhY2ggb2YgdGhlIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBNb2R1bGVXaXRoUHJvdmlkZXJzXG4gICAqIG9iamVjdHMuXG4gICAqL1xuICBnZXRNb2R1bGVXaXRoUHJvdmlkZXJzRnVuY3Rpb25zKGY6IHRzLlNvdXJjZUZpbGUpOiBNb2R1bGVXaXRoUHJvdmlkZXJzRnVuY3Rpb25bXTtcblxuICAvKipcbiAgICogRmluZCB0aGUgbGFzdCBub2RlIHRoYXQgaXMgcmVsZXZhbnQgdG8gdGhlIHNwZWNpZmllZCBjbGFzcy5cbiAgICpcbiAgICogQXMgd2VsbCBhcyB0aGUgbWFpbiBkZWNsYXJhdGlvbiwgY2xhc3NlcyBjYW4gaGF2ZSBhZGRpdGlvbmFsIHN0YXRlbWVudHMgc3VjaCBhcyBzdGF0aWNcbiAgICogcHJvcGVydGllcyAoYFNvbWVDbGFzcy5zdGF0aWNQcm9wID0gLi4uO2ApIGFuZCBkZWNvcmF0b3JzIChgX19kZWNvcmF0ZShTb21lQ2xhc3MsIC4uLik7YCkuXG4gICAqIEl0IGlzIHVzZWZ1bCB0byBrbm93IGV4YWN0bHkgd2hlcmUgdGhlIGNsYXNzIFwiZW5kc1wiIHNvIHRoYXQgd2UgY2FuIGluamVjdCBhZGRpdGlvbmFsXG4gICAqIHN0YXRlbWVudHMgYWZ0ZXIgdGhhdCBwb2ludC5cbiAgICpcbiAgICogQHBhcmFtIGNsYXNzU3ltYm9sIFRoZSBjbGFzcyB3aG9zZSBzdGF0ZW1lbnRzIHdlIHdhbnQuXG4gICAqL1xuICBnZXRFbmRPZkNsYXNzKGNsYXNzU3ltYm9sOiBOZ2NjQ2xhc3NTeW1ib2wpOiB0cy5Ob2RlO1xuXG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIGEgYERlY2xhcmF0aW9uYCBjb3JyZXNwb25kcyB3aXRoIGEga25vd24gZGVjbGFyYXRpb24gYW5kIHNldCBpdHMgYGtub3duYCBwcm9wZXJ0eVxuICAgKiB0byB0aGUgYXBwcm9wcmlhdGUgYEtub3duRGVjbGFyYXRpb25gLlxuICAgKlxuICAgKiBAcGFyYW0gZGVjbCBUaGUgYERlY2xhcmF0aW9uYCB0byBjaGVjayBvciBgbnVsbGAgaWYgdGhlcmUgaXMgbm8gZGVjbGFyYXRpb24uXG4gICAqIEByZXR1cm4gVGhlIHBhc3NlZCBpbiBgRGVjbGFyYXRpb25gIChwb3RlbnRpYWxseSBlbmhhbmNlZCB3aXRoIGEgYEtub3duRGVjbGFyYXRpb25gKS5cbiAgICovXG4gIGRldGVjdEtub3duRGVjbGFyYXRpb248VCBleHRlbmRzIERlY2xhcmF0aW9uPihkZWNsOiBUfG51bGwpOiBUfG51bGw7XG59XG4iXX0=