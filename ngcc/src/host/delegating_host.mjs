/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { isFromDtsFile } from '../../../src/ngtsc/util/src/typescript';
/**
 * A reflection host implementation that delegates reflector queries depending on whether they
 * reflect on declaration files (for dependent libraries) or source files within the entry-point
 * that is being compiled. The first type of queries are handled by the regular TypeScript
 * reflection host, whereas the other queries are handled by an `NgccReflectionHost` that is
 * specific to the entry-point's format.
 */
export class DelegatingReflectionHost {
    constructor(tsHost, ngccHost) {
        this.tsHost = tsHost;
        this.ngccHost = ngccHost;
    }
    getConstructorParameters(clazz) {
        if (isFromDtsFile(clazz)) {
            return this.tsHost.getConstructorParameters(clazz);
        }
        return this.ngccHost.getConstructorParameters(clazz);
    }
    getDeclarationOfIdentifier(id) {
        if (isFromDtsFile(id)) {
            const declaration = this.tsHost.getDeclarationOfIdentifier(id);
            return declaration !== null ? this.detectKnownDeclaration(declaration) : null;
        }
        return this.ngccHost.getDeclarationOfIdentifier(id);
    }
    getDecoratorsOfDeclaration(declaration) {
        if (isFromDtsFile(declaration)) {
            return this.tsHost.getDecoratorsOfDeclaration(declaration);
        }
        return this.ngccHost.getDecoratorsOfDeclaration(declaration);
    }
    getDefinitionOfFunction(fn) {
        if (isFromDtsFile(fn)) {
            return this.tsHost.getDefinitionOfFunction(fn);
        }
        return this.ngccHost.getDefinitionOfFunction(fn);
    }
    getDtsDeclaration(declaration) {
        if (isFromDtsFile(declaration)) {
            return this.tsHost.getDtsDeclaration(declaration);
        }
        return this.ngccHost.getDtsDeclaration(declaration);
    }
    getExportsOfModule(module) {
        if (isFromDtsFile(module)) {
            const exportMap = this.tsHost.getExportsOfModule(module);
            if (exportMap !== null) {
                exportMap.forEach(decl => this.detectKnownDeclaration(decl));
            }
            return exportMap;
        }
        return this.ngccHost.getExportsOfModule(module);
    }
    getGenericArityOfClass(clazz) {
        if (isFromDtsFile(clazz)) {
            return this.tsHost.getGenericArityOfClass(clazz);
        }
        return this.ngccHost.getGenericArityOfClass(clazz);
    }
    getImportOfIdentifier(id) {
        if (isFromDtsFile(id)) {
            return this.tsHost.getImportOfIdentifier(id);
        }
        return this.ngccHost.getImportOfIdentifier(id);
    }
    getInternalNameOfClass(clazz) {
        if (isFromDtsFile(clazz)) {
            return this.tsHost.getInternalNameOfClass(clazz);
        }
        return this.ngccHost.getInternalNameOfClass(clazz);
    }
    getAdjacentNameOfClass(clazz) {
        if (isFromDtsFile(clazz)) {
            return this.tsHost.getAdjacentNameOfClass(clazz);
        }
        return this.ngccHost.getAdjacentNameOfClass(clazz);
    }
    getMembersOfClass(clazz) {
        if (isFromDtsFile(clazz)) {
            return this.tsHost.getMembersOfClass(clazz);
        }
        return this.ngccHost.getMembersOfClass(clazz);
    }
    getVariableValue(declaration) {
        if (isFromDtsFile(declaration)) {
            return this.tsHost.getVariableValue(declaration);
        }
        return this.ngccHost.getVariableValue(declaration);
    }
    hasBaseClass(clazz) {
        if (isFromDtsFile(clazz)) {
            return this.tsHost.hasBaseClass(clazz);
        }
        return this.ngccHost.hasBaseClass(clazz);
    }
    getBaseClassExpression(clazz) {
        if (isFromDtsFile(clazz)) {
            return this.tsHost.getBaseClassExpression(clazz);
        }
        return this.ngccHost.getBaseClassExpression(clazz);
    }
    isClass(node) {
        if (isFromDtsFile(node)) {
            return this.tsHost.isClass(node);
        }
        return this.ngccHost.isClass(node);
    }
    // Note: the methods below are specific to ngcc and the entry-point that is being compiled, so
    // they don't take declaration files into account.
    findClassSymbols(sourceFile) {
        return this.ngccHost.findClassSymbols(sourceFile);
    }
    getClassSymbol(node) {
        return this.ngccHost.getClassSymbol(node);
    }
    getDecoratorsOfSymbol(symbol) {
        return this.ngccHost.getDecoratorsOfSymbol(symbol);
    }
    getSwitchableDeclarations(module) {
        return this.ngccHost.getSwitchableDeclarations(module);
    }
    getEndOfClass(classSymbol) {
        return this.ngccHost.getEndOfClass(classSymbol);
    }
    detectKnownDeclaration(decl) {
        return this.ngccHost.detectKnownDeclaration(decl);
    }
}
//# sourceMappingURL=data:application/json;base64,