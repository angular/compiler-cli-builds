/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as ts from 'typescript';
export const PRE_R3_MARKER = '__PRE_R3__';
export const POST_R3_MARKER = '__POST_R3__';
export function isSwitchableVariableDeclaration(node) {
    return ts.isVariableDeclaration(node) && !!node.initializer &&
        ts.isIdentifier(node.initializer) && node.initializer.text.endsWith(PRE_R3_MARKER);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdjY19ob3N0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tcGlsZXItY2xpL25nY2Mvc3JjL2hvc3QvbmdjY19ob3N0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUNILE9BQU8sS0FBSyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBS2pDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxZQUFZLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQztBQUc1QyxNQUFNLFVBQVUsK0JBQStCLENBQUMsSUFBYTtJQUUzRCxPQUFPLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVc7UUFDdkQsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3pGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCAqIGFzIHRzIGZyb20gJ3R5cGVzY3JpcHQnO1xuXG5pbXBvcnQge0NsYXNzRGVjbGFyYXRpb24sIERlY2xhcmF0aW9uLCBEZWNvcmF0b3IsIFJlZmxlY3Rpb25Ib3N0fSBmcm9tICcuLi8uLi8uLi9zcmMvbmd0c2MvcmVmbGVjdGlvbic7XG5pbXBvcnQge1N5bWJvbFdpdGhWYWx1ZURlY2xhcmF0aW9ufSBmcm9tICcuLi8uLi8uLi9zcmMvbmd0c2MvdXRpbC9zcmMvdHlwZXNjcmlwdCc7XG5cbmV4cG9ydCBjb25zdCBQUkVfUjNfTUFSS0VSID0gJ19fUFJFX1IzX18nO1xuZXhwb3J0IGNvbnN0IFBPU1RfUjNfTUFSS0VSID0gJ19fUE9TVF9SM19fJztcblxuZXhwb3J0IHR5cGUgU3dpdGNoYWJsZVZhcmlhYmxlRGVjbGFyYXRpb24gPSB0cy5WYXJpYWJsZURlY2xhcmF0aW9uJntpbml0aWFsaXplcjogdHMuSWRlbnRpZmllcn07XG5leHBvcnQgZnVuY3Rpb24gaXNTd2l0Y2hhYmxlVmFyaWFibGVEZWNsYXJhdGlvbihub2RlOiB0cy5Ob2RlKTpcbiAgICBub2RlIGlzIFN3aXRjaGFibGVWYXJpYWJsZURlY2xhcmF0aW9uIHtcbiAgcmV0dXJuIHRzLmlzVmFyaWFibGVEZWNsYXJhdGlvbihub2RlKSAmJiAhIW5vZGUuaW5pdGlhbGl6ZXIgJiZcbiAgICAgIHRzLmlzSWRlbnRpZmllcihub2RlLmluaXRpYWxpemVyKSAmJiBub2RlLmluaXRpYWxpemVyLnRleHQuZW5kc1dpdGgoUFJFX1IzX01BUktFUik7XG59XG5cbi8qKlxuICogVGhlIHN5bWJvbCBjb3JyZXNwb25kaW5nIHRvIGEgXCJjbGFzc1wiIGRlY2xhcmF0aW9uLiBJLmUuIGEgYHRzLlN5bWJvbGAgd2hvc2UgYHZhbHVlRGVjbGFyYXRpb25gIGlzXG4gKiBhIGBDbGFzc0RlY2xhcmF0aW9uYC5cbiAqL1xuZXhwb3J0IHR5cGUgQ2xhc3NTeW1ib2wgPSB0cy5TeW1ib2wme3ZhbHVlRGVjbGFyYXRpb246IENsYXNzRGVjbGFyYXRpb259O1xuXG4vKipcbiAqIEEgcmVwcmVzZW50YXRpb24gb2YgYSBjbGFzcyB0aGF0IGFjY291bnRzIGZvciB0aGUgcG90ZW50aWFsIGV4aXN0ZW5jZSBvZiB0d28gYENsYXNzU3ltYm9sYHMgZm9yIGFcbiAqIGdpdmVuIGNsYXNzLCBhcyB0aGUgY29tcGlsZWQgSmF2YVNjcmlwdCBidW5kbGVzIHRoYXQgbmdjYyByZWZsZWN0cyBvbiBjYW4gaGF2ZSB0d28gZGVjbGFyYXRpb25zLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5nY2NDbGFzc1N5bWJvbCB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgY2xhc3MuXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFJlcHJlc2VudHMgdGhlIHN5bWJvbCBjb3JyZXNwb25kaW5nIHdpdGggdGhlIG91dGVyIGRlY2xhcmF0aW9uIG9mIHRoZSBjbGFzcy4gVGhpcyBzaG91bGQgYmVcbiAgICogY29uc2lkZXJlZCB0aGUgcHVibGljIGNsYXNzIHN5bWJvbCwgaS5lLiBpdHMgZGVjbGFyYXRpb24gaXMgdmlzaWJsZSB0byB0aGUgcmVzdCBvZiB0aGUgcHJvZ3JhbS5cbiAgICovXG4gIGRlY2xhcmF0aW9uOiBDbGFzc1N5bWJvbDtcblxuICAvKipcbiAgICogUmVwcmVzZW50cyB0aGUgc3ltYm9sIGNvcnJlc3BvbmRpbmcgd2l0aCB0aGUgaW5uZXIgZGVjbGFyYXRpb24gb2YgdGhlIGNsYXNzLCByZWZlcnJlZCB0byBhcyBpdHNcbiAgICogXCJpbXBsZW1lbnRhdGlvblwiLiBUaGlzIGlzIG5vdCBuZWNlc3NhcmlseSBhIGBDbGFzc1N5bWJvbGAgYnV0IHJhdGhlciBqdXN0IGEgYHRzLlN5bWJvbGAsIGFzIHRoZVxuICAgKiBpbm5lciBkZWNsYXJhdGlvbiBkb2VzIG5vdCBuZWVkIHRvIHNhdGlzZnkgdGhlIHJlcXVpcmVtZW50cyBpbXBvc2VkIG9uIGEgcHVibGljbHkgdmlzaWJsZSBjbGFzc1xuICAgKiBkZWNsYXJhdGlvbi5cbiAgICovXG4gIGltcGxlbWVudGF0aW9uOiBTeW1ib2xXaXRoVmFsdWVEZWNsYXJhdGlvbjtcblxuICAvKipcbiAgICogUmVwcmVzZW50cyB0aGUgc3ltYm9sIGNvcnJlc3BvbmRpbmcgdG8gYSB2YXJpYWJsZSB3aXRoaW4gYSBjbGFzcyBJSUZFIHRoYXQgbWF5IGJlIHVzZWQgdG9cbiAgICogYXR0YWNoIHN0YXRpYyBwcm9wZXJ0aWVzIG9yIGRlY29yYXRlZC5cbiAgICovXG4gIGFkamFjZW50PzogU3ltYm9sV2l0aFZhbHVlRGVjbGFyYXRpb247XG59XG5cbi8qKlxuICogQSByZWZsZWN0aW9uIGhvc3QgdGhhdCBoYXMgZXh0cmEgbWV0aG9kcyBmb3IgbG9va2luZyBhdCBub24tVHlwZXNjcmlwdCBwYWNrYWdlIGZvcm1hdHNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBOZ2NjUmVmbGVjdGlvbkhvc3QgZXh0ZW5kcyBSZWZsZWN0aW9uSG9zdCB7XG4gIC8qKlxuICAgKiBGaW5kIGEgc3ltYm9sIGZvciBhIGRlY2xhcmF0aW9uIHRoYXQgd2UgdGhpbmsgaXMgYSBjbGFzcy5cbiAgICogQHBhcmFtIGRlY2xhcmF0aW9uIFRoZSBkZWNsYXJhdGlvbiB3aG9zZSBzeW1ib2wgd2UgYXJlIGZpbmRpbmdcbiAgICogQHJldHVybnMgdGhlIHN5bWJvbCBmb3IgdGhlIGRlY2xhcmF0aW9uIG9yIGB1bmRlZmluZWRgIGlmIGl0IGlzIG5vdFxuICAgKiBhIFwiY2xhc3NcIiBvciBoYXMgbm8gc3ltYm9sLlxuICAgKi9cbiAgZ2V0Q2xhc3NTeW1ib2woZGVjbGFyYXRpb246IHRzLk5vZGUpOiBOZ2NjQ2xhc3NTeW1ib2x8dW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBTZWFyY2ggdGhlIGdpdmVuIG1vZHVsZSBmb3IgdmFyaWFibGUgZGVjbGFyYXRpb25zIGluIHdoaWNoIHRoZSBpbml0aWFsaXplclxuICAgKiBpcyBhbiBpZGVudGlmaWVyIG1hcmtlZCB3aXRoIHRoZSBgUFJFX1IzX01BUktFUmAuXG4gICAqIEBwYXJhbSBtb2R1bGUgVGhlIG1vZHVsZSBpbiB3aGljaCB0byBzZWFyY2ggZm9yIHN3aXRjaGFibGUgZGVjbGFyYXRpb25zLlxuICAgKiBAcmV0dXJucyBBbiBhcnJheSBvZiB2YXJpYWJsZSBkZWNsYXJhdGlvbnMgdGhhdCBtYXRjaC5cbiAgICovXG4gIGdldFN3aXRjaGFibGVEZWNsYXJhdGlvbnMobW9kdWxlOiB0cy5Ob2RlKTogU3dpdGNoYWJsZVZhcmlhYmxlRGVjbGFyYXRpb25bXTtcblxuICAvKipcbiAgICogUmV0cmlldmVzIGFsbCBkZWNvcmF0b3JzIG9mIGEgZ2l2ZW4gY2xhc3Mgc3ltYm9sLlxuICAgKiBAcGFyYW0gc3ltYm9sIENsYXNzIHN5bWJvbCB0aGF0IGNhbiByZWZlciB0byBhIGRlY2xhcmF0aW9uIHdoaWNoIGNhbiBob2xkIGRlY29yYXRvcnMuXG4gICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIGRlY29yYXRvcnMgb3IgbnVsbCBpZiBub25lIGFyZSBkZWNsYXJlZC5cbiAgICovXG4gIGdldERlY29yYXRvcnNPZlN5bWJvbChzeW1ib2w6IE5nY2NDbGFzc1N5bWJvbCk6IERlY29yYXRvcltdfG51bGw7XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBhbGwgY2xhc3Mgc3ltYm9scyBvZiBhIGdpdmVuIHNvdXJjZSBmaWxlLlxuICAgKiBAcGFyYW0gc291cmNlRmlsZSBUaGUgc291cmNlIGZpbGUgdG8gc2VhcmNoIGZvciBjbGFzc2VzLlxuICAgKiBAcmV0dXJucyBBbiBhcnJheSBvZiBmb3VuZCBjbGFzcyBzeW1ib2xzLlxuICAgKi9cbiAgZmluZENsYXNzU3ltYm9scyhzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTmdjY0NsYXNzU3ltYm9sW107XG5cbiAgLyoqXG4gICAqIEZpbmQgdGhlIGxhc3Qgbm9kZSB0aGF0IGlzIHJlbGV2YW50IHRvIHRoZSBzcGVjaWZpZWQgY2xhc3MuXG4gICAqXG4gICAqIEFzIHdlbGwgYXMgdGhlIG1haW4gZGVjbGFyYXRpb24sIGNsYXNzZXMgY2FuIGhhdmUgYWRkaXRpb25hbCBzdGF0ZW1lbnRzIHN1Y2ggYXMgc3RhdGljXG4gICAqIHByb3BlcnRpZXMgKGBTb21lQ2xhc3Muc3RhdGljUHJvcCA9IC4uLjtgKSBhbmQgZGVjb3JhdG9ycyAoYF9fZGVjb3JhdGUoU29tZUNsYXNzLCAuLi4pO2ApLlxuICAgKiBJdCBpcyB1c2VmdWwgdG8ga25vdyBleGFjdGx5IHdoZXJlIHRoZSBjbGFzcyBcImVuZHNcIiBzbyB0aGF0IHdlIGNhbiBpbmplY3QgYWRkaXRpb25hbFxuICAgKiBzdGF0ZW1lbnRzIGFmdGVyIHRoYXQgcG9pbnQuXG4gICAqXG4gICAqIEBwYXJhbSBjbGFzc1N5bWJvbCBUaGUgY2xhc3Mgd2hvc2Ugc3RhdGVtZW50cyB3ZSB3YW50LlxuICAgKi9cbiAgZ2V0RW5kT2ZDbGFzcyhjbGFzc1N5bWJvbDogTmdjY0NsYXNzU3ltYm9sKTogdHMuTm9kZTtcblxuICAvKipcbiAgICogQ2hlY2sgd2hldGhlciBhIGBEZWNsYXJhdGlvbmAgY29ycmVzcG9uZHMgd2l0aCBhIGtub3duIGRlY2xhcmF0aW9uIGFuZCBzZXQgaXRzIGBrbm93bmAgcHJvcGVydHlcbiAgICogdG8gdGhlIGFwcHJvcHJpYXRlIGBLbm93bkRlY2xhcmF0aW9uYC5cbiAgICpcbiAgICogQHBhcmFtIGRlY2wgVGhlIGBEZWNsYXJhdGlvbmAgdG8gY2hlY2suXG4gICAqIEByZXR1cm4gVGhlIHBhc3NlZCBpbiBgRGVjbGFyYXRpb25gIChwb3RlbnRpYWxseSBlbmhhbmNlZCB3aXRoIGEgYEtub3duRGVjbGFyYXRpb25gKS5cbiAgICovXG4gIGRldGVjdEtub3duRGVjbGFyYXRpb248VCBleHRlbmRzIERlY2xhcmF0aW9uPihkZWNsOiBUKTogVDtcbn1cbiJdfQ==