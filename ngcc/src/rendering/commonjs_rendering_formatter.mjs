import * as ts from 'typescript';
import { isRequireCall } from '../host/commonjs_umd_utils';
import { Esm5RenderingFormatter } from './esm5_rendering_formatter';
import { stripExtension } from './utils';
/**
 * A RenderingFormatter that works with CommonJS files, instead of `import` and `export` statements
 * the module is an IIFE with a factory function call with dependencies, which are defined in a
 * wrapper function for AMD, CommonJS and global module formats.
 */
export class CommonJsRenderingFormatter extends Esm5RenderingFormatter {
    constructor(fs, commonJsHost, isCore) {
        super(fs, commonJsHost, isCore);
        this.commonJsHost = commonJsHost;
    }
    /**
     *  Add the imports below any in situ imports as `require` calls.
     */
    addImports(output, imports, file) {
        // Avoid unnecessary work if there are no imports to add.
        if (imports.length === 0) {
            return;
        }
        const insertionPoint = this.findEndOfImports(file);
        const renderedImports = imports.map(i => `var ${i.qualifier.text} = require('${i.specifier}');\n`).join('');
        output.appendLeft(insertionPoint, renderedImports);
    }
    /**
     * Add the exports to the bottom of the file.
     */
    addExports(output, entryPointBasePath, exports, importManager, file) {
        exports.forEach(e => {
            const basePath = stripExtension(e.from);
            const relativePath = './' + this.fs.relative(this.fs.dirname(entryPointBasePath), basePath);
            const namedImport = entryPointBasePath !== basePath ?
                importManager.generateNamedImport(relativePath, e.identifier) :
                { symbol: e.identifier, moduleImport: null };
            const importNamespace = namedImport.moduleImport ? `${namedImport.moduleImport.text}.` : '';
            const exportStr = `\nexports.${e.identifier} = ${importNamespace}${namedImport.symbol};`;
            output.append(exportStr);
        });
    }
    addDirectExports(output, exports, importManager, file) {
        for (const e of exports) {
            const namedImport = importManager.generateNamedImport(e.fromModule, e.symbolName);
            const importNamespace = namedImport.moduleImport ? `${namedImport.moduleImport.text}.` : '';
            const exportStr = `\nexports.${e.asAlias} = ${importNamespace}${namedImport.symbol};`;
            output.append(exportStr);
        }
    }
    findEndOfImports(sf) {
        for (const statement of sf.statements) {
            if (ts.isExpressionStatement(statement) && isRequireCall(statement.expression)) {
                continue;
            }
            const declarations = ts.isVariableStatement(statement) ?
                Array.from(statement.declarationList.declarations) :
                [];
            if (declarations.some(d => !d.initializer || !isRequireCall(d.initializer))) {
                return statement.getStart();
            }
        }
        return 0;
    }
}
//# sourceMappingURL=data:application/json;base64,