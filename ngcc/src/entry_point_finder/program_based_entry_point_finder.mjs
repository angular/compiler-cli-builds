import { createDependencyInfo } from '../dependencies/dependency_host';
import { EsmDependencyHost } from '../dependencies/esm_dependency_host';
import { ModuleResolver } from '../dependencies/module_resolver';
import { getPathMappingsFromTsConfig } from '../path_mappings';
import { TracingEntryPointFinder } from './tracing_entry_point_finder';
import { trackDuration } from './utils';
/**
 * An EntryPointFinder that starts from the files in the program defined by the given tsconfig.json
 * and only returns entry-points that are dependencies of these files.
 *
 * This is faster than searching the entire file-system for all the entry-points,
 * and is used primarily by the CLI integration.
 */
export class ProgramBasedEntryPointFinder extends TracingEntryPointFinder {
    constructor(fs, config, logger, resolver, entryPointCollector, entryPointManifest, basePath, tsConfig, projectPath) {
        super(fs, config, logger, resolver, basePath, getPathMappingsFromTsConfig(fs, tsConfig, projectPath));
        this.entryPointCollector = entryPointCollector;
        this.entryPointManifest = entryPointManifest;
        this.tsConfig = tsConfig;
        this.entryPointsWithDependencies = null;
    }
    /**
     * Return an array containing the external import paths that were extracted from the source-files
     * of the program defined by the tsconfig.json.
     */
    getInitialEntryPointPaths() {
        const moduleResolver = new ModuleResolver(this.fs, this.pathMappings, ['', '.ts', '/index.ts']);
        const host = new EsmDependencyHost(this.fs, moduleResolver);
        const dependencies = createDependencyInfo();
        const rootFiles = this.tsConfig.rootNames.map(rootName => this.fs.resolve(rootName));
        this.logger.debug(`Using the program from ${this.tsConfig.project} to seed the entry-point finding.`);
        this.logger.debug(`Collecting dependencies from the following files:` + rootFiles.map(file => `\n- ${file}`));
        host.collectDependenciesInFiles(rootFiles, dependencies);
        return Array.from(dependencies.dependencies);
    }
    /**
     * For the given `entryPointPath`, compute, or retrieve, the entry-point information, including
     * paths to other entry-points that this entry-point depends upon.
     *
     * In this entry-point finder, we use the `EntryPointManifest` to avoid computing each
     * entry-point's dependencies in the case that this had been done previously.
     *
     * @param entryPointPath the path to the entry-point whose information and dependencies are to be
     *     retrieved or computed.
     *
     * @returns the entry-point and its dependencies or `null` if the entry-point is not compiled by
     *     Angular or cannot be determined.
     */
    getEntryPointWithDeps(entryPointPath) {
        const entryPoints = this.findOrLoadEntryPoints();
        if (!entryPoints.has(entryPointPath)) {
            return null;
        }
        const entryPointWithDeps = entryPoints.get(entryPointPath);
        if (!entryPointWithDeps.entryPoint.compiledByAngular) {
            return null;
        }
        return entryPointWithDeps;
    }
    /**
     * Walk the base paths looking for entry-points or load this information from an entry-point
     * manifest, if available.
     */
    findOrLoadEntryPoints() {
        if (this.entryPointsWithDependencies === null) {
            const entryPointsWithDependencies = this.entryPointsWithDependencies =
                new Map();
            for (const basePath of this.getBasePaths()) {
                const entryPoints = this.entryPointManifest.readEntryPointsUsingManifest(basePath) ||
                    this.walkBasePathForPackages(basePath);
                for (const e of entryPoints) {
                    entryPointsWithDependencies.set(e.entryPoint.path, e);
                }
            }
        }
        return this.entryPointsWithDependencies;
    }
    /**
     * Search the `basePath` for possible Angular packages and entry-points.
     *
     * @param basePath The path at which to start the search.
     * @returns an array of `EntryPoint`s that were found within `basePath`.
     */
    walkBasePathForPackages(basePath) {
        this.logger.debug(`No manifest found for ${basePath} so walking the directories for entry-points.`);
        const entryPoints = trackDuration(() => this.entryPointCollector.walkDirectoryForPackages(basePath), duration => this.logger.debug(`Walking ${basePath} for entry-points took ${duration}s.`));
        this.entryPointManifest.writeEntryPointManifest(basePath, entryPoints);
        return entryPoints;
    }
}
//# sourceMappingURL=data:application/json;base64,